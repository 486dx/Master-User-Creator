<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAHYcAAB2HAY/l8WUAAOIRSURBVHhe7P33VxXZ3u+Lf38/4/4B945xzxn3
Ps8+z93n7PDs/ezcvTvttrVtc0JEsiAgKJgxoGIAI6KYFcWEknPOOeecc44rr8WC9/cz51oI2stu
7NaWMF+M96DirFmzZtXnPWdVrfr/CQQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEMwzDv72N78J
vnTZO9jn5v1g7+u3hISEhITeJp87H16LaDu37j4MPnzkaPD/8X/8t2B9zBHMF37961/HB0UmobJj
DJVto6hoHRYSEhISMqDK9hGUtwyjuHEAJR9ALN2y5iFUtY+inLZX0jSA0g8glm5Z8yDtj+6a/6H2
h6mMyqu6cxQnT3tAH3YE8wXW8q/uHEdaaQvSSpp1Km1GclUHkmq7kUL/2fj0dCEhIaGlqPSyFiQW
1CMorgChiUUISXj/Yumy9GOzqhCTUYLYzNIPpuj0IsTnVtM2i2nbhd/Ly/tSUGw+4vMaUFjVIgzA
fOPWnQfBdd0SZJS1IrO8FRks4FPgL47PQ/WzKBQnFiCtrodPZ/OFhISElqKyK9sRQ4E5Or2chtvo
mtny3pVV0YbEnBoyAXlIK6pFUUMf8mq637vy6ZqeU9mK8OQiRKaU0XA7Msjk6NSCdP0w+z9bM8u8
rrctn05ppZBpCk8pR1F1qzAA8w2fm3eDa7skVMHbkElBPosqQu9Jb0yu3I6JdVaY+tYE3Wd8+Dw+
nyqokJCQ0FJTDl3/4ig4x5EJyK7soIBNDab3rKyKdiTl11OrvBCZpQ3cAORTg+zt6vkBGVpepwIy
AHnV7YhKL0FMRiU3NyxYv67WtwzP1tumzyi1qBFRGVWiB2A+MtsApFFl67h4j4K/CSqDE5FT3ITa
p1HA11vQ6u3H53/vxKCKwyrPm9MNTXufejP997U9lg47uQ3Ne1f9nDyxPMyWoWUMqx051Z0GpgsJ
Cf0cTRuAeDIAOZWdyCyjRtN7VnZFB5L1BiCrrBHFjf08WBtSEc3Lr+vVteop4M9WLk1j8wvrDa9b
WN+L/OqOVwYgj64ZvBGoVxb/386H2fUntaQVyUVNyK7q5OO51V1Io+CfTDEik6457LozvfzM+ro0
0kuahAGYrzADUNctRSZVgJySZqi37ETznZdI6RhDJjlF9r+TTIHKyB7Z5eRQaTldkNQH/nLWbTUz
zlXFKoKB6d+TrnKxyqQbNrSMIbGKRXmZHqeTc7qL7qeJtk0nd25NFzJKGsix1s8h798Xy08O7Qu7
ULA8ZZQ28QuHoWV/SFkVrUgrrkdaSSPlpxFplJ+57R8ZBbpoJOZUUF6YcTC0jJCQ0E9RLl374nNq
fxkDkFT0gwaguGkAsZnlePQsFE9eRHxPfs9DERCZSoG+z+D60wYgOr0UsT9gANi1OTQxH0FhiQgM
T8S9pxEU+FsQGJeLxy8iERKZDP/QBKSQOciivL++vi6NdDIJ0cwAVAsDMO94ZQAo+OUX1GFigzVq
gpKQ3jJIlbEdaa3DaHwYgon11sgrbkQWLTd9QuTVdiEsLARPgxOQQ66TnyQ1PUjNycWjp4FIK6OA
SMGQBUV28kyvl0MukgVbNj27rAFxmaU03K2fpwvEPIjqx9nyrFXL12cOtLQWgWFxSKf0mdNNLyhD
EFXOzKrumbT16/PAzoOybv3vpadPM6eiGREx8XgRHAn/oDCExOfyPE0vy+6RvZkWT4/m8Wk0zPYx
KbsYKcWt5MpbEJmYzp3z9DZ1687eL13ZzM4LWy6rpBbBETF4/jIQj58H4WVIDBLoosCc/uw0uGiY
T2N5rOpCZlEZ/F9GIoOGeZ6FhITei+aTAShtGcaToHjk5+aiubEBrS1NaGmi/82NaKb/DfW1dO0I
5Q0BFuzfXH+uBoBdc56FpSEtLRuM+vomnL18D88DojCh0UCpkOP6LT/eM5LNyuS19XVpCAMwj5k2
AKz1mt48gKED5zC89zQyGvqQ2j7CW/xSq30YcT6FDKo0WbOCT15tJ8LDw3Dv4TMkFjbxwJtX00Gm
IBT3HwcitZR1m7UjJb8SSflUQfTBNKu0gVqp5cigypGUnklOMhhJhQ00j0xAeRPNK+NP3LITLqOM
PVzSiJSCGl2rlgXf0hr4B0Zyg8ENQH4xBe5oMie9yNGvn0aVTmcqWpBE46kluvxl8vSaKE81vOuK
90BQnsOjohEUnUX7xwIpux/WRJW3hS+fWlDNl2UPzbxKi4IuK4O0wmok5lbp1itvxIuAAIQkFvBW
PMs360lg200vruUtc7bPbL9YupmlzbxsUslYzTYBurLt5WUTGJOFXBpm+5lZWs/Ljd13Y2lwA0XG
heUppaiRyr6XDEA5XgbFCAMgJPSeNW0AEijY5bFrCwVrQ8qhhkgqNQJSilsMKpvOTRYsDa2bS/NS
Cxu5Acgub0Zp8yB/DuBNlbeN4nloEooKi1BcXIJnL0IRGBJN/8MQn5CCFjIEz15G8GsEMxFvrs+m
FVIDLjqjDLGZVcinaxS7FvJeRLa/dN3S9bDqGhh3nlCjIjOfm4CBgUFoJ7SQSqS46vMQj4KTuFHQ
9TrOSDdO17rSFkRnVgsDMB9hBqCeDAAL+AX5tRhwPQ/8ZQWktofQ7XELiu1O0Gy0QTE5xUwyAK9a
rqR8MgAR0fHU+o5FcEwm8hsHkZ5XTK3zKLykFnpaWQfS8ksQFpuMIJoWkVpCwZ9a76FRCI5MQmx2
JWITEvDA7xkiaV4mzWMt39CYJARExCODToiYhCQ8JYMQEptJQZa1dElltXhJAT+9vIPf78ooKEVA
aAIF7CYEh0dT2omISi+jk6kFIVGxCIlORkB4DJLppEykoPrEPwjBUak8fRZYs0uq8CIoApnVFGhZ
YKV9y6vrRWpuIZ76B/Kur5SiWoTFxCNUn1ZSYTO11KsRFpeEkEjaRnwO0ouq8eTpYzwLSSADUo0g
armnVXQiKSMbL0JYd1k8/INjkV7ZjYSUNNqvEF42z18GIz6XtfBp3/RlywxAMuU1OC4b+Q0DSM0p
pH0Op/1JxPPAKCQWtfByCAwNp31JIkMUgSg6yXLKqrkByKQLVK4+LSEhoZ8vdn4m5DIDUEvDrMeT
mfbXlUsmPCK5CGHRqYiIzUBk3IzYeHhMGkL1vYsG16fpzACEJRfrDcAQBWwWwF9XedsYGYBklJVS
Cz42EU/C0qmh0I9Yuo74PglCW+u0AeimYD/wvfXZNGYAYuZgAHJIJU3DuHTjOQoLSzExwVr+Cly/
+QgPgxJRTCaFGSSDBoAaRuytgpjMGvEWwHyEPwQ4pEFpUiE0G2wgs3DB4JGLGHE5hTEnN3SfvYmC
3Gqk0kHuzypCbVEdf02QnRDMAIRFRCMuq5wH+DQKyBHRcYjNKCFTEIPUUqoAZfWITc1DaHg4/MOT
kZZXiqcvQykYN1Ng60cmVaiXEYkooAoWFRMN/7AkpBXVUPAM5SdBTHw8guPzUUDL8hPxlQGgVi4F
V2YAMgvLEBCWyAPwsxdBiM9vQAGZkfikZDwNikZKYS3CIyOpNZ2NhNR0vAhP40GVBUjesmbrh8Yh
u7bvVdBk6aZm5+FZYDQZmxEkpqTgKQVenlZUFF5EpPOnaOPS8+nEjsMT2qfsmj7ekxCX10QnVwsF
4kikljQgkAJ3cmk7ipsGEZuYxN19QkoqAqLSUdQ6hvjkFATFZnPT8epiM8sAFDb0IJgCfRyd3MXN
w0jOzEIQGa6YhGQqo0IUUdlllVTgRTCZruIqBJDJEAZASOj9aq4G4PHLGHR3dmBkeAjDQ4NvaADP
AqKRQddKg+u/owEoKS5GZmYObvsGwJ8aHg+ehdP5H0kGoPm9GYDCuj6w3ye46/sC1dXVaGpqpPRb
kJCQghu+Qcik5VjDSRiABYjPrfvBNcMajDq6YXTPCWRRKz+zeQCZjX2kfv4sQH5NJ6qK66FOzkRf
djFKy5oouOifAQiPooDbiKS0DLykVm5gRDKdLK14Sa189rBIKBmEqMxKagVn4UVYPHLrB5FeUInA
sEiEp1CrnwzAC2phFzaNIDwijA/HpuUhOiWX1m9CZHwSolkF1ZsOZgByKxspuIYjtbyLB8T0vEJK
OxF59QP6++fRCCdDE5OQgOch0ZRePqKTc5Bc1IC4lHSEJRXr3oPlJzZLrwkvA0N4q7qQTo58qvAF
9X1IycpDUHQm5W2IjEgcngVTWhTweVqFdYgi5826+1kvh39wBLKqemh/IxCX38wNQAAtn1xYTf+j
KCD38byybv3QhHzEkxFh/wso7cT0LITEv80A5KCgrktvIjrIRAwjI7+I8pXGe1+isqpp2hDyquqp
/MkAFFYKAyAk9AE0FwOQR42Ih88jUV1ZgZaWZjQ3N70mdp/+0bMwZFLjxdD672IAngYnopQMQGd7
G5oa6lFfV4OGulq00nY72lrIAITz2w1vNQB13XoDUM2fC9D1frJeSPZfpwK6JkWmlcHXLwDdXe2o
q6vD6XNX8YIaPMND/cjOysEdvxBk81uSlH9ah0n3TBL7z267tpIBqBYGYD7ic+d+cMOgCkrjXWh+
FIrMjjGqxOy1Ep2YIWgurMFEUjqmEtMwSVKk5qCYXF9BYy9CQ8MQQy3TotpW+D30RURGNUrq2uAf
GI50OvAh1JIPp1ZqJLWan4UmkBtsoCBK43EJ1IrNRm5FHZ75ByCeTizWzR0YFov47DLEUNBm7jEy
loIce4CE8sFOQKYCGo6Nj6fgHsXNwosgykN2LaVFaacVICaJWtcRqcgoqUJgKOuhKOW9EMx1s9Y2
c7PsPthMerpg/ywwDFFJOaQMfmKk5uQjkLXSKeiye+s8LfYrWpS3jPJWREZH0z5kIC4xFY/9g5FT
N0D7GYmXtO3sinoEBEYgnfYhhvY1IDwZcRn51EqPQEpZGxKSkim456K4dRRJqRk0nMV7OWby1E8G
IAOBsVkoIuPAegzY7YO4zCIEhkQgNrcOWYUleB4Qjpj0YoRGxvCehdzyGvgHRCGbDARz9dPpCQkJ
/TwV1Pfwd/R/yACwxsPzsGQ698MRGh5LovNyWmExCKZG0uOAGAqMb+lB0BsA1jhiDya/3QCM8geV
/V+GUCOMbWe2YhBCDbAnAdF03dQF+zfXZ9MKqAEXm1VO18c3DcC0CdCZB/+INDx58hLRMQnwvHwL
j4IScd8/Gn5PAvjth2s3H/JnuFi8eJsBiKXrc3FNmzAA8w1mAFqGJ6Dc7oSWZ1HIITOQ3zH6mgra
R1BKblGdkoWe/AoUUwAuIhU39iGjUPejGCVN/cgqraNK0EPzu5CaX4l8Cqx5FJRjkrP5w27ppY3I
r2pBXGomBcMi3govaepDWk4R4ilIsy7yzIIyRCdlkQkop9Z4H2/Rswfp2LbYNrnYQywNPUjJLkBU
YiY/KYvpRCmsaUV8WjYP0KwCsgdosourEEPpxWWU8Hdmc8rreZfUa+mRSmjZnLI6xCZnIjolmz+E
mF/dgvTiBv4+Lfvt7OySakork9/iYC30QjI9canZSMot57ctChropKpsRGxKDrIqad2Cat6qL6G8
JmeyngNKt5RO6pYh5JTW8vdj2XZzyxtouJFv51WeaJiVnW46+01tVk7FZE6ykFJE+6v/Pe/soioq
r0xqmVTScoOUpzYqezqhqYxm75+QkNDPUyld41KLmn7QALCgyZ58j0wrR0RqGYn9n1E4TWMP8bLl
DK3PDEAKGYAoanXnVLS81QAwsVf8EvLqdL9N8IZis6t5ADYU/JmmDUB8TiUZALp2vcUAsGDO3jSK
SClFQGwuGYZKfl1m1+6ItFJqoNC0zApal9ah9Q0aANpf9oxTWX2HMADzDWYA2sanoNrmCOW2XRg5
cgGjB8+90tj+Mxg6fhll5S3oLq1HQ1UrCluHKHCxANSPstZhlLXMDJey6aTyNjbcz4NdBfuwBY2X
03osKLPxCmYqeBpsWRqn+bo0RnTz9evr0h/k80ponIuG2bp8PTIo5W2ULp82nfboq3XY+rr02PZo
nPJT1vpGevo0yyh/s9cvJbE882UNpMXms3HdvlF+aZnp/WXrvyoDlld9utPpsW1ND7N1Xm1nVn5e
n872V1c2bBrbli4dXZ5mtqXf7uy0hISEfrYq2gYpeLf8oAFgYoGTNYQMixohFBQNrcc03QMQk0FB
lRoRP2QAWBBnH9p5m0qoQWVoPaZpA5CYV833p5AaKuxtJRbIZ6R77Zg94c96Eth67JYAX473iLA3
CnRGhD1LNb1e3qv1detmlbUiMb8BFY1dwgDMN9gzAB0yoPNpJEZOeGH05NXX5XYFw+duorqyDSVd
4yjjwU4XmISEhISWiqo6RvjP9aYWNPIAy3rm3rdYwM8qa6NWdSWK6jpR0y1DZfv4e1dVhwTl1KhI
zq8hUXCmxhQzDFzUiHj1f/bwm/NfLcMaKdPDuuml+nH2ZcMCMgFJVGaVTd3CAMw3bt66G9wjAcoH
lCgb1qBsSP26aFo5/a/spEpDLc0qanELCQkJLTXVUAOogFrxsRlVyCptRUZxy3sX7y7PrkE6e0uq
qhWljbpbiO9bpQ29KKhuR05FG+KzapFZYjg/P1cs3aTcOjJOHahu6RUGYL7BDECvDGCfBBYSEhKa
l+qYH6rpkqCgrg/sR3vYrwH+FBnq+n8l9mpzTQ/fDrudx57UZ7/n/95V14MiMgFsO+x2APsZX4P5
+bmi/cmp7EJtj0L0AMxHrt+8GyzVAIMj4xgYfgex5X8BDY5KFpWGRqUfXMNjsl9G44tLIxL5B9eo
RPGLaEyqXFyS/TIal6l+VFKlBjLVxE+W/EfElpHI1ZAqaDtKGv9AkpLYdmS0P3K11mBe5iIFrfuj
0kyhvlX0AMw7vMkA0DGETDIGyfjcJZWM/yKSSSWLSnKZ9INLIZf9ImK/A76YpFIqPrjUKuUvIo1a
tag0oVH/ItJOTHxwTWq1i0pTk5M/KkZjW58wAPMNZgDICPKgPjY2d42Pj/8ikkgki0pSqfSDSyaT
/SKSy+WLSgqF4oNLqVT+IlKpVItKarX6F5FGo/ngmiATsJikJRPwYxIGYJ4iDMAvK0MB+33LULD+
EDIURBeyDAXs9y1DwfpDyFAQXcgyFKw/hAwF7PctQ0F0IctQwH9TwgDMU+ZqAEZHRyGVKWYOvEZF
AU3KT87xcQkm6U8ulWDMQBD/MbH0FUrVaxWGdfuNs9sNBoLobLH1NZOTmFAr+bChZX5I4yS1ZgKT
lAaTSil/lQ77r1Tr91UqowsE22c2T/pq/R8VpSGTK3Tr0rCUpskVui5aNvxa8KZxmUJFp8oUZG/O
ewcZCtYfQoaC6EKWoYD9vmUoWH8IvRlAF7oMBesPIUMB+31rdvBcDJp93X6bhAGYp8zVAEgosPS0
NyIpMR6RkVFITi9A/2AXCgqLKVAO4OX9J6jvHoJCJuWB810kp2BSW5aPqOgYpKSkIT42BqlZhRil
oMuCosHAyiWlk1aFtLBgJGZV8mHDy71NunvmtRUFiKNtRtP2K+rbeDBg81V0QSjPSkRscgHGR3uQ
X1SKMTJB7CRm6zHz8P00X5eU9m2or4t/R1uiD5p8vLGVjIH8tcAtJxM00F6NZw+DMKxU823Mnj9X
GQrWH0Kzg+dikKGA/b5lKFh/CBkKogtZhoL1h9CbwfpDyFAQXcgyFPDflDAA85S5GgD2GEeA9wH8
bdlKHNi/H6cu3ENrdzV8/Z5hdKwDJl+sRWpdLyaoBa3R6h76UMllfF1DQX9G1AKnEzwuwBf7dtvj
T7/+NTZtt8N5n8cYUerSYSgpLba8lEzB5JRuGnvYibWWL+y0wknvcD5Nq5+nMyKGg/K0pFI5JlWD
sFn3JTbtcIDLHhcEJxRAzU5U/T5E3TyNg2ceYmy4Fvce+9PWphDw+BZK2kZBO/uj21BTMqWxj2Bh
cxAySo+dCkXRvthudwpqGpbL2T7o0NDMtuJorP2XOXrpmExNaukE0508Wr25MRTw35ShYP0hZCiI
LmQZCtjvW4aC9YeQoSC6kGUoWH8IGQrY71uGguhClqGA/6YYwgDMQ97FADy+cBA+AWn8YDJG+jpQ
XlJHwbYdNqtNkNEwQFM1yI4Lw927D1Db1Q+NSvGjtwVY+ioeuVVwdbZEXpucpy8Z6kDAswe4/ygI
nYMybhQ0SgniI1/gwb1HqGjs58t5uzji/N1YPpwZGYR7vk/Q3DVMF1zZ9wLybDEDoJZ0YK+VI9o1
fHWKtOwE1aAkKx5PXgbC58wxnPF+DpV0FHU1reioy8Hnf/89XM7cQlcf24aut+BtYgagJOYhbB1P
6DcANGQEwMzuJKjYKd1+BD/2xaOQSMho2Z6KRGxf74gBjQrVZRUoKsjE/XsPUNzUgUnKF+u1MBT0
Z8tQsP4QMhREF7IMBez3LUPB+kPIUBBdyDIUrD+EDAXs9y1DQXQhy1DAf1MMYQDmIe9iAF54HYL1
vpNITk5Cbnkj2kpiselbOwyrB7Bz9XaUdkkQ88IL9nuO4M6N87ByOoiWASkZBN399B8Ua9lTMNzn
YIrUmiGoR9vgZLEJrqc8cWLfHmy2OY5RCrZXj9vDxukAvDxOY+V6a9QNjOPuYWfc8M9G8stLMLHY
jZu3biOHgrVGpfxeQJ6t6R4Auw3LYLzTCQf2u6KE/YZ2/GOsXb8BF69fw9ovP8OJW9FoKwqH6bYj
aKovxFf/+E/YH7uC1u4B/vqYobSnxQxAbcZL/O1Pf8Ve1yM4fOQIzDYvx2ZHT0xNSHHGzRGnz/vA
3W033G8Gor8hB6Yb90A6NQ7Tz/+JHXvP4oLHSaxYvw0l7SPcUBkK+rNlKFh/CBkKogtZhgL2+5ah
YP0hZCiILmQZCtYfQoYC9vuWoSC6kGUo4L8pYQDmKe9iAAKvH8Q/lq+iQLkPN5/FoaMilQerEXU/
7NZZoqiuDtu//TsOeNzAC39ffP3ZVwjIrKNAp3tA7wc1ywBktypQGnEbVnvcecVhHNm1E3cfPoat
lR0G9dMenT+IC09j8Pi0K248z0Ja8FWs3maL9Mp6aCe1FIB/+KFAZgC08j44Gm/CZb8AxMXEo39k
GMftzPAis4FvI/q2B05cDeRd8+bbj/BpBx3NkFxDuZhU87wbSntazABUJj/DqjVbEJmcgkSSz1kX
mB/wRlt5HP7+989x79kL3Lt8HF+tt0NVeSYsN7lgTDuEneuNkdci5du8engXzj2Io6HJ7wX8N2Uo
WH8IGQqiC1mGAvb7lqFg/SFkKIguZBkK1h9ChgL2+5ahILqQZSjgvymGMADzkHcxAE8uHsSVJywI
6WgpioLJ+t3cAOxca4GCmlpYrP4Ulx4FIy0pCfGJKWjrG6JgMYcHA/UGYK/9dm4ASsJvYdvOo/ot
abDPficeP/eH+TZLdLO+c+LW6b24FpyCx6cOweN2NJ/WUpUPs03r4f0smd9DNxSUpzVzC2AXWl7d
itdi7/YNeJnVxMf83A/g8KUgtJdMG4AJ2FlsQmLNEDA1NwNQEvsINg7HeXqMmhR/7NjvhaaSKHz9
zQpEp2UiOTEB2aW1aClPgimV6djEIOy3mqOwQ3c75LSLNa4HZNGQ9nsB/00ZCtYfQoaC6EKWoYD9
vmUoWH8IGQqiC1mGgvWHkKGA/b5lKIguZBkK+G+KIQzAPOSdngE4vw+nbwViakr3s5HMABit3sUN
gPWKrSjuHkf840uwtLDHpasXcfG6L/rGFJBJDQT8N6U3AHtstyK5ahBaaQ8OWBrDdtdRHHCxh+3B
85BpVLjr7gIjYzucOO4KIwsndIzJcXOfI7weJiIn+Qk8L17GLgsT+AZnYlI7YTAoT4vfAlAOwHrN
l9i2ay+OHjqEoMQCZEc+xMrV63Dqggc2fvE5jvtEoK04EiZbD1EpTOHcbhNsMHVEQ0cf1EqFwbSn
pXsGwBdm1vtfPQRYGHUf2+zcodWMw2OfLfYedse5c2cQGF+I3tp0bF2zC5IpCWzXrID17oM4uscR
myxd0D4ih0rx+psDhmQoWH8IGQqiC1mGAvb7lqFg/SFkKIguZBkK1h9ChgL2+5ahILqQZSjgvymG
MADzkLkaABZY2hpqUN/cwYfZa4HD/V0oL63GmHQUlSXl6B0eh3ZChaL0BAQFBaGoqhky/dP7Py4J
ZOOjqKkqR/fACORKNZTD/YgPCUZ4QirGFTROF1CtSo7c+GgEhUaia2icv//fVFON1s4BdLZUIJi2
m1NYBjV/YM5wUJ6RlC78UlQUZiCUtsPynF1cA+3kFCryUhAcE4O6xga0tndjZKAbFeV1/NW9se4W
RIWForVngP8kruG0dZLJ5BjoaUdlVR0kLNDQPgyy8eoGKGgfVeODSAgPQXB4PNr7RiEd6UdleQOU
sg7std2D6ORMRISGo3tYxvdVPAT44WQoYL9vGQrWH0KGguhClqFg/SFkKGC/bxkKogtZhgL+mxIG
YJ4yVwPAfghIJlfygMeG+Y/0UKtdTa1yFsBVGjX/7X7+Wt8E+33oKd2P6tC63w/2hsXeFlCp1Pw3
89k2JRQ8Wc/DFFUgGQU2CXvljrY5wd4DnJrieWHrKenEVSooIPEf0QEm6CQzFIwNieVXM8G2okPD
g6xuGvsNa3ZRUNJ+SCkvGtpHtj32Yz3snYU5/RYAW17OfjtAzYd1PwSk+21zNl+mUPK0WM8C2x/2
Y0vsDcSJ8WZYbDRHWbeCz2Ut/7kEfyZDwfpDyFAQXcgyFLDftwwF6w8hQ0F0IevNQP2hZChgv28Z
CqILWYYC/ptiCAMwD5mrAXhTswP3h9T3AuoCl6GA/X1RMJIOIDYiFp2D4zpjYHA5wzIUrD+EDAXR
hSxDAft9y1Cw/hAyFEQXsgwF6w8hQwH7fctQEF3IMhTw35QwAPMUYQB+WRkK2IbEejrYjw6xHzRi
t1sMLfM2GQrWH0KGguhClqGA/b5lKFh/CBkKogtZhoL1h5ChgP2+ZSiILmQZCvhvShiAeQozACo6
Pqzb3VDA+tgyFOAWsgwF0oUqQ0F0IctQwF6oMmQKFrIMmYKFKkPGYyHLkMl5U5OTU2ho6xUGYL7h
7XM3WD0F/oCdoYuikJCQkJDQz5FGM4H61h5hAOYbwgAICQkJCX1ICQMwT1mMBoB1gRqaLvThJcpe
SEjoTQkDME/5KQZg9r3G+SR2r5DdZx8cHMTw8LDQL6yhoSH+nx0HQ8dnqcrQOSQktJQkDMA85V0N
AHv4y9BbAfNB7K2BgYEBnsepqSmhjyBmvtjvRBg6PktVi/GBSSGhd5EwAPOUdzEArGXHWnk9PT08
0M5HsbyxvAo+DswA9PX1GTw2S1GsPk73irx5PgkJLRUJAzBP+SkGgF3Q2Ct6b76z/7HF8sTyx/Iq
+DiwusFavYaOz1ITq4+sPIQBEFrqEgZgnvJTDAATu8C92dX5scXyxFqgLK+CjwMLduIWgE6sPk4b
ZmEAhJayhAGYpwgDIHifCAMwI2EAhIR0EgZgniIMgOB9IgzAjIQBEBLSSRiAeYowAIL3iTAAMxIG
QEhIJ2EA5inv0wBM/3b/O5sDWp6ta3DeO2iuBqClMg/ZpQ36McNoJ3WfCG6uzUV6QRUffhc0kn68
fPwAt27fxoOHj9DYO6KfI0V8fBQGpLoPZLwbU6/y9XNoqChGbWu/fgyoKMhBx4BEP/bzeJsBYJ9N
ZnWDfRJ5etro6BiUKg20E2q+Dhtmn0lmx/Gd6xATrcO3IXl9XfbJ59n1crqe8mmzluPL0jz2qevp
cbbsm8vMVWx7wgAICQkDMG95HwZgdGwcGu0ExkYG0NPbq7uIzroQvhL79r5GQ0FgFKOvhscwMjKM
AQrcY5TO99Z5B7E8/bgB0GLvur/gjysdMKGf8iYj9Rk44/OQD3c0FyO3rI4Pvwvt+SH45JPPcffe
ffhcPol1m5fDP62E5siRnpmMwZ9gAKKfeiMwq14/9tO5etgB5x4m68cAV/ONeJ727vtoiDcNAAvy
molJKKSj6O7uhlSuglaj0gd8FWrKMxESlQyFSo2a0gyExaRikOYND4+8Foh/XBLIZBLaRhdG5Qqo
lQq+DblSTXWbpnd1YZDyxuqgZGwUfb09tGwPhkdGX6urbxqPN8ffRcIACAnpJAzAPOXnG4BxqFQK
pAQ/gun2jTBavRoX74VBNaHhy8hZuuzHg+jCKx/tR1JyIvrGVFCN9dFwEkYoVrdUJ+G89y0Myydo
O6xlJuO/oDbTWqR06KIu138XXxcYdGmzb+XPvuD+mAEYrs/E/gMHsXePE5Iq+/RTtUiMuosTJ04h
OjEHt0/b4n/95TMEJmajrboGVRUNSI4PRXO/Lt326hxEZ1UAkzI8uX4ZbqfPoLxjiM+bpik7CI57
z+rHgN7SKKzcaIERhRxZcRlQTWqRl5WG5w/v4tFLFozleH7jCtzcT6O0bYCvo5J24vaNUzh15gZy
83Oxedl/4RtjOxQ39mNCNowHNy/i9ImzSMhr5suX5GchOMAfF0+fhX/0TIBPiAlBbc9MC//Wqf24
8ixdPwa4O5gjrLADyvEu3PZwh4ePL2RUJyZVg7h/2RPHPc6jcVBBxTSO+PhY3Lvujdgcw4ZhtgFg
wV9LxjAzMQCm2zbDZJsxtptYIaGoFlOTkxhuKYHxxnW4/jQKg200vGE97gfEIPDlTQTE5kKjVpGZ
lPK6IJNJdceYzCUfp3owfdxZ8FepJAi6eQE7TK2wyWIncqvboVJr0N9SCufdxrCwtIF/QDomNXIc
tt2ONRuMYWZlh/zqTqgVuvo5qR6F59HDCMuq4SZFMdoJN5c9yKvvg4qW0dXl6e2+Xv+mexlkND7d
AyEMgJCQTsIAzFN+rgGQyKg115KPlSvXUxCUQtLfjZraBozJFJhQK1FfWY66tk6wjuuWwhgs+3YF
Uio6aTiahr9FcmkrRob60d7eiVFqmQ0ODKO/ux3lVTWQKpRkAnQ9Ba0Ntaiub8MwbXtweJSCgxKt
tZWorGuk9XQ9DnMxAM8uu+JBUh3acvyx3+MBnxbi6w5Tx/2IiIxGRnYpoh974utNZqhq7kDgBTec
9grFyxuucL0Wypc/42yBx3H5uHv5EDxu+SMp/gW279iNjnE1n89ozgnGTsdj+jHGOBwc96C2rR6W
y7ehT6OFs9EybLI6iPS8Knhf2I9zPs+QlEDB0sYF3f39cN2zDWdv+SI6MpbKoxaH7TbCwf0O+keG
4OpgQss/RlxEKDZs2I6StmFcP2yGr9fbIioiAtu2GKO4h/Iz3oBtxtvRNqbR5wO4eXLf6wZglwWS
y9txYb8Rjl15hqy8PGqRj+HMMXtcexSKhIgHsNx9kgJZG77803/iiMcdlDf26td+ndkGQKGikz43
HF8vW4n4wjqMjY6jIPExVq1ej9recSQ+8sC67XuhoEAfdfcM1psdhIQMQ19nB7p6+inAqqGQDaG8
vAxNbV00roRSOorysjJ0UD2ZbuXznqPRQTQ1tvA8PHZ3gOWR6zSkxIm9dniSXMCny6QKqPrryAyY
o7RTAbV8HCMj+t4KqmeYGMVus23wiy8j96OBcrQVluvXIqW6n8yPEnWsLje1kQmRYYIMQlNNBaqb
26DSqKkOD2CI9r2tuQmdvQPcBAgDICSkkzAA85SfawDGJXKoRtphY7aWAuo9DEpZoJmii+sYHvic
wE5rB2y3sUBMThXi/Dzwb//zV9h/7gZ8vY7j3//jf2Lf+XvIjQukFvlFSJVdsFjxHXa7usJs/Qrs
cb9JxmEKcY+9sH7TBuw5sA8rvl6PvKY+JDy7CitqTe465Ib67lEKFOze7Y8ZADVMvvkz1ps7wnnH
ZvznF1ugoZboPktTVAzrFyFacwKw86gnHw73Po1TXlFQD1fD3GY/BrqbYeNwiIxJD1Z//icc9byE
C+fPYuWarSjulPF1GN8zAJN92LHTgQJXFxw32aKfgp6rnTXSmlU0cwgr//lfcPVgaZ3D2i07EBry
HM77T+rW1XPHwwUPkuuBkQpYU16mib3vgWtPYnH//GE8Sqjl0wK9XHHpeRoKI+7glE8QnzbN7VMH
4BOQqx8DzjpaI66sCykBN2CywwERBbVQ9lXiq3/8F9wvXcYFj5NYbbQTtXWlsLbYBal+PUPMNgBT
9HfTzREevjF8noRa84wLB3fA434orhwwxf/833+Hf3A4Tu0ypuF/ICwtG3fcjuF+cD5kI41wcdyM
beZWOHL6DoZHunDGdRccdjnBdJcjiup7eMucbUtKx7yvvR5BAY+xZ+8eJJa0YLw5G9s2G8HT/Sxs
nA+iuHWQ9qsGG7/9AtcevkBxbTNdmNRkHii/egOwf4cFniaWY0rLDEAbdhpvRX5zL55edYOV6U7s
O30FUrUCAY88YWtlR2bNDP5JJeitSccmMgvbtlohNq+eDKpCGAAhIb2EAZin/PxbAKOQKVQY7W+G
x2EbrFixEUklrWjJDcJny1YhMbcQATdO4KvNuyEZaIaphTla6Vqr7CzCNgsL9JJfqIx/DLPtx+ki
3orVf/scKY0jmByshtE6I5RWV8J080YUddBK2j5YrFqLtIpWHLH5Ds4Xn0A2oYKcgj83Iz9iAOrS
/GG8cy/KKypQUVFOrb0NCE4vxdk9lvBL0QVOpUqN6hQ/bHHSBe/Qyydx5Kw/H75yYg+2UMv6VmAG
jY3DZO3XCM4oRWtrC2rqGqCc9XxeU1YAbHYd1Y0oJLh9bBf2XXxMIXEMVqss0Uut16MuTshuoqA4
MQDTdcsQkFrC06ptaEJvfRY2bzZDj35XVHQCXT66A17hJZReO7as24zaIV2r/uwBOwSklODuxeN4
ob+XL+0qg4uDPXbt2ouyrtdDdspjT5jtOcV7ZTRjzdiycRsqepV8Xl9rFbas2oiQ2HhYGq1CfFE1
WluaUdfYCmlPOSztD2DmZsL3mTEA4zSmhuceO/jFFNKxU/G6wvC9dASn7ifwOmLpdIZPK4x8AKs9
5/mwx84duB+Sh8eXXbD/0hM+TaNW47nXQazcvguFxcU45WgM80PX+DzW+8O641trCnCVjpe5uSme
x1NZ5gfjT3/9E+IyyxDkcwZrjfegf1yKIN878PQ4iO9WrUBgagW15pV6AzCCvdYWeJ5cyQ2AarwD
DtuMkVdVB/P1n+GSfzJ/bqSjKAqff/UNItLzEe13EV+ut0NZbgy+/HItmoaUUMn1tyuEARAS4hIG
YJ7yPgwAewhwmrrkJ/jObDdiA27h82UrcO3GDVy6eBG+wfEYYvd5zc3RRY1eaXMOjMwtMEjbrkp8
CiuLkxiTNMJytTXqR9SYHOvEgd32SEiKxQ4LR+ja1hocsbKiFmoLtc56cPHUQWyjgF7ROgAlXXR/
zAD4XjiMexEUjPRUxPvh2JXH6G3Ig/V6I9jYOOB2RCYkgy0w+fZL+DwPR/zDmziv7/qvI2Pwv//4
OdrZDXIiN8oPViYW2LPPBVfuBkI1ywAMVCfjq3/+HTZ2DrA024GTl29DyqLHRA+cTV0woFLC0+0o
cht1QTE/9gmsKS1nSuvS7QCaMoXIe5dgvNEMO/ccQFH3KErjH+Gbf61CZl0X0kMeYdsGM9hRkHc5
6Q35xBTuXDqJsOxGnh7Dw2YVllu468dm0Mr7cJRa3MbbTbF+gwm8nqXw6X4+x+Dssg/79x9F1/A4
skPvUqvXGrtd9uL28ySox1rgfOgUJLrdN8jsHgD2mOPzSwdgc9RHN5Ojov1fjxfZzahNegIzB10v
R27oHZg76p6ZuLDLHg/DMnBujxVeZs28rXH9kAm+M7HBjWveuEh1KiQpFwqqk8wAsOcNpou/tzgc
azY7orYsCdttXXQT1S3YssIIVQOsx0VH3J3DsNjnSSUNyi+rwwoctzPDw9hSPh+yVphv2oqyHgWG
22pxZK89nE5eQ0rYA3zxxZe4qq/b9wPjUJIejB3OZ6CixKYfKhQGQEhIJ2EA5ik//xkAOYY7G3Dr
9g08fxmGu+eOw3qvJ9qaymFjsgXPw5MRFRGMtIIayPsbsGrZZ7gdmIqxzgqspuFH0TnIj/DF1i2H
yAA0YOM/N6JyUAHtSCtsthuhrLkDe0xW46jXA8QE3sGnv/sC8SUNyE6NRGZGArZ8sxwvU6sxqdF1
uf6QAZBKJTwozTDJHyrjyMfR0tICKVVUhmp8CD2DQ/y1NKVy+t7+JGRyXUt5GulgD63XBuWbrxRM
aTHY18vT7Bka008kpiYhpzKbnJriZT6hnYmm0iG2PKU1c7seo93taOnqeZXvwe4OjOnzwJ63aGnv
5MMMlp56YmYPPfZQa/YHnu7vbG1BV/9M3mSSIZ5f9eRMnkb7OmlaB01jY5R3uYIHzLcx2wBIZEpI
+mqxfesK7D/jjaCgULjt3QGL3SehoERyQ25gg/khvl5WwDVstNT1urhbmOL6ixzkhPtg9XpLhIRH
ITQhA2kxT2BOZio+MxvBgS9RUtPGH8JjDwqODXTihd8jhEVE47iDCY5efEzHTop9NqZw83mKm24H
4HjsOoYGO/H0vi+iI0Kxbf1q3AnJ5K8hsvxqaL9T/S/jq5Wr4R8cTHm1g/m+SxiXjyI6KgRpCQFY
881GZOTnwtnKGL4BsYiNDqW6XYvqzEBssT0MBRkxYQCEhF6XMADzlJ//DIAUsuEe+F4/j/37DuHU
5Zto7h6hwDaJ+rwkHD9wGIdPnEdORQtUajXSAh7gxNlLGKIgmB5wH2cuXUd1RRFCghIwNt6Dlw9f
onNECvloH8KCaHhUjdHOWpw9eRgPAv3gYGyO+OImJIXcgaurK15GxPOHBef6EOCSQD4IL3cXWLqc
hmxWr8QvwWwDwO6ty1UajPY2w+fsKRw4cBDe9wIxIldDpVKiqTwHL0Pjeb1qKqPhsCQ+nBIagvSC
OvJQKiQ+eYADB11xl5Zjr5pmhj7BAdejOH35Dho7B/mrf2PszYCxYQTd98bhw0dw84E/xmVUnxUq
9LZW4PThgzh74Qb6xigIj3TgxqWTOHLoMAKjM3Vvq4zp8zsugVolR8LLe9i7bx9OnL+PrmEl1PIh
PLp1Dq5HXBGblst/i6G1LAunDh3CoWNnkVHagr7WSgSEJ0BCBomnpa+PwgAICQkDMG95H7cA+CtU
s5qF7J48CwIKuvhPw7ro2TTWymLd2yxg85YmtYhldNGc0LJWGLXQqeUsoXnstgIzEXLpEIoLCtE9
OIbarDB89d1WVHbP3IWepKAwfQEXBkCPahyJ8fEYlP/C0Z94zQCw40jDUgrGr6DjK5WM66bLla9+
BGj2sGpigj/cx39fQl+xJjUqMhRUZ6hO6JiCjKej3w6rL/plp6hOsVdIWVozPTb65amOTVdVtr3p
1vqMZtLh60hZOuMU9HVTWI8QS5f9vsA0KoUU41K5rieB5k2nJQyAkJBOwgDMU36+AfiQGodaI0PQ
7SuwsLTAdlM7RGTW8vfDDS0vDMDH500DsJQlDICQkE7CAMxT5rcBYC079nOxav5jQkr1BP9tgdmt
rNkSBuDjIwzAjIQBEBLSSRiAecp8NwDTYtv7sW0KA/DxEQZgRsIACAnpJAzAPOVdDIBKpeIXMyb+
kRR9UJ4vYnliF1yWV8HHgdWN6eC31MXqIyuPkZERfu6wnzAWElrsejNuMAkDME95FwPALmi9vb1c
rKU9MDAwr8Ty1NPTw/Mq+DiwY9Df32/w+Cw1sbJg50pfXx83RcwICAktZrF6/mbcYBIGYJ4yVwPA
PnTCWteGHN980+R7+GSu4KehVqt5fTF0XISEhBa3mOllJoANz44fwgDMU+ZqAFjrn0kgEAgEAkOw
4M+eARIGYIHwLgaA3dcUCAQCgcAQLPgLA7CAEAZAIBAIBO8DYQAWGMIACAQCgeB9IAzAAmMxG4CJ
iQleEeez2OthAoFAsBgQBmCBsZgNAMsve3vhzaA7n8TeExdvLQgEgsWAMAALjPdtANhy7B3o6V8M
/Jhi76PPd9hTsyyfhvL/MTRfjh3TfMrLh9J82UdmRBdaebP3zgXzC2EAFhjv2wCwk5KdnNMV4WOK
Bdb53rpmBmC+lBcT+yElQ9M/huZTXj6U2D6yc8bQvF9SrB7Ol7zMVcywTE3RxUswb5g+NsIALBDe
twFgB3/652A/ttgFYiEYgPlSXkzTv1o3HzSf8vKhxPaRnTOG5v2SYuf2fMnLXMV+dEYYgPmFMAAL
DGEAPi4sn8IAGJYwAL+chAEQvA+EAVhgCAPwcWH5FAbAsIQBeDeNjxuePhcJAyB4HwgDsMD40AaA
fc9frph51U2tlH+wiwyveEoVFHIpH367AZiAy/Z18I2v1I9/eOori9A5otSPzcDyPV1eLM9yhRqT
Wg3G3igjNk8qV9Bxml1+oxiXSKFSKb+3/E/V94IupSuRyTF9mdVqVDT9lwkSb+aF7bdMpniVF5VS
8d72m+/TuJS/OiqZYyBl5wRbTyJVYELz/WM2F80Ouuy/Uj2h3zt2Ts7lXGH5lvB8y6RSKFUaqBQy
yhP7eqdiDuvr9FYDQGlPTk5BLh2nebppumvB94d1YvmZKUelSgWphNZ9Nf9t0n090fA8wxIGYP7B
6g+TMAALhA9pANhJr9VOorW6ENeuXcVl72tIK6yh9GTfO5l/vsbpoqNE4A1vvIjKo2HVWw1AT1Uq
vv7Tb2Fx4BJmz1XLh9HV1QO1VndRmdSM03gXXZS1fHxqQobOzk7oxkCVWg01VWyGdkIDNV28pya1
tE1AIRlGz+Aon6eSj2Pn9tW4FZYDuWrmAs9geZ8uL5lcycsqKjETChbUZ+2fkrZTEBeEu35hUNHF
dZymSWn5zpo8eF25iyGlmk+bvc5P0eygy46lSqPFaE8zHt67hStelxCckI1xqeyNi/6H0Zt5UU9M
orejDg98ruDSJR8UVDRR/Zp4LyaAGamRwRaEhIaga1AC6Y/sHzsXdMFfjo6mYoRGxWOUzMm7HoPZ
QZedZxW5KfDxuUbH9BrK6jugUStpvuF1uShAa+RjuHnhEA6d9kFmbhLyKptRkRqOq9f8odDXFYPr
zpJhAzBO9XgI0RFhaOkdgYwCOZvGjv0ILcfWmR6eSYfM91AbQsPCMDA2hPteV1FQS+cQmfKZdL8v
CStPSucH9/UNCQMw/2D1h0kYgAXChzQAExQJ00MeY916I5y+fBnup47hwq1gjCuVlOZMa5i1LsYk
MkxOTdIFXXdCs1YMS0tKF9VpFDJqIdCFWqvVhWAVtZBU08GZAgGFZHjYWuLMjUga1r7VAPheOobA
5Bx4uu5GXusYn1aY9gJm1ptgbWGP5NJ2tJBJsLbZCCsLG4SkVqK9MgP21qbYZbsTWy1d0TauQkbI
HXg9SeDrZ728g3NeYZgYr4fJdxtw0vMUNq/9Fvcjc9BTnYU///7fsWq7E6raBvny07By0pUXK9tJ
XHXeiP/z11+hfVwDBSsXZmyoBcZIe+IFp0NeYHs6bTz6KpNgtn03BqgYpvTlolGyrzfOlJtcKiEz
NpMOK9txKu/pS6dsVutudtBVqDVoK8uG8YZNcHX3wMVLp+j/TbQNSvm22PqTE2qqGzSuS4r3ELDj
piIzpNQfQ2ZeVEpqldKx1DKDpF94Ol8a/YQ3e4dez8sEGgtjsXrtKhw9cRoXPc9i7ZqVeJFUTMd4
ggyfft9VtO/TdYvq0yRtb5wCtWxWLxQL7iwvvL7pq4eS6vjwYCvCI8PQPfT656RZeb1Kk2A9Woq+
eriddsewGujvKEN4bCJGqMxZD9Q0bJ9ZuWqorKbrLCuv2YZlJujqjv/5nduwwsgeV0+7YdUqY+TV
9/H1dGWtorKeOW5ajZLKZRLtRdHYuNUePWMyFOTGoZCMA6sr5lbuoOxBSeZQx5SuNW4gyBoyAAoN
pV0Si//zv/03eAXl0upU57RK+Fx0Q0bNAKU3iWsXjiOrjoa1mlfHQC3roXKMwKi0H3u2myGlUr8P
ZJLZvrO6ywwBryc0TL4OQ415OHbuIhS0c1LatpqMJ19Hb/DY8dJB+0DHjzUuhAGYf7BjyiQMwALh
QxkAiYxaLh2l2LphA9IbXw967GLc21aOC8eP4MjFK2gfkmGspxEBfi/x3O8mXI+dRHFDJ/+07FBP
Hbzc3XDo3HnU99KFu6+ZWhfBuH7xEhJzK5EW/xxuJ47jaWgKpTwFrz0OuHgvloYnDBsAzQA2ffMV
onJK4eG8HUduxtDFawhmxhtR1KYzA2pZH3ZZbkJsWTcf12jGsc96K4KyGvh48K1TOHYtCMnBt3Dq
djiflux7CQdPPoNqsBjffLoKfRoK7jWJ2GJsz+ef2GuOiNIePjwbdqGdLq/xznK47HaEo70tbgWl
0/WVLqoU0KL87+DEWU+cPLAHxzzu8/VKUsLheuIELp8/BXunkxiUDCMqIhQ3L19EWHolRvvr9OXr
hdYBCv4qGeL9fXHY9SgSCuogH+vDw8vn4HrSE9VtA2SudC206aDLWnKTymHss9yCG2F08Z+FWjqI
hLhoPLx9HXefxEI+PoB71z1w3PUYghNKeJBPT4hEdlkjBR8lsmMjkU7b7GwsQ2hQGO7fuARXutg3
941Bq5YjKcCP5ys6q5yC5kzPxysDwLqh1aNwNl0Hn6AcfS6AltwAfLd+O9r7BhATFY6bVy4hLK0C
g61lcDvqCq9bj/AyIAz9EgXqSlJx5vRRXLj6AD3jcnTVleIF1beHdy/j2JmLaOkbh3SwA/ERqejs
bML1c6fhef48Tp10Q2xuNdpq83Hu7FF4XrlH6SkR43sGv/r1r+F+wx8N1ZVIisviRqejtgCep4/B
9eh55Ff3UFyUIS4wBAEvnuHEkUMIiM8mc8Ruo8zsoy7osnNLgwu77HEvpIjv31WXnbjqF4W8nFT4
3rqG+/4JkI314473ORxzPY7wlEqq8ipc3GeO3/1lGaJzS1CWmYWKpj5kvPCBnYMnT6elMhOnDh3G
6Zv3MTCu0LfkddufliEDwM6nexePw9nFGQ4ux8GsTUNeNP70u1/BdO9ZxES+IGP7K2zf7Y5qKoO4
mAjcIKMfGpeG1LhMyFSDOL7LCdfu+cH9+DE8ikzhRiglLgK5Fc28bmRFRyKvpB5PL7vg33/7B1x5
GAY11fucuJdwPeyKe2FxZBAnMdRRBx8yRcfPX0MrHSvWaBAGYP4hDMAC40MZABW15PPD7sNu9xk+
va0qH1eveOFlRAokQ51wdDDF3WcReHjNDfbHrqG3MRf/9f/+T1wLoIvISQestzhELdNhHNhjDu8H
wfC/5wHrfR7obMjDX377Wxw9dxvltfWIjfDHs0c3sfKb5chu6cOdQ7t/0AA0ZPjjky++wr79B7Hb
1girzA9gsL0c1lbO+iUISSPMt1phpg09AtutZujUNUrQWRCG/afuIi7gBjwe6HsAnl3DodP+kPcW
wdbkCJ+m7a+Gy569fPjoHjPEVw/z4dmwCy0rrwk6BnGPLsDVOwCDdcmwcjrOW3oJTy9j3VZzhEZF
wHrdcuz1eI6u+nRq/a7Gs/BQnN1vjTXGh6lV1Iwv/vgb7DnmhYKiPDjvscK95xHwvXYcu0/dRkH8
Iyxfa4zYxBRUtHbitrstTJ3ckZSShOrWru8ZAGZIBqhVZmFsi25qQI73NuP+NS/c8n0BmWwYO9Z8
hnXbnZGWVQg3Z3McOOWFqJCXWLN6M1IqWuB13BFez9P4Pno52eDsnURUJT/Af/7HZwiIjsf5w3aw
OOSNsjR/fEPrRFO+MkoqeF2bDkCv8kIt6/GuCuw0s0XTqBpyCc2nljDk3bA0tUJ6bjaW//U/4XTU
C/l5GdixbS0Fkud4fNMdf/jdv9AwpkZJZjSe+vvBzmgVTvtGoynzJf7Xr36PF7GxOO6wBbZHb0Pa
X4b1XxqjurcfmcmpCHjggT/+/u/IaxlEVX4inj73gyOlffTaS9RmheDTL79ESEYZckLvwnjrEYwM
NcJkw3e44ReIJ2Ryvttsj24KtrZf/w3Ge08jKvAB/vXVcmox90Ot0N0Ge9MAXHbaiZPegagvyYLR
JhMU1DbCZu3n2GixH+nZhTiy2xSHzlxDVLA/Vq8xQkJJKyLvuuOzb4xR29KOyw42OP8wBUWR97HL
2RsjvdWwtNyOwPAEXDq5GwfIQGq0k6/KeFpvGoBx1pvRV4sdljvQL1Ph6C4LxJMhHuiowNoVn+Lk
zUDUVORg3befwv1OGLprMvDpH36Hg6dvIT87BkbfmKKTTOf+DStguccTYSFBWPvdd4grbsAFVwdc
D8zmdeO8nRU87sQhP/ImPlm2EilFlciN94OpjSMSEhKxy8YUwakluHTAGE5u15GQnIim7gEyMRJh
AOYhwgAsMD6UAVBSRCuJfQRzG1ceyDrrS3Dl2B58Z2SNzMRQfPL3T3D20mWcOrwHq7a7oKI0Fabr
7cDaHRN91XDY6YTcrHh8+pc/4eT5yzh7fD9WGtmjKD8JJqaOkNJyqqE2XPY8A48zJ7By+d8QUdKE
+67ObzcAUxocst6CJ2mN+gmgVuVGhGaU4KSTGdyvPkVcfAKqOtrhedAG+07dQlxcIoqb2nH73F7s
3HeeX5QcrczwOK0SzZkvsHzddsSnpMD+23/B9vhzKHvysHmlna6bvrOYjIUt3383h40UvB9gkFpg
s2EX2+Fh9otmGhzY/g3+8e0WHHAyx7/95u8U7BQ462iJwGxdfrMDbsHd6xmC75zB6duhfNpAbTrs
7Y+jv78GxpvNwX77sDXzOf78l3+8Kt81ZntRWZkLGzNjuF27jxGZGmkh97BhqykeUGCQKpSv7hPP
NgAjbUUw2WSGFipsxWAr/G9cxBf//Az59W3Yv8MUCVXDmOovhZmJDVkkHdH3zuHklSe4d/UE7obl
8Wn3ju3HlUcpKIl/COeD1/g0SJpgts0OecW5sLPchiNed9A9LCHTN/Mg2GwDIO2tgcVmE1T1KaGR
SzFO+cNYC0xNLZBfnA/TrZbooYKupeCxw1lnOqHqhrPFTtT0jSL65QOcPHkGdibL4XzBFzVpwbAw
P8YX6y6Ohe2uw+jpqobpd5ZokrA6o4Lbbhs8TmCtcS0iXvriBK3vaPYtbCkQTQw3w2zHDjBLVx7n
BwfHi0iPeQSnI1dZkhx3J1sEpubgqJk5ooo6+LSzu80pzVJMahSv9nHGAEzi2j4r/OEf/6LgvQeP
4wuozo6RodyGlHoJNF0FMN1uh+mzMPTmKRz1DkFnSRQsHE/zadecd8H7eSYKI+5h39H7yIi4jr98
vgIXL1/C4d3W2LzzGMYnJr/3oOObBkBNRVAW9wD/9u+/xr4Dh/DJH/4D+64E8m3sc9iOmBLWO6aE
i70JkmpGoO7Iw6Yt1hiiY6CmOrF9lTU65SM4ZGmFlMpevl7Ybaq33s9w4+Ix+EbpejluHnLGFb90
jDelYbu9C5/m4bgeK7fZ4uKFC7Dcug5n7oUjKfg2Nm23QkBKLr/NwvIoDMD8QxiABcYHuwXAnkIe
bsW21d/gZlS+buZIJSx32iInPR6rVq1CemkdKkuLUFbbgpayBBiv2oleamWPNhfBwcEJpdQKWr1i
GeLzq1BVXoLS6kY0l8bD1P4wv7cZecMNRra6C5/D1q8RXFiPuwedcP5ODE0xYAAmpAgKDMTArBhc
lZuAtLJmmjUIn5MncMTdA5V9FPE0Evh6nMWRY6eQ08TuYarx8uplHDt2HAEJutYL20aw31Uc9TyP
F/4vkZFdB420C8EvYvnDhdrxXkRFRvOHBvuqsuF2+Ahqu1/vBeAXXwpmXeVJ2LBlGxJyilBcXARX
uy248DAC3oetceFJEl/21kF7OJ99hrgnHrA9dIVPy3lxHas27sPQQDXMrJ3QS3GxOScYK1auQkZZ
HRkrSq+sEqNyBTQKKa4cscc2hzPcoIxRq9587UpceJRAgWaC52U66I6xY61V4ITDVjh6POT7w7qE
nW038eN20MmOLuz9UPZWYtPqNchu1lmA8wd34vrLZNx134OTt6P5tMNbN+Lco1RUJPlhm8VhXh7N
+WFYa2SDXjoWWqUc1086wcjmJIUUfM+MsLxMTarguc8MO07eJKvEmIK/92GY7joNyUAdTK2c0EMr
VyU9xvotNpDREsM1aVi1zARFZVlY8691aKNtBXk5Yxe1UqtTgmC2/Sjv1m7MDoW9y1H0dlXBeAWZ
KNrZ516u1Fr25Vsab8vHyi9WooGqRdStQ7A6dBHynmqs3rIVfVSQZTEPscP2HMpyQ7Fuqx1GWWEp
emFpbIyM6jocNjZDaA67faSF+x5zPEsuh1ZtyABo4Glvg8sPE9lmeXf5lLQTdra2yKwbhryrFBtW
r0N+u+48PLNvB7xeZvHeDCNrXa/T1d328HqagYKwO9h94BaKUv2wcqMJSuubUFaUj7Lqemrdf/+B
vNcNAKU/KccJR1O43XiGosIixAX4YPVGC4ySWbQzW4uQvHba2jgsTVYjsqwfitZsmOxw4efWaEcB
jL+1RJdiDC5GG+EXV8bz5u5igTuh6fA55oAz+p6zvRvXwfNxJgarYqghYMOn3ThiAetDHmhqakBh
fi5qWzug1GjR21SKdV8vw6OYEkxpVcIAzEOEAVhgfMiHANmDYPWF8TDZsJ5aWxbYvskI+919+KtB
j84fhpmpDbWcnOAXnoO+hmzsMHZBn2YKoy0lcN69h4KZGoHXT8HUxAqOtNydlynorc+G3d6TkGqn
0FgQgy2rv8WhvUexbs1KapG2we/kYXhTQJui1v7bHgKcT/ByopMj5M5puF70008FWvLC+X7WVeTA
aP1K7NznDMvNG3HyagCU4+1wMNsIC1sr7NlJQdHRE8MUBB2cDqJjRI0JlQT3PQ7BzMwG9lRuz6Pz
UFkYBXs7O+zauQPPQpIREeANpz3OcLDdieT8eqhVMwFpOihIFSqMdNfCxdoExpuNYWW8HeYOh9DV
149jB1yQWt5B5TxBhuQ6Nq3agp12trBxOYkeqRoNWeH49tt/Yc/xo9jw5UrcDS1ATUYAvv7iG7jS
vqxdvQkBaeVoLI+lfO3ELjtr3PKLfO2p9dfyQiZJMtyEg7vMYbzJHNu3mcHC4QBqesah7C7DTseD
aBtWYUI5As9DO7HexAxHXR2x5lsL1Pd045jdVlhZu8Bm6xocvx2A2owIONidgYoCSFNeFPYfPYs+
2ldH84MoLE7CP37zO+zYfRAHDxxAdHomzrhYwtxyN+y2rcfei/f5Mwl7jFfB8dglZEX7Y/cuD2gm
FfA54oyt1BK2sDSD29Wn0EzJ4Wpui6j8Rl4nL7ruQmB6FR2j7xuAqSk1vPc748Yz9jyLhr9Op5V2
Y5+zMzKre3hZRz+8SmVthJ07bbBzvzt6pRpUJfvDevcZmj+F2677cSsgB8Uxj+By4Do06nFcOuQA
KxvKu+MehCQV8S9QTpfrtGYbAP78TlsxrCx3ommYHM4UdzQ44miF+JIW+F86gBVrtpGZHYCfx16s
2mSN/MwY7DlwAv1yOn87i2Fr5EiGTIpTO7djq6kFmQZTmDocI4MwgerUQKz49mu4uNF5+8W3uB2U
B81YG8xXfYnD52+iu6kMey22Yde+/XDadxw1LZ14fJM9i+CCXfa7UVjbxR/MFAZg/iEMwALjQxoA
Nqya0EI2MoDS4mJUVjdDodLwL/Sxp7XrK0pRUlaD4TEpxkeG0N3Vg1HaxtjoMHq6uzHC3idWK9FU
XY7i0ioMjtJyo7RcTy9/epx1Bfa0NaCqtoG2OYTB4REM9Pagb2CI53WhGAD2++s9XZ0YGKaLL9t/
msaedO7s7IBMqcFgdwuKKyoxMDKMAQq+7HVB6Ug/SkqK0U0XwUHaz9HRESoXKj92MZfIZsq3vJbK
UYYxWr68tAQ19c3QTGjQ39OGYjomHT39PPizY8W2OzvosmkyMmEauthW07rFJdUYk6kgl43z4zNE
+WXlzN757mqsoWNUDgn7HQaZ5NWxKaupxeDQICQKNdICb+Og2w10drSgsbWL1tNgdLgfFWUlqK5r
IiOkeu2Vte/lRc4CvBy1tHxxaTWkygndmwOs7nSz7wbQshIpHfMJyl8v2uvSsHHddjSOTkA5Noiy
0jL0U14GqMxG6H83LcPyPzI8iJ5eqlNUhr09fbRuB2pr6yhfpbyM2nsGIR8fpvVL0U/rDgz08zIe
6+9CZVUVT49tj03TUlnWUf7KaX/U1IKXSsbo2HbzusmDLJmRwSE2PLOP02Wvm9+Dfn395dPGdN8L
GBqhZfRl3dlQTftfAalKzZ/dGB4c4OcEW6efrz+sn9ZH55qcv4ZaVUJ5qm7kz04Yei2Qb1ufFzY8
PNiPTkqTveHBX3ek/wP93ejuH4JKOorqijL0Do5AJWHD5eihdXt7aX06L9n52037PErrDQwMUp7a
UVJcglGpkudXQfnubqlHGZUxqxv9/VQ/ZAoMdbWhoqoGcrpGSIZ6aZ1i1Ld00fVHhu7OZn4segeH
odK/LSIMwPyDHRcmYQAWCB/SAExLwj7Jq6STXyGnNPTTKS25Qknb1U+jcZlM//sAbwzLKW8sf/y+
JZ8304Upk+vyLZXKePCU0H8p5ZXNWygGQHfLZCbfXLPKQCqT8/1nxkmqv0fOylRJ5aebxspjVpnp
13+9fCko07iCyoqvTxd09hT27LJkmh10pzWuX1eppGOgf4KcbevVsWTj/EeK2DHSzZ+exrYnpWVZ
t3/y82vYtd+L77di+rcg3sjXbBnOy/R+zd6Wbt/Zu/zS0U54u5/AJe/LsDQywmHvl1CT0WD1g12U
eHnxuix5te98+FUZSnnZsPrKyoeJvTrH0n61Pl+WypC2yfI9Tum9Kkd9/vh0njddWb0ydvp6ypcl
zTYAfD4ty7Y3Pc70Y2U9e/ssfV1+X9+/V+efPo03NdsA8Gm8fGbVJxLPO8ubPj12PrLtsHJh14dX
ZTCrLurKi8pJX47Tac2uG9PTWT2frgfsfGBlL9enOT0+XfZMwgDMP4QBWGD8EgbgY2khGYA38/6x
ZCjovg+xC3gntfpKy+v4Rd/QMm/q3fPCAo8EJZnJ8PN7hIiEXCjUWh6oDC//8fWmAfhY+p4BWAAS
BmD+IQzAAkMYgI8Ly+dSMADsx1zYTxmzn6ed/UM4P6SfmhelWsMDg5b9SNE8Dv5MwgD8dDEDIJhf
CAOwwHhfBoAFWjafBV32HX72fz5ovrcQpi+8hvL+McTuNxua/jE0n/LyoTRf9pEF04VW3uy8YecP
uzYJ/TJi5c1uw7ztuioMwALjfRkA9qt9bD4zAvNFC6V70FDeP5ZYmRma/jE0n/LyoSTK+6eL5Ze9
Kin0y4m9QcKMFyt/QwgDsMB4nwaAPfgjEAgEgsUJewuF9b4IA7BIEAZAIBAIBHNBGIBFhjAAAoFA
IJgLwgAsMoQBEAgEAsFcEAZgkSEMgEAgEAjmgjAAiwxhAAQCgUAwF4QBWGTMKwPAPzqiY0qrZR98
e8UUq3Czxt+ViZEBjNe16ccWE5PQqtRUNrMLa0pXXoxJLSYk41CPzxybqQn2w7wz8GVJWhX7Np5A
IBAYRhiARcZ8MQDK7nZ0hD5Df0E1NDIFmjwvY6COfd2eoUCd11mMdP/09MczI1DkrPsd+kXDlBwt
d+5jqKQQNadv6D+TC2hai1DpfZMPd9w6hYwNW5Brvh0Vlx7zz/pW7zZCkecjPp/R/ewWmqMLMJwa
gI6UEv1UgUAgeB1hABYZ88UASMszkGe3DZXXX0ItlaPa5RB6yrr1c+Uoc92NwVYpH1P3tkPS3MYa
rRzNUBeNd+pGMAWtXAnN6BAUfTM/FSrJiUHpIR/9GFmK9qZZ6+hQdbVA3jeESZWCWsPsi/nUMFaM
Yry6FhqFbmOTVE6TGi1U3R1QDunyMxutXEEt7AnIW1ugkevSYGiGejBW2/gqzxMyFbSycUjbdHmY
GO6FrHPa8OiQN9dDMajbxqRKDrXk9fIdywpH3ZMoTMnaULTjONT66er6DBQec+fDDaf2oy21GpPK
cZQ77UB3cQ3qj9khYfkG9JSyb7oDbdfdUfkomVYcQsWpC1QXDJ/cAoFgaSMMwCJjvhgAeWMZBvLz
0J9RQCF8CjX7jqK3omd6Lirc9mFsUIvRrAgU2tkif/d+jPUrMZYdh0J7e5q2E/XPYmlZtu4+5Ds5
ov5pmG51ghsA11s0pEX79fPIsbRC3nZjVN54wu8s9Ic+RNbmrSg9eQJZxlsw0DQKZU0uCszMkGdh
iRwrO4wNSCHNjkKO6U7Kz0GkrTbGQM20SdHR43sdubbOKHO2Q8Y2B0jH1NAOtaDmzDEUOTqgzPMu
JmmDNXv3oOT4KeRuM0bV9Xuov3ASGWvWojWxmFLRou32FRQ62KPAzgkDVd2QFYaj2H3GwLD9bLzi
if66UWC8AcUO7jMGoCELxac8+HDjuSPordIZobrTzujILETjJU90xUaiaO8xaCkvnfc8UfUoni/T
7O2B7hKdMRAIBILZCAOwyJifDwFOosrlCPqq+vTjSlSe3I/x4Sm0+xxG8ZmbUMtZh7eUAvRqagXH
YjA9DGkbjaCQKlBubYHOglbdqnqYASg/9Zha1VnIcziACRb1yVgUOzigJyMbxU52GB9l98bVKLTY
hN7yZtQec0B7RiNbEH0B11DmHYDxzFDk2p3kpqHH9xLKLgfy+dN0XHVHyRld93r98QNoDC+hs2YM
A6mxqPc4jIQVGyCTylBpa43ucmrxj9YiddV6yFSALCcERYduQ9lZgPT1m9CXmYe2a0eRvfcspjQK
qEbGeLo6FKi5eAbjI2QFBqtpP87M3AJoziUDcI4PN3u4IMvMDqXOjig8cQ0TdCJWHd6HcUqq6547
6vyT0fPiFqoexvHle0N90RKZz4cFAoFgNsIALDLmpwEAqvZS8M2dfmiPArWTLUYHWJf6BAWpxyg5
4IaBomIUbF+D0tPnUXv+PGpuPIRaOUbm4ThGehS6VfUwA1Bx5ilG80NRcvaGfioFafdTaH7yHCWu
R/RTgOojdujOK0XFPgeM6WOuojyRtvMAw2mRqLqkC/rDkc9Red6fD0/Tce0ymgJy+XDn9SsUTEsw
EH4XRccuYjg/C7k2dhjr7UPNPjeM9lHIlrag+MRx2ivaRmkSKtwfQ1KdiLRVayjAX0KNxzk0B+ta
568jR90VD0hY/sabkGfpQDZJh6oiHgWHT/PhpnMHUHH5HvrSc/n9f7IHqDzggqEOKh/tMCqPHEDx
YVfU+6fwub3BD9AUms2HBQKBYDbCACwy5qsBGEl8iozNlmh98hjVx/agyP0mD2AD8eHoDA5ByU4r
tEZlo+2OJ8ov30VXRBR6sypoCRVKLZww1PZ6XsfTw1Dk4oNJeR+KzE1Rff0emm9eQMGBU1BRlK/Y
Z4nSc9fREeiH1JXfYKBpGL1PvJCzYz9aHj9GEW2vq6QJo7FkFo778jQHXtxFqbsfH56m7fxp1Pom
8eFWD3c0hxWg6+EFFB67hJ7w50jZuBVjff2o3OmsC8Jj9cjbs5u33mV5kShyvgatrBslLrvR/DyY
9isCY51jUFSno+buC56ujkk0eZ1Hf80ADWvRcHofpXMCrZTXfCtTNEUV8qVqj+5BZ/7stx+UKN21
E/1NI3xMUZWEiP/+f6H6STofb715Dh15ul4PgUAgmI0wAIuM+WoAGCNZMag5dxqNT0Kg1de38eI0
VLu7oy0qnXfDU7RE270bqPK8iIEKXbf/YEoWlJLpO+I61D2tGMgs48MTA61o9PJA7Q1fKMf1Hefq
UTTf8EZXSiYqD+1DbzULrEBf+FNUnvVAb241H1c212KwoFY33FSDoaJ6PjyNpLQIo7VduuHiIow1
UTqTUjIbXmgPjUd/fgFUVE7D6dlQSqndrx5DX1YWNzcTfW0YyCjl66o7alB3nvJ40xcKiYrGq9CV
+HrLfCTpJarvB+tGtEp0Pr+LqjMe6EqfeZJ/ND8Lkm5dsNehxVBmOhTjM6/89UUEYai6E1OSXlSc
PAOF7PXXBAUCgYAhDMAiYz4bgF+OCYwWFkPe04vhxOfI2LYD8vGZJ/jnLZoxNFy/hrGu2c8G/HT6
wnzRGpunHxMIBILXEQZgkSEMAGMK/WFPUWBpiUIXVww36VrwCwLtBLSq6cf/fh4TVAcEAoHgbQgD
sMgQBkAgEAgEc0EYgEWGMAACgUAgmAvCACwyhAEQCAQCwVwQBmCRIQyAQCAQCOaCMACLDGEABAKB
QDAXhAFYZAgDIBAIBIK5IAzAIuNjG4Dunj60tHagvaNLSOgXV1t7J9fUFJ0EPwN2wcvPz0dpaSnK
ysqEhOa9iouLUVHBfj117ggDsMj42AaguaUNKrUGWq1WSOgX1wSJ1UGN5uf9lkJ/fz+/qLLzgKUl
JDTfxepqXl7eW4O5IYQBWGR8bAPAWl/ad6iAAsH7hvUEsAviz4FdFGtrdT8RLRAsFEpKSoQBWMoI
AyBY6ggDIFiqCAOwxBEGQLDUEQZAsFQRBmCJIwyAYKkjDIBgqSIMwBJHGADBUkcYAMFihD3k2tjY
qB/T0dbWxoPzNMIALHGEARAsdYQBECxGWJCOiIhAeHg4Hy8qKsLDhw+hUqn4OEMYgCWOMACCpY4w
AILFTFRUFK5fv47Hjx9DqVTqp+oQBmCJIwyAYKkjDIBgsZObm/u94M8QBmCJIwyAYKkjDIBgqSIM
wBJHGADBUkcYAMFSRRiAJY4wAIKljjAAgqWKMABLnPlgAASCj0lHZ/d7MQD19fX6MYFgYcA+XiUM
wBLmYxuApuZW3gLr7u4VEvrF1dnVg9r6Rv7O9M+BXRTZg1bs/+DgoJDQvBf7gFVmZqYwAEuZj20A
NFShpFIZrSsXEvrFJaU6q1Kp9bXxp8MujOwWQE1NDf8vJDTfVVVVxX8Y6F0QBmCR8bENgEAgEAgW
BsIALDKEARAIBALBXBAGYJEhDIBAIBAI5oIwAIsMYQAEAoFAMBeEAVhkCAMgEAgEgrkgDMAiQxgA
gUAgEMwFYQAWGcIACAQCgWAuCAOwyBAGQCAQCARzQRiARYYwAAKBQCCYC8IALDKEARAIBALBXBAG
YJEhDIBAIBAI5oIwAIuMeWUAJmQozS2DQv9dFq1iFEVlZfg532nLDQlAcHihfmzhU19Wip4RuX7s
JzKpQFZBIaT6gpUOtqGovEo3QtRWVKKyrByZ6cX6KT9MiO8FJBU16sd+PhrlCIKePcDdx4GQzPpG
T3zII9x7FAqVfhyTMgQ+votnwSn6CVSFJD3wvXsHEcmlfLyiJA8D0zsqEAh+FsIALDLmkwGYGmuA
+deWaFPoxmVt+TCy3IERyt9P5cWpIzhxLkQ/trAZbs3HgYOnMKj8GQXCmJLDymgdwou7+GjizcP4
7//ra11g1Y7CYusWRKQXISO1iM//Mc46rMTN0Fz92M9lCvF+N7DL+TD27zSBheNFsEvNS6/j2Gy5
C46m67DrxE2+5JUDO2HpchAmq5bBwzeGDIESByy2wPnQMXz3xVd4kVGDkvjHOHMzkFIVCAQ/F2EA
FhnzygCMN8F+7S50KHXj8o4iWO5yAktV3teEC6fccP7WEx4QJkY7cenMcXh4+UFJrcQpxRAyolLg
++A6kgpq+fqMkPOnce5yJB/uKM/C8eO0zuX7kGh0IWG0vRLuNO1RUCgS4qN1LU6NHL43LvBl00ta
+HK1OXlIT07DlVMn4B/1ZrCbQlFSJtKS4nGa1kkubOJTZSOd8LlyFqfPXELzEIVXzRgyYtIQ4u8L
T29fKORS+F45De8HQZjgawDNxUl8u/5ROfopMzzxOoXgvGYqp15kxGch6sUjWvYk6vtZj4AGObFp
eOp3B5EZ5dBI+nDe/TguXn8KlYEv3b7wOoxDV4P48NVjTvj0m/Uo7VFD2ZIKE5sDGJeMIj+rguZS
unHpSIwOwXG306jpGOXrsN6ae1fcceb6Pey334AnCboWd0bEU57/By8S+HhaciIGWPZkvQgN1k3r
qitDaU0nWspS4OZ2HAGJeXy6jikql+k2fj+MV9igb6QHtmZG6OLXnCFs2LwdGbkpsLF14EuhpwCr
TPcgOyUQO/ed5JPaM59ilfURGpqCK5mEjjEVYiICUNY2zOcLBIJ3RxiARcb8MwCO6NRf/7kBcHLG
1KQWey1X44T3YzwODMP4YBv22ZjC++FzXDuxG8e9nlA8asey//gDjnvfQkldhy4BghkAr9tp6GtI
x6ovV+GGry9O7aGW5eELGKUAbbJ6JTx87uGm50H879/8F/poX884mMFmvwd8fa9jxbffoLB7HM8P
2eCfy83w+P4t/O1vXyGptl+/BR37v/0SG22P4ME1T/zli41ok6jRU58Lv0f3sd96C0xczmNC0YXl
//FbXHrwEM5m6/HNOgs8eXQPm776J3xja9Bfn44tRqYICAuDvdkWvExhAVjP5BiO7T/Ie0fkDRn4
9P/7G676PYb3aRd8Y+KEcfk4tv3pL9h9xgvZuZlwsrXCzccvccnVHm5kkt6kuygC1o6noCAzceyU
Jx7cvIibYQUoCbsFN58QjDdkwmz9UVpShQ2//R2cPW/h6vFd+Mp4P7STE7i4zwrb95zEo8cP8M8/
/i9EFLUh/aUXVq22pHLzhdmGf+FGeDq8jzgiILcTI2Uh+O//92/Rp5zEM6+T8Ll7B0ab1sE/OARB
idmYNNBEj75/Bke8/SHtLIX99oP6rn8t3Hfsh5fnJRw/fI1PwUQv9psegNfpM7hwWWdqWN2xWufC
hx9fOYX4/Brc8T6HxIoePk0gELw7wgAsMuaXAWiE7eqd6NPXLW1/BSwdHKCZmsKTaydgv3sfihoH
MNqQiD/+/jdwPeKKvXYm+Mx0N8b6m2C9Zif0nQevCDl/BrceZSHkziFceZmun6qAE7UYH/texcFT
3vppw7Az34L8gizY2tjqpwGR107j/MN4BHqewG3/Aj7tzsH9uPUinw/rmMRxYysklOlal8dMbJBR
L0F9YQyOHD2CHRZb8cfNuzDU2wiHjbv5Mr1Fgdi06xgfTvK5gKt30xH/5DD+8vUauLq6Yst3n8LJ
6zmfz1F04/CJI9T+pZxWJMHWxE03nTi42RaZJWXYu8kavTQur4vC73/3exyh8tmzwwhfWuyFUjaC
l8+e4MmTp2jplVDDfgQujs549vQ+zt8JwxAF/MNu53HR/SgiS/shrU2Fg9lZSk0C+zU70MF7EUaw
c4MTGttrqUW+HVI2ifA+aEKt+GyccjJBbqfufru8KR3WO86iMD0Al249QWzYMxzYfwjBUTE4f+Yc
WrpacHKvJdw8r1MLX3/PZxqtHI9vnseJsz6QUl2QkDGyNXal0M+YgPveI7jl5Y1jB2/wKVB34+Ce
47hx1gMXroTxSfL2QthaufLh6IfeuB/yvm5RCARLF2EAFhnz6yHAMexY9w1eZLTy0ezga9i04xA0
FGBZA7G1KhMbv92CsLBgrFmxEiEJqcjKzKDgVwdZVyls1+3FGF9zhqBzp3D9QQZSXpyD9YGrfJqk
PRsWFi5IivbDJstdfNpoYwa++mYZ6hqqYLJ2LSr71Xy6525zPE0uw0v3E7jzXNdVfct5H+76z+62
noSbsS3ii/r4mJuxPfKqmuG4YSWe5rZhrDYWn5k4oKezDrs2uID1iDdmPIe92wW+fPilM7h2Pw0Z
QRfwHbXm0zMzkZaSguq2Wb0MmiGcOHIEvRPAOAXnjctMMMbOQUkd1q8xRn1HK/Zt3IUOmj9UFYcv
v1qJiMQ0ZGemI6ukFlNTk5BJpZCSJrS6k/fJlcP445+/RlR+O41JsXvrCny+xQHDFGkHSuKwc5s7
TR+D4xp7NLNMqzrgsNYJ7b1tMN24GiWDtOCUEiar/oagzDJccDbB9SDdA5c5AVdgu+8aNMpBOFlt
wUHPB2ioL6OW/GZ43PSn9dgRVSP5hTdWrbbV7QtnCoH3PHH5WbR+nKbIOrB1zQrkdamh7imEsaUL
mhpKsGHdJgxQFtqzXtKxvYTa4his3WrH60rKI0/sOnWbr+/nfQKPYosxNNgPiVI8ECgQ/FSEAVhk
zCsDQJQmBuHrL7/Eli1bsGy1EdKqKahOqXDxoC3MLaxgaX8EPQPDeHb9JDZt2g5rWzvEFLVicqQW
u7cd+Z4BiLhyHl63kzGpHMbebRuxltJdtWY1XiaU0Fw13PaY4tv1FKAOOGHlqvUYpnqd9MQHX3+9
nPKwHnYHPXnAfubmhoeBuuD24MhR+IXMfkBuEud27EFSic4AnLF2QXHzCF5cP47lG4xwcJcd1rmc
xEB3I/abHuHpNecEwvmMF18+5voleN1Kgkbah93WJjC3tobtXjc09023sRlTuHHKFUk1o5jsKsb6
vy3Djj32+PbLL3CFB0sJDhi7oJmtMqnETY9D2GxkBuud9mRMmnkKb9KY5of/9fuv0anvNrm8ewvW
2nvw4d6SRLjYXKQhlu5etHID0AkXo70YpvoS98wLn37+DXbvO4jVKz9HRGEbButyseFfumO3eosF
iltGeFrHrdZh/3Vdy9x69We4G18P9XA9bIw2w8rUDMcuPMTMc42T2LP9c6zeZIKtRkbYYumIFqpW
uREP8a9l32Dt2lV4GqXrfQnwOYWvv12D1Wu3ILGYmZhJeB2hMlm7AWs370BZO6uvkzjruhcNfcM4
6rIDATk6cykQCN4dYQAWGfPNADDYfena2lqMyXWdvoyxQd206VcEGe0NdahtbNF1DU9OYHxUwlt/
s1FRnmSy6RsDE6ijNDoGJfpxHSNDgxhoyMDWjVYY0D+NN9TTTNubebVNTvuv0LceFRLpq+FpZGPj
UGt0J4WUDevz2UR5HJWpIFcqoNVOQDKmy6NWo8S4VFdeKrkM0uk8apU8j629rLP/deqyQuB6/i66
a3Kx1+ocenvb0dDCOv0ZWkhGx6Fv3HNa66l8mtooBL6FqQmMzjqmGgWVlVyXD61GTXll+ZuidCXQ
skxP6bYxoS/knpYGdPaRIZlQQq7Q9ZhoyWix4zSuG+Wo5Qqo9E8isocLp8umq6URtfXfD8ijQ71o
ZHmndGobmqDQb3CgoxFtPa8/xNfRWI++0ddvITTU1WFcpVunKvUF9rtd5WUwNkYXJs2sCiQQCN4J
YQAWGfPRAPxSTMgGcM31KE6ePIkNy/+Bk7cC9HPmK5NIjo9DTnwIbDbr7m8LfogppMQGo6ZT/+aC
QCD4WQgDsMhYygaABYjqnFT4+fkhMa9SP23+o5UNo7Ks4Xu9HQKBQPAhEQZgkbG0DYBAIBAI5oow
AIsMYQAEAoFAMBeEAVhkCAMgEAgEgrkgDMAiQxgAgUAgEMwFYQAWGcIACAQCgWAuCAOwyPjYBkCj
0UAqZe/qy4WEfnGxuqdSTX986Ochp3OIpScktBAkkUj5dftdEAZgkfGxDUBTcytaWtvR3tElJPTL
q70TtXWN0Gp/3g8EyeUK1NY2oLu7F909fUJC815dXT2ob2jGFP9Z7rkhDMAi42MbgDa6AMtkUv47
9UJCv7SUSgWvg+zC9nMYH5egr29APyYQLAyYCZ409CnOtyAMwCJjPhiAsbExIaGPIvZxpNa2jp9t
AFh3ag+1qgSChQS7/goDsIQRBkBoKUsYAMFSRhiAJY4wAEJLWcIACJYywgAscYQBEFrKEgZAsJQR
BmCJIwyA0FKWMACCpYwwAEscYQCElrKEARAsZYQBWOIIAyC0lCUMgGApIwzAEkcYAKGlLGEABEsZ
YQCWOMIACC1lCQMgWMoIA7DEEQZAaClLGADBUkYYgCWOMABCS1nCAAiWMsIALHE+tgFoamnDyMjI
q4ojJPRLitXpxqaWn20A2LcA2tu7eDpCQgtF7GNswgAsYT62Aejp7eMtsI7ObiGhX1ysBcQ+iPIu
X0QzBPusdUuL7quWHUJCC0BtbZ3o7OrR1+C5IQzAIuNjGwCBQCAQLAyEAVhkCAMgEAgEgrkgDMAi
QxgAgUAgEMwFYQAWGcIACAQCgWAuCAOwyBAGQCAQCARzQRiARYYwAAKBQCCYC8IALDKEARAIBALB
XBAGYJEhDIBAIBAI5oIwAIsMYQAEAoFAMBeEAVhkCAMgEAgEgrkgDMAiQxgAgUAgEMwFYQAWGcIA
CAQCgWAuCAOwyBAGQCAQCARzQRiARcZ8MQCykW7ERkciKCgI5a2676onP3+J3LJOPvxzGO/vQUtL
r34MGO5rR1vPoH7sJzClQlFWIUYUWv2Et9PRUIaIsFC+X9nljfqpr6McasHTO6GYpL/g20/RNqzS
z5kbGukQ8rNLodGP/xSmFIOICglCUHA0RhX6ie8J+VA3CvKqQNXsnehrrkNZZat+7Kcx2FiGZw+j
9WM6xvq60aqvY4yhXqoPvW+rDxqUZBdiSPbzPhcsECwGhAFYZMwXA5Dh74k/f7Ice/fuxZeffofM
hm7cctqNuwFF+iV+OpkPr8PF5Y5+DAi7dxKuPv76sZ/AlAyRL8LRPfbjIdd95xqs3mrN9+tBWLp+
6uuMNWVh+7fO0GICTiu2I69Vqp8zR6S9CHkZB6V+9F3pqsrElrVfY9eevdjrYIMvl21FUfOQfu7P
Z7SjDmHBKfqxH2ZytBl3/J7w4eaibCSklPHhn0pDSgDMNh3Vj+lIe+CN/fvv6ceAkDtuOHLjpX7s
TRSIfhmGbgnQXZ2KZzFp+ukCwdJDGIBFxnwxAPG+nrh4J5IPF768gKPeN/HoxFk8jazEpEaO8BcP
ce26D+q6x/gymFTgpd9teHndRo+UtS3VeOHrjWt3XkL+RlMz+8lNHDx4Xz8GRD48g+O3AvhwY3Ey
peGFtNIGPt5RlaUbL9S11nsbG5CXlokn/k8xJJ+u9BOoK6mCgkbbKqpQVlyC+95XkZyvS2M2Z53t
UPzGJ7d76or4Nh4+j+HjivYC2G05wg3A4c12KOrUNcGzYoP4ckl59Xw8Jy8PrG9AOdyFjIxSPq2z
oQbVtQ1orGqmFvYUavLLUJKfhWte3qhuG+bLMBKDHsLnwVPkF2TRiditn0pMSGC/bT0exFToJwDp
zy5h+55zUCllKM8uQUjwMxTU92BipB3elJ+olHQUFuTyHofexhJcveoNv5BEvu5QaxNKCysQ7HcX
T4NT+TSNZBj1Ne0YH+rAbVr/ms9N3L53Hx0jSox0VOMarf8wKIEv6391P373t3/iXmg8+np60Fiv
6wFSDrTihjete+sZpLzjRYPy3DIUZqfC6+oNtA7I+XKSPjIQPldx41EAhW4qn5wIOFic5fOmyfTz
gavrQ/0YEH7fHSfvhVKdkqM0pwzZKdG4eu0BBmW6itRYUY+B/m642qzGP1ZuRmRGAXKy02bqokCw
RBAGYJExXwxAkt95HPV8RNuSwGOfFW5TAPA7fhL+cfWQ9lXj7s1rOOmyA+vM90KpUuCErTHMHY/g
wtnzqG1rxxW3fTjo4QWvk/T/rA8mZpmA7Ce3cPiQr36MGYCzOP0oFrLOQqxeswb3HtyFf1IhGoqS
YWxsjgePHsLCZBsKKYBm3j2PT/6yDN4PfckATCc6CvtvTFFPAeLBbnN8sdIM3p6n8V9/X4H8jteD
gsduExw6ewMvXrxAfecg2soSsOqLVfC8eBF2Rstx4OpTqAfrYG80bQDsUT82gfCb7li91goXablV
y79EVEE53BysUdCjQU3kFfz7b77mAdj7xH74BwfBYf1eWhtw/OJTGDseh8dRJ3yy2gbKySmE+JzA
txsscMXHB5///v/BWd+ZLnE5lYG1tR0Plq9QdcLK3BlNrXVY9/u/YO/5i8jKToHlpvU4eu4i3A/a
4A9/+hQjFIhzY5/C+/J5rP3XF/DPrEV1yG388Tefw/u6F774yz/wML0R8ro0WvcoRgbbcfOKF07u
t8Z/fboKPfIJFCcFwPvKBWxY9hUeRuUi2vc0/vLZV7gbHIuE+9dw4KAfFGONMFn+HY6euYijTqbY
tscNKq0aJn/+M2yOeOCksyW+NjkAJeWnKjsCPj5XYLZ2GU77RmKoIh27LN80ADdw9Mgj/RgZgAen
cfohmbHJPiz7j9/i0AVv7DVbjy0uXjR3Ci6rrZBV1YnTezbjyzVbEZaWi0sebogobNclIBAsEYQB
WGTMFwOQG+yFX//2z1i7di1sj3pBRfXrtss+bgDGeipw+fwZOFqZ4ddfb0FmWiR22u3Vr0nX7f4S
fPKnX+HIWQ+cpcD3u3+twcCs2/MZD6/h8KwWX8IzT7jdC6dWZT1szLfgxuNgsDJ4cs4C/1y9DR6e
ntjwzZ9xNjQHeX7eOHRS1yU9wxj2bbRDo2wS9/ftxu2AQj71iqMjHoS/3mXt4bQJ601ssG/fPmSU
t+LBmV24EaZbHtpOmG1yQHVNMXYbH+MGwHWrE6pa2rDbYjNq9cVdG/8IzkfuIiH4Bu4HxCL8+S3s
ctqP+NRUnDrpia6OWjhuOUSGYBIH129HVrPuGYLdm2xQ0dIBF6stqBrlk/Dk7A6cux+uGyEU3SWw
sLLFa0dO0QZz891oaq6C1eod/N59ZdR1OLpd189vgulmKmP1JOJDfXHK7TDWfP13uPjGoCr0IZz3
3+aLZTz0whGPECg6C2BH+zdtn25fPouChgEamkJ82CO4n3DFuuWfYIdXMDBSDSe3M3y5nMc3cOZ8
OLIjr+LAhZnjt9vIArnVtdi3yQq1EjZFCqtV1uik3S5KC8Fpdzds27Acqw9cQV95Jhwtz/H1pkl7
cBVHj/npx4C4J+dwkpWJuhMW31qDF7usgUzEbqgpj8e27EQZZbcy6QHc74fwdQSCpYgwAIuM+WIA
Eh95wvXsfUilM2l479qL8LQaXNmzHSceJEI1UoPl1EJPTomEMQWB6VarrL0AKz7/BHdfhiI2Lg5R
KTm8dTxNfdozrN5gw1vIjFOOxrjsn0qVmEa0EjzzPg77vZfw2NsVG633IyYmBtGRkajrG0OCz2UK
QqG6FV8xBpf1tmiQafFg3wE8CtV1x1/f5Qw//fA0Z/bYIL2eRynObTcbHL5KgY6Qt2XCdLsL2por
4LDFlRuAQ5vJEHR0wcl4DRL0UTvhvjsOnPWHrL8KNhbbcOFuMEoLU7Bjuwluvkyk+NcC2w37KVhN
4simnchtYmWo5GlVtLTDYdu3SGvRPSHgZvcdzjzQ3WrhTCrgvH0Nzvsl6ycAAdeOwtbtNjTjLbDb
uJ+XZUHQRRg7nuDzxxpSsXL9epQXZeG7b9ajbUgG/6v74HA7BBXBfjhy9DFfLvXeVbifC4WsMx87
tx7n08IfX8bzuBI+LGnKwrIvVqGpX4KQm64w83wGdUceNtrt5/Nz/Hz4+kWJt2HmpG/FT/TBapMp
qttacWiLE+p4EfVhz4Y9dIGph9Gy5WSA+lEa6YM1+8+jqyQNDuY6QzFNXcoTrNlkR+Wtw81+C66F
5FORtWDnWmeM0LTJ/grYrdsLFRmAI5ttUdoLZAdfhr2nzojIZFKoJgxfBAWCxYowAIuM+WMAzsPd
6/UH867v3o/Q1AbEPb2Ir9cZw41a259tsUC3SgNf9/1YvmoDLKwd0NDVj5d3PLBlmyX2ODvDP6FY
n4KeKTnO7LbCdxuMYL7NCOt3umKY4uFgXRZszcxhb20Jtyv+6Omoh7nxZuzZswcubhcxqKZ83biI
0566gD3DdA+AFr4HDuJhiC6gXXN0weM3egDOOdsgqmCmq3ikoxwmK77BdnNzrF61Cv6JZZgcrJr1
DIA9akcnURL9FF9/9jW1xM2x1sgKVT2s7CdhsuzvOB9UwFLCir/9ASFF1DQdr4PdpoPcAByl1mpO
I3uIUIGDm+1QM6hFWvAN/P2zZdi1zxVrqKXt7T8T7Bkj7cUwX78MxtvNaf+Nsd56HzrGJqAdqMDO
jftob5lP6obNtlXYQuW139kW324wQX9vByy3rIK1/W6Yb12Hg0/jURnCDICudZ1CBuA0teBlnQVw
sbmIxop4/Nu//QrbrW1gYWGJvPw87DLfDCs7J1huWw+7a4FUkQax/tO/wvasD5KePoCb2zNMTYxi
v8kmbCDzt3nTKly8H0apy+G8gcqKReupXuze4ITO0WEcczDBdis77LEyhvHpW+gpTf9eDwCrD6cc
LbBKXx822B3FMLlJ7VA1Bf09YE9OaPvKYU/mhxmAY0Z2KOygC19NBv7rd3/FpSehOH7IEf6ZTbr0
BIIlgjAAi4z5YgDk48MYGnk9/dH+fozLdG350sI8NHX0Y2h0BGp93asuyUVuUfmrln1tUR6ys/Mx
xm4GG6CiKAfZOYWvlsekGuUFOcgpqHzVPa0c6aU0slHR1MHHZSOUr+E3n8qfxEB3HzSUjzE6Gcak
ui73EZZf/fA0w/19kCln90dQ/FEN823UdrBucJYNBfq62WtoUzxdBUuYGOis5csNKaZzx7YxAJlC
twfdPZ1QskW1Klp/gO/D4Kv1p9PSrTve14G2rj5c3meDO6H6WxCzmVKigLaVnTdjYCY1Sp7u7NJs
qK/jzzFsp6DI+hSkQ13Izi/ByLgEwxIZVJJxDA7qjqN8bISX3eSEEoP9oxihZcvLypCbQ9uhbY1R
5lXj/cjJLcIwrT84qltvvLcN+eW1kFB9GxycfqZCjQJar7C6RT8+gX7aPzXP3AT6aN/YXk8qRyn9
PAxQXRocG4dGKSejMvMw5Gx09aHo1f5NTVA5dvXrxtnwrDKV6ytdR30lqpvb0dffi1E5OUSBYAkh
DMAiY74YAMGHIzfkBS5e9oHnyb346rv1aBp698ClHunCjVPn4OPjA6OV/8AxH91bFAKBYOkgDMAi
QxiAxc9IRx1ueV2B140H6B5/1f/xbkxNICP8Ja5cuYKQpHz9RIFAsJQQBmCRIQyAQCAQCOaCMACL
DGEABAKBQDAXhAFYZAgDIBAIBIK5IAzAIuNjGwBWWdra2tDR0SEkJCQk9AuJXXeHht7tmx/CACwy
PrYByMnJQX19PVpaWoSEhISEfiE1NTUhIyPjrcHcEMIALDI+tgEoK/t5X3sTCAQCwU+DXX+FAVjC
fGwDUFpayiuVQCAQCH5ZSkpKhAFYyggDIBAIBEsTYQCWOMIACAQCwdJEGIAljjAAAoFAsPiYmpri
epPZwVsYgCWOMAACgUCw+NBqtQgKCkJraysfl0ql8Pf35/+nEQZgiSMMgEAgECxOenp6cOvWLR7o
fX19+fV2NsIALHGEARAIBILFy8jICP+IV3V1tX7KDMIALHGEARAIBIKliTAASxxhAAQCgWBpIgzA
EkcYAIFAIFiaCAOwxBEGQCAQCJYmwgAscT62ASguLjb4rqpAIBAIPixFRUXCACxlPrYBYA60oKCA
9wQICQkJCf0yYsE/Pz//nRpgwgAsMj62AWCwdYWEhISEflm9K8IALDLmgwEQCAQCwfxHGIBFhjAA
AoFAIJgLwgAsMoQBEAgEAsFcEAZgkSEMgEAgEAjmgjAAiwxhAAQCgUAwF4QBWGQIAyAQCASCuSAM
wCJDGACBQCAQzAVhABYZwgAIBAKBYC4IA7DIEAZAIBAIBHNBGIBFhjAAAoFAIJgLwgAsMoQBEAgE
AsFcEAZgkSEMgEAgEAjmgjAAiwxhAAQCgUAwF4QBWGQIAyAQCASCuSAMwCJDGACBQCAQzAVhABYZ
wgAIBAKBYC4IA7DIEAZAIBAIBHNBGIBFhjAAAoFAIJgLwgAsMoQBEAgEAsFcEAZgkSEMgEAgEAjm
gjAAi4yPYQBY5dFqtUJCQkJCH1HvijAAi4yPYQBY5WCVZGxsTEhISEjoI4hdz6em6OL/DggDsMgQ
BkBISEho6UkYAIEwAEJCQkJLUMIACIQBEBISElqCEgZAIAyAkJCQ0BKUMAACYQCEhISElqCEARAI
AyAkJCS0BCUMgEAYACEhIaElKGEABPPOAExXnrnA8iWMhJCQkNC7SxgAwbwzAEqlEiUlJbh48SIu
X778Vl25cgW1tbU8LbaeVCql/M2kw8f1w/NZo2PjUGs1kEnGadjwMotR/CKh0kCt/Pi9QewYaOgY
SCVs2PAyQkKLTcIACOadAWBcv34dLi4uiIyMfKtsbW3h7+/PKzAL9AP9/RgeGdUH/VH0D/RjZPT7
6f9SYvsnlSuhUSl/IMCNU9AZQlZCGlq7h2h43MAyi1MyqlPVRRnIK6ni9cvQMuw4jkmkdPHQ0HH9
+SaBHxOZAhq1auaYUJ2WjA0gMz4dHf0jS+oYCC1tCQMgmJcGwMfHBxEREXz4bTx69AjPnz+nigho
lH04ZrEHKWUdPOAqB1vgstcBRc1DUMqlUKrUUKtUr3oEFEoaVyt5jwFr/ckVcp4nhVyGMZYvkkQq
pf2W0bIqSoOm076raB/lMinPu0wmh0wq0Q1T+fBhSluuUPKyUFLrtqO+ENHJ6dBSJnkw02+fBX4l
5YedFJPKLuz4lxESy3tor6Zepcm3x/JNwUrCejbGJTw/MrmCT9P1drDlJDxfCtoHOc3jy/J9VM2s
+2q7dNJTQGXp6PKpm8+2J5XKdfmeLoPp7VN5su2MS2R8Pisjtu8sULKyU1ALnqUxTvWDpcu3rS+D
6X2RUr1gZcx6d9gxYNtm3Dthij2nb/DhV/nT7w/broTyKhvpRkRkKEbkE7yXhC0zSsaOlzmlO/uY
sPJnAV63bbYslTPlj5kHtt/qiUn0NJciMjEFE1rdMWH7pRxtgsVXxshq6IeK6sv0MWTpsrJg6U6X
O9t3OW2XbY+nScupVGwbLP+6usSW0ZWtMBNC81fCAAjmpQG4ceMGXr58yYffxu3bt3kPAKuHE6pe
OK02Q2xROybowqsabISF5VbkNA4DkypUFGYiLSsPg6NSCsYa1JblID2rBHK1BtKxYXS2daG+pgKl
VXW6Wwe0rwM9Pejp6kNZYS5q23qhVY4jKy2dt9RZEGxva0Vn7wAvl/a2FrR39/Gg31pbgtTUdAyP
SeDruRurzBxQ1dKFcUqX7+O4FJNaNSqKcpCWkU/rd2L/Znsk5FYhLycHfcMUSClwSihf+dmpyMwt
gYQMy+hgH7opP801ZcjOK+cBngXICZUMBZlpKK1pQHdnG/oGRzExSSdbRR6lXwgZrSvVmwAWXAf7
2H71o6GiGBnZuvkyCnQ97U1ISUlFdUs3D5oqhRTFuenIyC3EmFxJgbgP6WmpqKDttHe0oXeQtZbH
0NbUjuFRCcaGB9Dc1AYtXVAaq4sprTT0DEkpHRm6OzrR3tKC/MJCyDWT6KwvQ0FZNe6ds8fRi/fI
9ugMwDiVzdhwP5VzCrKLq0CLojThMb5YvgJRWZVUptRapzoooe12tXWiv6cb2XRM2ntHoKB9UNFF
ZqCznso/DX0jVG+pZV9Z3UD7SGU12o9mOk5PvA5jhfEOlDd28PLTGYBm2K+2Rk7DAK9bbQ0VvCza
ekb4LQqlegK9bbVISc9CZ3cXOjo6KNCTMZQOIT01BblFNWQutBgfGUBney86mmuRkVUACZXbmwZM
SGi+SBgAwaIxAC4brBBfPG0AmrDDxhSVvQpE+13A+q1G2GaxE+Udw4h7ch3rjbbCzGgLzvi8hHZi
GE7frcdaYyN4PwqhIKKBmk6KwtCH+PbTlbDbaY5/rdwATw9PbN+8Dl+t2Y6ecRUuuLvgQmA6z8up
g/Y0nIP63Ahs3rgeVuZmCIhNgZPxV/iP3/8Jx2/5Q0bmgAVgrUaBe+778a8Va2C0yRy5VZU4vHED
jCztsXXVMqzbcRwyaqkWxD+Bwy57bFn9LS4/icNIUwHW/O0rODg74Z9//C+c9YsDptTwPuKIr1eu
h62dNT7756co6ZQgJeAu1m8xgqXxVhy/+ICMzgRvoSop3arEQKz5Yi2cnXdh+Wd/hYvXYzIu47jl
eRCOTo74dq0JajoHEHjLHRuNTbBtpwtqW5pxeq8VTK1s4HrlDnzOueHq8zRA3oTP/vBnJNeNoSTG
F6evP0His7v4+uvvYLp9E77bZIa2MSWCaPnl//oO+0+eRXJkIL79/HOYWtviq09+jxPXnuoNAOtx
UCIx4CbsHRyx9ttv8TwmC0+u7Mf/86tfYYvTCbQMSKAgI0W1DVfsrbFqgxksNq3FJyst0CHToq04
BSYb18HOzgoWDkfI8A1hv7U5YkvaEf7AE2du3Mdei+/wq9/+AYe9/SBVaiCRyl8ZgLJeOXJCHmL5
l8thamqMZd9tQGmXBJ0lyfjuy89gammNNd/8Hc6nb0AxSqZzy0aqW6ZY8eU/cc43DJrxdph89jWs
nXZjxad/g/2Z+1BryRi8UceFhOaDhAEQLBID0APndVZIKuviBkAz0grbnWaopgv6pQPbYHXwEvop
EGmG6rHsk9/gzO1ARDy+gt998hWaerth+dVyRBW3Uapani9WHln+Pti8wYlv69JeY2w5cJ0P71m3
BbG5Tbh01gWeegNwYv9OXAjOR7r/Oaw0skNdRz8PapnBPnDxvMmXYV3JMpUWLQXhWLNmC9rHaQmt
BippJ2y++Q5PU+qAyR5sXrYRBW0SdNTn49GDWzDd8A0+3b4fnTU5WP3PDeiaAOqSn2GjyXE0V6dg
zXpj9GnJCwzXY93X/0R2WSW2LP8Djnk/Q8yLm/jtX/7G01PJJdwAlEU9xpoVOzBCedIMVmDtl5tQ
0TGEnLQwXPM8jr/+5t9wOyob5/dtwx73WxiWaSDtrsS6bz/H/ZBUaGi9osi7cDnhjYqCRKxZ/jUe
haXi0dWz8HvxAhZG65DTJOH7fHm/Jc4+jMXLswew68htPs1x27d4mFDNhy84bsCB8w9e9QCwelFd
kg7fu9execUnWLXnAiaGGmC9yxEjaqo3+m59ZgBObTeC27Uwns6ujVsQntOIi3vXYcPOo0hIiMPy
T36LO7SdvpoMGK1ZAZdjXhinsiuJfQDHU158vXE6JtM9AA7rdqK0vh47Nq1AZEEnn//Y0wX7zjzA
pSOW8HyczKf5nbaB0ykfRD/yhOW+C3yarDMPa74zRml1OYw+/RY5nQrImjOxcpkpGSDVq1sXQkLz
ScIACBaFAZjUjGLXhlXwT2/g87SDNdi4YR3KuxXQqmSIfH4D2012IiY2Cqs//yOcj5zEyZMn4Uat
2e7eRuxZvxNFrSNQyiQ8D6wHIP3pLTg7efP0Hl45hLO+kXz4hKkdEvIacem4IzxfZPNpR5xMceJR
Ah8uSA6FtclW+EUUISP0GhzO6u9x0/4qKQAVRd7GVitnPo0xpe7G7nU7kFE9SBnvxd71tsirasDe
7Rtw9kE4Yp954asdh9BQnA5746NgobU1Lwa7zM8iL/05TKz36BLSDsDS6Fsk5eRg4xd/gNNBN76P
R897o6FnhN9WYAagOOIRbC3ddeuoO2C1yQYvnvlhAxmJtJwC7LZeD7fHSfzWSdCDizDeYoXs2n7I
Bptx4ZgjbJzOYKC/DScOO+PoyQsIDQ/BmeMH4XrqAooK02G82Qh9tJ+MUC83nLoWgBfnz+DKHUqT
bIfV5tXIbtXVk/unrckA6G4BSGQKSHpqYbpmJW6HJMDf5zhWuXhivL0EW23sME7HWUkGgD13QDUI
56wc8Di8hIan4Gm9C2HJZThl9x02Wjji9KmTOHH8BNKqOjEhG8CqP/0K2/UGJC3gKna4XebDsw3A
rvX2yC8rgvnGtagd5rOR+cwb+w5ehquTMULymEEEou8dwb5z1/Dk8mEc9wnm0zDRC+v1FsgsyIUT
mcZmyRSknSWwWbkT9UMyyIUBEJqHEgZAsAgMwCQ02knEPr6Iv/1jObyvXYPVllWwPX4Dmkktgu5f
w4PHfjBasRJPwtNxxc0JDq4eePzwHgJic6GRt8P8i63IbhyESm8AWCs35eFVWJmf4du66W4P1+uB
NDSF/etNEJLVgownl/HHv66Et5c3/vN//zs8g7JRmRYK77u+cDHdiMOXA9FUGIHf/uEzPIhOh0yh
5N3N8uFW7FjzLaz3HMN5j4uoqC+D47cmiC/tobOrCzuWmSCnoga2m1bhyOVbOLfHFH813YuGwhRs
+9YRo5SLhoxgbFuzn/LagS2rPofjMQ9cPnMIv//Tn1DWOgBv2keb/e547HcfzyNSIaXynr4FUJ30
Ep/+5i84c/06nExXYaf7dRQlvsQXy9biwQNffPPVP+D2KBxxz+/g4eNHWLd8Fe77R8HXxwv3b3hi
2TIjdEvUuOK8GX9ZYwfVhBp7N36CzU4XqXg0cLffjnUmu3DN6xxWrVqLko4hPDjgjFOXQnlZ3jm7
G/9cY4abdIz/8Z//A86evny6REbl01WBdcu+hueNezhguRZf7XLHpKwLy//xV+zzvIfeESm1ppkF
UsDNyAy3/HNoeBLHtpjiWVw10gN9sHabDZ49fYybfsEYlYzilJMV7gTF4eRuc9yOKkRHURR+97tP
cCskmb+lwY6JarQJ5l8ao7xnDHdPOGH5Wgtcu3aJWvXfIamyHXGP3PHXr9fh2vUbWP/Nn2F/6ha6
a3PwzT++gPvFa3DesRm7T/pAOlgL48+3o3ZUi/HWPBh9Zoq6YTrmwgAIzUMJAyCYlwaAvQbIXvX7
Ifz8/PDs2TNeEVm38IRaiZTIpzh16hRu+gZiTKmBSqlAbnwQn/YsLJnfC5cOdeLOpXM07QxSiuuh
lA8jKTwebX0zr4BJaX9bKouRnJTP81qal4bsUvabA3JkxiagqqmX0h7D03veuHDlPmITk1HS0ImO
qly+rev3/NEvocAiG8HLu9dx7VkEBWH2BPwof+hutLsR3p6ncI4CfNfAIDKiEtDUNQyFbAjJEXHo
olZjc2U2zri7IzwmCfHUMu/taEZCVBrGKD99rXWIp2GZWktpNeDq5SuIiYvETmMT5DZTWUj78cDr
POXFHfF5lTzfbL+YASiJeg777a7wfXwLnlceYFCiglYjQ/DTW/DwuoP41DTal1bkxr7k+xKYkEfH
dRTPbl6Cu/s55FS28Cf0awszEZOYC5VKhezkMCTSdpRKFVTjA/C7dYFvO7O8BZMTGpSkpSGvqI6X
pUo6hMc3LuOC9wOkp8Ujp6gccprO8sfSKs2Jg/spD8QkpNB+F/I3BwrignD6og86Bse5AVAoJHRc
E1FW0873LYeGy+u6MKFRIvr5A57vR+EpGO5rR0BICMapgnfUFiCYylKtlCPU9ya8yCCwh/TYcxnS
sX5eB9oHqOyUEgQ+9OZpxOVWQ0P5n5qaQGKQH275vsD980dw4OQtXgfri5L5clfu+2NUroZ0uBPx
YQnoHZNhbKCDhhPROyoRDwIKzUsJAyCYlwaAte7NzMyoFXbtrTIyMkJQUBCvwLp12Y+5TFfmSX7R
ZdtQarR8ytTkBC0zinHpTB7VCvY6F61H82b/CAxbj7XYNRO698XZ0/0scLBhtXYCct5ToLvPzXoF
tHRSsNcNWUCZnsaevGfd1TxHWg1fdzpt9qraNOypdpYm/yGg6bzQunIyCowJCkBa9koZ5XuC0mG3
ElirVTtJrczBbsQHR6Ciph6+no74er0VBuQsfzP7qNHnm21bReVTEHwPpluO6+fi1et8k/qim9Bo
+KuA0+U2SS38cTafj1GZ6dNTqNS037ryUWsmMaHSHVP2atz0UZheVqlmZkyfj/Hp+VN0UdDyp+z5
dH3ZqMikMVg+2PMcbJpaq9s6P6Z8OdoXKnMFlTlfhw+z1zApgOs3PkX5Zq9IarVaSJjxUqgoTUqP
1uepsfowvV22nr7c2TrT+8pMJXutryonE/FJOfz5hJWf/RfuRhTwNznYDxnp0NU3ti5Lh22P7adu
WFenhITmm4QBEMw7A8DSaG5uRgi13FiAf5vCw8P561hseUPpLHpRsFHJx/H88hmYmJjAevchVLb1
QaVv7RsSex2uIT8Vd28GQUrHSzyd/uOSU5m1lmbCwdQExlu34YZ/FJkj9sNEhpcXElooEgZAMO8M
AJvOtscqGGu9vU1sPtve29JZCmItV/b8w/RJzN65/6HyYPOkcgXv2Zhu/Qr9sHRlNt2zA0xpda9U
GlpWSGghSRgAwbwzAEJCQkJCH17CAAiEARASEhJaghIGQCAMgJCQkNASlDAAAmEAhISEhJaghAEQ
CAMgJCQktAQlDIBAGAAhISGhJShhAATCAAgJCQktQQkDIBAGQEhISGgJShgAgTAAQkJCQktQwgAI
5qUBYNtiy/yY2HKG1hcSEhIS+mEJAyCYdwaAbYNVsKqqKpSVlb1V1dXVGBoa4ssbSmexaJzKXbIk
Pyc7DqlUamC6kJDQ+5AwAIJ5ZwBYhXzy5Ak2bdqEw4cPv1UbNmxAdHQ0/y6A7it6Wsil7It6VAHH
JNBOaF/7wt98lIyV648YmNGREQwPjxict7g1Svs9PK+Pn5DQQpYwAIJ5ZwAY169fR3BwMB9+G3fv
3sWzZ8+oIk5BIRtE4N0nqGjug0Iug2y4G0+fPUJD9whkZAoMbedji7XqO9tb0D80QuVqeBlmapL9
bsP9zBNM0Am3VD5Cwz6+M9hcAEc7KzQMKOftMRQSWsgSBkAwLw3AjRs38PLlSz78Nm7fvg1/f3+q
iIBW3YOdy7YgqqANWo0a6sEGbN22Hll1g/zrbVMUSNk3+9n33tkncadoJS1Jzb9hPwY1zZvUTlIZ
zHw7n39Lnk4O1sOg0aho/6WYoGX4lwj13+Vnn4WdZGnT9EnaDpsmUyr5ycGWm5qa1H1jfkyCCZ4W
bYeVNVtG2o8D++xQ2kHzlFJdS5fWH5fK+Pfo2fqMSG8P7D14nw+zb+jzXg723flXeWFfp6MTjspf
lxfa7iRNm06Ltjsxwb6eOKX7Jv/YON933XKUv1m9JPw7+7RPLJ98+5Qe+549+5Y+G+dlRmnMLhsl
GS72hUFeprQeqysqte5rg+x7+eyb+ryMVawM2ffyZ5UDrcv2RUPpTJLkVH/UlFeGoqsIm9etQE2f
iu/z7DoiJCT08yUMgGBRGIAJVS9cNlghvridAo4KqsEm7LAxRXGHFD21edi1wwgbtttSMJFhoLEE
DtZbsHGzFZILm6BVDcLX4yoOHHDCxbsveAAcZ0FJLUfQrQtYt2ETdp+4jqGhHniddIG5uTk8bgdC
NaHBS28fXLpwEdvWr8PZm8E8kKX5P8PFc1dgv90IdvsvYkBKwVMjR8B1T2zYtBnbzHahqXsEyf6X
8T/+x/+NZRutUNDYA41CxgO2SjIIn1MHsZGWvfI0BunPH8DaxBmH9tjC2GIfWoYowI734dqZAzC3
sMDJa0+hoJMr5MYtystlmFJe3LyeQc6C80gfzu7dgc3bLXHK/SgevowgQ6RBwK1z2LRlMw6dvoUR
qZqbgDE6tirlMJ5euYFrV65g66YNcD53Awoq4OaSZNjvMIWpqTUSCuqhlo/g1rmD2LJ5Ex5E52C4
uxkHHc2wycgCUXExuH3/KTcI8c9u4cq9SDIHSjy8dRN1nUMIpTLdsFlXDlU0Lu2pw3W3C9jtYo+Q
1BJkhz3C+k1b4HRgN7YYbULDoFoYACGhDyBhAASLyABQcCrp0BmAoWbssDVD3YACbrYrYeN2E2UV
5ejtboHdtlU4cy8cyQE3sNrICoOSIRj96U845vMYzW2dkEilFMinkBLghW9WGCM9twipaVno7mlF
UlQAbni44g+/+yvKeobhuvpf2L73AvIzIvGPfyxHab8C/sfs8c9vzJGfn4t1//oXHiTWID/8GlZ8
Z47ckjI8uuCMdVb70d5cgU0bvsOjiAwMDo9SEKZWNbW4fT2dscHEBXkFBSisqEbSIy/885O1yKLx
XZvX4PD1CEA1jKToINy5fAJ//M0fkNvWjzNbv8OmnSdRkJ2Azz75GtktQ3jiSUF05zGUlZXAZtVf
YEvlUJL0FMs3mCOnsACO21fh0tMEaulP8Fb91OQIdn7xBezI8JQW5WHLqn/BJzgbfS0lCA70xy6T
VVhlcxyFSU/w96/WIL+sHE1d/bh2xBwbHE6hsroKDRW5sDQ2QcuIDGep7L/ccgCD3bVwdj6MF37e
WL3GArmlZXh4YQ/W2biit6UMX/7HH/AwPguFic+wfMVaJFCZv/A5gb9/+jWaRyaEARAS+gASBkCw
OG4BqPqwa40Rkip7aQ7tjLQT1pZGKO5QoDY/DvbWpvDw8UdXUxG++vO/Y5v5Dpht24JP15uiobMZ
u9dboaRThkm1AmOjLA9anHUygm9cKd8Wo4HSsdlhjuNHD+Fvn3yOmMp6nLe0R0R2G82dwjHjHYgr
78SL00dxwSeWr+N3/Ah8fJNw8+QO3Isp+v+3955RUa37vub91ON+6HHH6NF9e4zu2/eevveEPufs
c/fZe5+9z9ph7bCiOSsqZlCMJEGCoKKIARXJIlmUnMWASFJyzjmnIscqKlHw6/edVShouRZrL3EV
1P8Z4zeYObzMOd9npppCN8yIcGjjITR1dcHM1BjVIhlU/BYAv6wuG8Zpw8141fK2nJ95u8L2fLDQ
/NLPDbYOoRjoLMUJk8O44GiPzz//A+LL6uBxwhTRLxuF4a4eOonElyVwOGmArIYRoVv2I2ecv+WH
cDdL/ObPa3Dk0EFsXvcl7P3ihJ15YlIMlXIQVjuMkdswJozz8t5tnL8UiqfRnjhyyhJWbHn/fc9p
DI4OwO2SGY6Z26Ksvhtt1TmwOG4EB2dPDE3Jce+GA7z9g+HtcQcuN2/Dy8sDHsFx8HQ8hsD5clCK
cGTrMbzOz8SxbaaQsk5PfO1hezNI6K0aqcOhPVvoFgCFskwhASBWgQDMsY1YCVer/dhnehODQ4N4
HHwd3+44ikFWGbU1NULU24z9a77G3YAoHN+3Fe4Rz1FeWoDM3HJIxttg/M0BFLQOQyZR/67ALKvQ
I++ew5Z9Vujs7UdXVwfuWB7GvrPumBxuwzdrv0BiRT2u7jVCFDvDZ8aBs5v3CwIQfsEGTjfVDzD6
WprDLSADLx5dxaY9lugeGEJq2E3sPGiJKfE4dm5Zh7AX5Zhm8+W3HWZVcriYGeKYrSf6RD1oY5KQ
5HUTpubewvSSbjvD0TkScV722HHCBRMjPdi44S8IL6zG7SMmCE4qZ0MpYb/zEJKy63HL2gAnXIIw
ONCDM3v/gjPXA5AV7YUN+8+grKoaWekZqG3tYfMXq68AqMZxZt3XcPKJxUBfJ4wM1sI/JhmH1n+L
iNwWVCR74TfbD6Opsw+9IhEe3bLGuu1maO/rx8BgF8x3rMEF72doLU7Gb37z74jKqEBe8n18/odv
kNMwgGf+F7B5LyuHwSE8f3ADe47aoaOxEAfWnMAQW/LyJ/fxly2GbHqDeBp6DT/79e/RNkpXACiU
5QgJAKGTAuDt7Y2EhASh+UMEBgYiIiJC2BD5U+NjrJI3O7wTmzZtwtYdB5Fd2yVc2n5wyw6bt27H
cbOLaB+cRPXrJOxYvx47tm+HV0wmlPIBXDN3QmXnCKRitQDwe/GyyUFcP3sUazZsgt11fzTVF2PL
xrUwNrHASRt75DS1IfiSC14UtkKlmoKHjRPym/qR6u+NgLAM4QG5OPe7CI7MwaxiHK7WJli7cRO2
7DVGUX0vZudmEXHnAr74ejPymkRQytQP0431NMPi4HZsYOvhFfEMhSlxcLsbI0wvOzwYXr5PMdhT
je2b1+GQsRlOn7NFel0Lwq/ewGNW6atUMtxzuMKWq4OVSR32b10PgwMnYX7MELbXAjGnFMPZ+gQ2
b9sOw5M2aOgZgWxaLQCzqlGc33UAh46dxJZNa2F1xQty/nxBsCu+WbcBtmxeVnf9UVWQzspwA3YY
HEJKXgXSwj2wcctWHD5qidJmERQjzTi8Zx9Ke6cxXPcSe/cbo31sBirJMG5amWAd/x/tPYoyVl4T
XeW4ZHEDfdMKzMom4e5kjm/XszJ3sIOFtTU6R+WQ6OXvIFAoyxsSAEInBcDDwwO3bt1Cc3PzB3Ph
wgXhNUC+AfNp8SfVZ1UKjI2NYVqmYBW7VJgeXyb+Lr1MoYSUnenK+V92Rjk2xjZSmWaYaQlbtwXL
waY3JZ6GalbJpj0mPBcglcnZ+KwMJNNsXeXCK3liNu359/h5M58GH1asEQmhmVVek1MS9bTYckjY
sglvH7D+vMz4dPhT8nz4+fWYmZGrh2XT5D+G8+70JEx4eKXNRWXRsmgqSt4sZus4NDAC5QzfUWdw
4eh2XPROFspXpVQvyxRbF372L8yf34JQDsJy6xG8LOthQiJmy6ES1k8uLCcrL7lCeM1SWFfWPsHW
i78hIWHLxafHy10ulQjTkrNm9bqzsmPrO8XKhi/vm3KQK4U3Cng58PLnZT7BhuVva/Ay5/8v/tYC
Xx8KhfLxQwJA6JwAKFnllJGRgVOnTsHGxuaDOXPmDIqLi4X5zo/Ll29+Ob+zG2sXui0YZr7forwz
Lh+PN79p582aYRd108jEwuZ3p7Wo23y7JnyYN92FaWjGWdDMbxmop8+iGWfhsihmlCh9GgWDzduw
c/M6bDt8Eh3DYuF2g/Zl4QIwBLs9Jkgt6mDNUtZf02/i7fDz4/D2N79QqGV6H2r+vmEX9l/UnUKh
fNTw/YsEQM/RNQHg3fn8+IbGp/mh8P7C2f0HpkNhFenkGKpLClFQWIpJKTujntac7Wsdnh8QxtHT
2Y2h7/hxIgqFsjpCAkDonABQPmLY/4vfupDLZez/t7Sz6aX8PDGFQln5IQEgSAAoFApFD0MCQJAA
UCgUih6GBIAgAaBQKBQ9DAkAQQJAoVAoehgSAIIEgEKhUPQwJAAECQCFQqHoYUgACBIACoVC0cOQ
ABAkABQKhaKHIQEgSAAoFApFD0MCQOicAMxvPHzD5F/A+1B4fz4/EgkKhUL54SEBIHROAPh0Xr16
hbNnz8LBweGDsba2RllZGeRyOZvWBKaFr+jNYEapFL5Cx78yp236yxlhw5ezZVDwZdJ9MeHlJuH/
9/kvAmoZhkKhrM6QABA6JwAc/jlgFxcXVFVVfTB2dnZvPgfMP5fb1liF9LQXSH2ZjeEpKWSSqU8u
AVImI6VZSUhMzYKMNWsbRpciYRV/U3UV6pu7hGZtw1AolNUZEgBCJwXA29sbiYmJQvOHCAoKQkRE
BNsQgbnZadgfWoevNxlg744NMDhkj/4pGRRyhTCsSqlQf29+UgwV327nZsG/Zz8lkQr9+Rm7VCqD
VHMmzD+lK55iO8iURPiQDl8uxYxKGJZ/o54vOz9zVrDpqoRv5k9ArlT3j3I9DmOba+C7FR+PT4+L
gUwmE7op5Op153Iik88I4wjf9uff1mdlqF7OKaE8Fy2jkgkF68e/4S/Ml63INBOft+U4CeUMn8Os
cAVkSsx3OvWViGkZmz/7H0rZuswvB19nviwvosLxOK0UM6oZzXRVkIgn2frJhfnOL6/wuWBN2YnZ
+v4UV1goFMrHCwkAoZMC4OPjg+joaKH5Q/j5+SEyMlIQgFnlGOyOHcLL6iGhn4XheoRn1UHUXIaA
gAA8yS6BjC2fbHIUydHBCHwYjUEmCON9LQgJDMDj9FzU1VWhqbMf09IJlOQVo3doEuNDPSguqcIs
qxxz0xLh7x+AkppOQSja6upQml+A2IR4jEtnUPn6CR5GJ8Lb5TTOXfVg1bBaACSSSTSUV6O2qhIP
AwJRVN3OKmH1547ritLgz5avvnMYE4PtyCsqwRQrawlbzqK8PAyJlWwZmxHIhnmeXc52IiVE7a2o
KCxjghSN2rY+4fK9+lv+UmQ+jURAUBSGJuUQtdUhK69cqNCb64pRWluHpqo61FdWIIStR2ZJrSAc
HQ0NaOsUYaC7XZhuQmIM2gamWNmVIoANV1DZKoiEbGoMT+MeICA0Aj1DbL2W+HVBCoWimyEBIFaJ
AIzD3uQgUoo6oZjswoGdm/GiuBZJIbdx4aIjvvziW2SxijfstjUMjE/BxvEyapoaYHV0J0xtL+G6
3wP4u17CBfdYtoX34rN/+FtE5vWgOjUYjq5+iL/nim/X7oKNjTm++Pob5LMK+8nti/j8s6/g7OGF
5HB/fP2Xr2Fjb49v/vA/cfaan+YKAC8vBVwO7MBXm/bD5vRR/OpPW9E8rkBlWgR27tyLa1cvYt8R
M9RWF+Gg4X40jc1hoDoNh49Zobu3HacP7MH5Ky4w3LkDiTn1aEqPxh//5+9geuECShu7IZcymVDK
8ND9MvYYncYlq9Mwc7iDYVEzG2c/ShsaYWt6DNn1zXDeZ4CthsdhZ2WBf/vTn5HV3IdHF2zhej8d
La9i8fm//A5WLleR+iQBhw33wvn6VRjsMkRF+wCivOyx4/Bx2NqdR25tN5QyyXv/OwqFsnJCAkCs
CgFQ3wJYgz98uR4b1qzBBZ9YzKhkeBIfDOcL5/DHf/snuERkIMLdBodOn0ddxxBmpvpw6uAWXLgd
gBEp0F2aAjPbq8h/lQojQwP4PExAkMcNPIiKgcmBnajqV1/iT/C4AOsbD/HYyxkWDgFCN6tDGxGV
0yY0R9w4hdMX7mquAPDykuHKwQPwCM8R+tvuO4Sk1w24cvJbbD5sgYAAf/zp1/+EB5nVCHQ5i4is
OsT7OsE9Lh/Fia742e+/wv2AAJwy/BYG593RlBmHPQZnhWkpptnZ/9Q05CMtWPv5PzIpuAN/9yv4
x1/9BhVDQHNeFH7781/hflweG3oOtjsN8SC1Shg3mQmD7dUHiL3jgrtBmWjIeITdu9TTDbq8H7/f
aIiAwABs//pXuBD0FPF+F2FoYoOqll4ohOcbtP//KBTKyggJALE6rgDMTMDu6F7cj89Cd0+f0L/i
WQi++nYXmrtFuHx2P0w944TuVXmPYbBhK6Je1rE2GZIf3MK2rcfQNTiI6w5mOG7uiPSsTFy1M4OZ
nQvqG6tguHkDyvuUwvixbvZwvBuFZC9XXL3Fn1OQs8p5A2ILu4T+9y4exgkmAG+vAEzDxegkwpLL
WbMKVw+fRFJmFa6c2IT9po54GBoCf78A1PROoCErGmdOnIaNjT1aJlRID3bC777ejuCwh8JtgNSS
epQmP8RpE1e25MAkK68piQzTgw3Y9Kd/g/1Nb4SEBMM3JAJDbICG3ET86l9+BteHL9nQTD527UHE
y1qh+YGLJS54xyHu1lW4MQGoTYvE6WOuQj8v2wNYv/cEwh4+QKC/PzLLGoVbCbVFqdizcTMepJSw
dt1/yJFCoXw4JADEqrkFYH1kL5IK2Fn4nBJSxQzaip7hqy+/wjl7R2xY+wUcghOR7H8TdhcuYtdW
VhEmvsAtB0s4Olhh+65j6J6U45HLSfx63RFWTQMux9Zhi8lVYV7htx3x5682wtz8ODZuN0TdwCRi
nB1w4Wqk0P9FhDt+/YevYGXjgG//+C84fdlb6D4vAJf3GyMwrpg1z+CioRGTjwZUZkRh05ZduHL5
Mi7dCYBoTIY5+TD2fPkvOGjvJ4w/0lGJI4a7YHn+EuwcnVDROYLypGAcPeQM/mggF4AJ9j+ZUUoR
evcitu87hstODvCLycBQRwn27j6EyoY6HN+3G1l1zbhxaDc27DwA8zPH8dW6jajqH8cjRxvc8k9H
7YtHOHrAmS0h0Moq+u3btuPClcuwc3ZDV/8wYnycYcPKzmDjVjx6WsKkS/He/45CoayckAAQOikA
Xl5eS3oLgL8GODs7JzyxX1tZjk7R8JvfAJDJZagoyEB43BPUNDSiubsPrVWFeMjOpnPYGa1CIUPO
i2Q8fBiOxu5Btv7T6GtvRkVFA6RsfZvrSlHR0Cask2pGjvyMZISxceu7hzHDxm2rq0V9YwfErL9S
KUNh+hNExj1Dc1Md694sdOfrIzwEWFGJtq5+1ixGfTlvHoCS7UhVeRnsLPshMoqqhOGn2TLUVpai
vr0PErGYiYwSgx0NCGfDRD9Jw8iUGANdbahkyzipmb6QSTGUcjGyU+LZ+jxEdVsfeltrkV9RK7yl
0FJfjqbOelw1NkdQ1DPExUShpqVfWI/Wmho0tfZiqLfjzXQVbGdtqypiZRWGlKwCtmzTaBHKLgzZ
RbWQKdRvJLyZP4VCWXEhASB0UgBCQ0NhYGCAixcvfjA7duxASkqKsCHyV+34e/f89bX519N4N7li
RniCn7/6xl/x46+28Q2ev9rGh5GzjZK3S6f563/jEE9L37z2JpUphAfs1Ms5ySpF9a8Pzg8r4a8N
Sud/iZD1ZxXtrErJxpMLMqHu/vY1wGn+uwR8usJy8ma2zKyCF5ZHxpaH9VOvhwKyafV0hfmwZeLD
zM4oNZf8pyHny6+Z/ptMTkGpmlUvI5uX8LogkyBhnjJ+Xi+GxYbdiMlqEspYpln2aV42bJ2mxPyV
x7fLwdefT4u/Lsi7zZedkkkD3f+nUFZ+SAAInRMAPp/+/n6UlpaiqKjogykvLxc2RD68tulQFmaS
SdAE0mISUdnUI8iQ9uEoFIq+hASA0DkB4N3FYrHwE7/8zP1D4f2p8l96+Fm9UqUSrg7wZm3DUCgU
/QkJAKFzAkChUCiU5Q8JAEECQKFQKHoYEgCCBIBCoVD0MCQABAkAhUKh6GFIAAgSAAqFQtHDkAAQ
JAAUCoWihyEBIEgAKBQKRQ9DAkCQAFAoFIoehgSAIAGgUCgUPQwJAKFzAsC78+nwDU2pVH4wvD//
xUASCQqFQvnhIQEgdE4AeKXe2dmJ1NRUPH369INJS0tDX1+fMPzC8ScnF09vJWR6Wip8xVBbP22Z
ZP+LaemCrwEKmRS+Jih8Ivh7Ms3Kf+oHzI9Coay+kAAQOicAnICAABgaGsLV1fWD2blzJxISEoQN
kY/HpzclnoZKNfvmk8DvTvtjR/3VPM3X/ea7s27Cp335B3eW8Jv7U0xYOttbIBocEcpFvHBaWsL/
B6PDA+ho6xK+AKjuzirz8VF0tHZgZIwN8844CzM5OS7Mb2B4VJiWtmEoFMrqDwkAoZMC4OXlJXzq
97vgnwwODw9/IwASqRKihhwcPnQczYMSSMVvKze+7MLya9onWcWpXp9329Xj8L/vN6v/zg/L+/FK
vr6mFJ2iIUECeDeFUoHsuHAEPEgVmt+d18LwT/BiZhLnjDYgpageTwLuIzm9CkqFVDjLn5+PMKym
fVo+g+a8xzi21x6js3OQ8GlPTUM8WI9TW0xQ2cN2PrYs747PI2aCNCcfgfnBdUjIa4JKPr2oP4VC
0Z/w4xkJgJ6jiwLg4+OD6OhooflD+Pn5ITIy8o0AcBK8HfBP//BPCEjKA+Zm2DxYhTyjwrR4AkPD
I+yMeRIyxQxk01NsIx4W2qVyJeQysbBRyxUqoSIXKm3Wj09XqHhZMz8r59/ql7Az6PFJCauk5ZiZ
GsDpY7tZZdoIheaSPB9e1NWJtvYeTEvlkEv5tIffTI9HvVwzmJoYY9OZgo3RWkRmVmO0rxtdvQNs
OZSYnhrHMFtmXuZSqQxjI0MYGZ8C312bXifAeI8DJtnOOzY6BpUKkAzW4di6IyjrHsMcKxOpmI0/
MoEZJiF8nko+P1bmStkoLA6uQezrRhIACkWPQwJArAoB4GfAspEWmJ86i5SkSJiYXcDUDFsmttGV
pcVi66YN2Lh+E1LL29Fe8Qq7t23Gpg3rEZlRgb76MhzasRWbN2/EwZO2GJYoEeZ/C56Jr1jFqkKA
+1W4J+RhpCEf5ofPwML0KP78xzXIqu1CwZMA/Pe/+X/wuy+2IL2yDUpWoSpUM8iODIGXbwrGB1th
c3I/trJp+yW+ZjuPUlhH/hBj/uNHWP/tV9hjchzrvvkDXta0I8nDHfEvqtBZlwej/dvZMm7Fq3oR
GnLicHD/HuzYboCk3AYMVGdj37oDsLE2xTd//iNuRb7A7HQXjm80Rv2IAi1F6TA02IRN67cjKC5L
kIbX8cFsPl9jL5vfWja/p8VtJAAUih6HBIBYFQIgZ2fAxSn3sfOwJXq6m7Bn43pk1I1gZrQBO9Z8
jYi0Coh6uiDqrIXxjnXwisrCoKgH/T1NOGW4CTcCn7N5j+LSqR24ej8JPm72sAt6KszH2cYE5wJS
MVTxFL/7+V9Q0S1C5B1b7DC5zs6up3DcyAAx2dWYFq4cTIAtCpLcruL8pWgUPvfE5+sM0dIjQo9o
EFP8yoJEhqm+amxd+w0S8psx0FaKNb/9V7ys74SvmRmC48sQfN0YO045QzQwgKHRCXQ2lSApPpIt
+9dYc9QRooZCNs46ZDV0o6vqJb79ahvK6mtgvvMUmvt6cWT7X3Al4DGKXzzCX9ZuQXVdJXZtWIsn
pe0QNebjq3//VzwuIgGgUPQ5JADEqhAAsGr3utke/PvnX8PAYDd+/8u/haPfMwzVPsc+ozPqERgT
LTnYvXs/pjTtqtFGGO7cji6Zur366QNYW92Fh/tFXHmUIXS7c8kM54PT0FuUghOHrwpn040ZcThm
eIk1KWB26iCyG0cAJV+nCcywIVK8bsLGPhhzsxKE+1zHIWMTPMmuhFzOylg+g9bCROw/cooNq8bB
ZBOeVDQjwNoaPo9yIR3vwW2nczA5ZYuKuha4OZ7BaYdrcHWyxJfHHdBckomTB52EZeHLcHaXEZ69
zoH1XgtUNlRi0x/+GfsOH8PhQwexi00j9Uk4jp86KwzNy8r6yHrE5tAtAApFn0MCQKx4AeD0Vb/E
unXb0TI6A5VqDqKal9i8Yy/aezuxb+1XuOYXg+yMl2hoqMBJg004dz0IOVnpqGuogf2x3TCxcUNR
US6OGqxHSGopUv2v4i8bTZCX+xpf/Ob/g21IJnoLkrB3qzXkbH4Vj0Owb7sda5rFsV3rYXsnDENj
48IT/PwKQMLty7Cw9kdPRx3ySyrg7WCCrQfOC+OKJVJIB5uwdf0XcHv0DK+ePsI//I//Gy/qOuFz
+jTcg1+iuboA5TWVMN+1CfZOt7Fv00aEZ5Ui5s5ZfHbAEh1Vr/Hbv/sFIl7mIjHAGd/sPILu/lYY
fX0QDX39sDqyC5d8IlGY/wovcyow2VeHjWu/gHdMGjKTgvF3/+O/ILmwDbMKEgAKRV9DAkDopAB4
e3sjOTlZaP4QISEhiIiIEDbg0vRo3LkfAYVKxZZTDJVsHD63rqOgaQi9tfk4fmgX9h46hvL2EYx2
1sDcxBCGew8gq7IT4sEunDc9AkPDPbjpHwcpEwjJcCfsTI1w2NgK12/dQXxODQYbi3HPIxISpRKt
Jdnw84yCnDUXP4mAgcEevKxqh4KdUcuUChQ9TURUXC7aa7JwYM9eHD11DgWsgpdOqx8U5A8iVuem
YN9OA5x3vo27t6+isqMPaQ/CkFnYjIInIdhjuA9W513ROzTGKu1A7N6zD7fveMI9Mgl9rfXwZuPZ
nzfHrj1HkVfbjRmJCH7XfdE1LoeouQRnDu/H/v37cD8+EzOqWZRnJWLvLgNcuOYmzK+4oQfy6cW/
oUChUPQnJACETgqAp6cnbG1tkZ6e/sGcZmfL/AoA34D5WfXMjAITmmmOT0wKG6p4cgLTcoUwTT4c
v08vkaqv9/N2qUSMKTbufPvc7AwmJ8YxKZ7WdJsVnqjnFeWkWALljFxY7ikJ26A1zTK2YXP4tPkt
AN5NIpNDzmSAL5cwXdZfIZt+s87CeEwCOHxH4pFMTULKylDK5jUtUwjjsSUQpitXqvjCQMWGUylk
mOSSo1k2jjBtts5KlVJYfomUX2tQr9MMG57PTy7Mbw6zTAaE+YknheVdWPYUCkV/QgJA6JwAyOVy
FBcX48qVK7h27doH4+LigtraWshkMq3ToVAoFMqHQwJA6JwAzG88S4Ev14emQ6FQKJQPhwSA0DkB
oFAoFMryhwSAIAGgUCgUPQwJAEECQKFQKHoYEgCCBIBCoVD0MCQABAkAhUKh6GFIAAgSAAqFQtHD
kAAQP5kAjI2NvdlYKBQKhfJpwyWABEDP+SkEgP/YD5+eWCymUCgUyk8UEgA956cQAIIgCGLlQQKw
yiABIAiCIJYCCcAqgwSAIAiCWAokAKsMEgCCIAhiKZAArDJIAAiCIIilQAKwyiABIAiCIJYCCcAq
gwSAIAiCWAokAKsMEgCCIAhiKZAArDJ0SQCeR/ohNrNS07b8SMUTGBdLNW1qVGIRbl60gpWNDc7Z
XUZj35Smz3fTXPUSkckZmjaCIIjVBwnAKkNXBGBONoSdn/09vtxnD4Wm23IT5m6P+ynFmjY1o02v
sH2zAbLy85FXUIyxqaUtzcRYL1o6ezVtBEEQqw8SgFXGpxYA/tOTfCPiWfgzlBUvHsDJ1RNXbM2R
3TAsdJNN9uLWdVMcO3occS8r2chT8HO3Zu0mCI57zU7XJQj2uIwzJ8/A0t4Dg9NAf30ugqJThfFF
9QW455vAmiTwuXIDnl63YXL4ABJy6iAdaMY3v/0n/GHDXmSXtwjDc0aacmB60g5jYjEk0zIoJ3vg
6nIHStavNDUciTlFKEx9DHd3H9hanoa58x1I2L7QkvcC8SklkIy2wu3OTZwzt0Vl7wTKs6Nx+tgJ
WLi4YkwGSEe64eZgg+Onz6G5dwDeNxzxqn5QmPfCsqFQKJTlzocq8g/BxyEBWEV8agHg0+IfoeC/
Q61SqTRdgcumh5BQKkJe9G1Y3XwkdLtmdwROvlFobmpBR88QAm5bwfLaPdbejNaOPjx0P4/Tjm5o
b21HwA17WLpGoiEvHsfPewjjN2VF4sC+y6xpHN/+/F8R9qoKjYVJ2LR5HyZnlLhtexAX/RIhkcqF
4TnTPaX46re/xAFjY5jaXod4bgbBN+xw5bYXLtg7oHN8Gr4W+7H72DW0trbh+lkjXH2UjqJoH1hd
fISJ7tf41S9+j8zCatTnJ8LgyDGUVlYj8KYVHLwSkHjPFgZmLujpH4JUPoXnSdGo71WXK9+peBlS
KBTKcocfg3ll/UO+B0ACsMr4KQSAb0QLUU224+vf/hx7jE7g0J4N+N0GI0zLJnDqoDGruueR48y+
fWhlZ/nznD96CEV9/NycMVGLk6edkJ+VgHPXg4VO3SVPcPL4TdY0gOM7TmJE6CqD3Wlj9DP3CHW1
gN+TUqHrPMONr2FhzqVhIcP45X/+T7gSqb5d4MnO4JPyOoTmnpJkWF6+j4LkEDhei8FQaxaOWfF5
As/u2eHPG3fi8qVLsDlriqv3EzDa1wjL0ydg6Xwb3aNvxYMgCOJTw4/rJAB6zE8hAEqlptLWkOx7
EWYu/sxIpyCWjMP6yE7EZBTjitlB+CbmY2RkFKLRYVy1NIJzwBOhvW9wBD5XzHD2RihGRseRcN8F
ptdC0VuTjs27TDDEhom7aYP1uy+yOQzi4JqD6OazVY3C/OgBQQD8nI7C3icecsVbIRluyMaRQ2bo
HxvDKItCqUCC/x1Y2ljj+JlzGJapEOBwGhbOQRgdHoGrnQnuxGShOMYX5y6FY7AlA0ZWN4RpVTwP
guGR02jrFaG9uR7d/cOYFI9DPDYCx6O7cdk7HiUF2egc/uufnSAIgvhrIQHQc356AZiF321nZNf0
a9qBypeR8Il8gYneelgfOozDh00Qm18P6VgXLhw7xtqPIvB5PpTSYdw0O4MjR4/D3OEaOkb4GbUc
HlcscPCYCS452OPm7RjWbQw37G5gkNfzs1Pwvn0dA6y5q/Q5dm/ehrSSBj5bAcVIM4z3bMRBI2Mc
OXIGL9LT4XTlKmSsX+I9F0SmFyHawwVHTExhevAwLC+4Q8Jkoio1GvcfZGC8rxyu9yLUE8MMYr3Y
sMYnYWJmh5r2AZRkhgnPMNg7XkFnTz+uOZghrVqkGZ4gCOLTQQKg5+jCFYDv492N7f32t88SzDM3
p30D1caslh1gjs2Dz2dW9c502Lw8L9giJqtp6fN4Z/k+tPMQBEF8SkgA9JyVIAC6hr/LRURn1Gna
CIIgViYkAHoOCcAPZ1oshmzBcwMEQRArERIAPYcEgCAIQj8hAdBzSAAIgiD0ExIAPYcEgCAIQj8h
AdBzSAAIgiD0ExIAPWclCACft0gkEsYlCIIgPg4kAHqOLgtAX18fbty4ASsrK1hbWwt/7969i9HR
Uc0QBEEQxF8LCYCeo6sC0NTUBGNjYyQkJLyZL6/4Hzx4gOPHjwtysJCn4b6ITnv7u/61Ja/wNK9G
00YQBEG8CwmAnqOLAsD7m5qaoqioSNNlMc+ePYOdnZ2mTc25Hb/Cf/ybz9A6wn+0Fwi9Y4v9l9Uf
BSIIgiDehwRAz9FFAcjNzcW1a9c0bdpxdHREfX29pm0Obg7WsLM+i5Pn3YUuMb5XcOKW+jf5qzLi
cOjQYdhcvgeZivV74IsGkXpZX8aFobBpCJL+TtiYHsZBo7Oo6ea3GGSI8wmF85Xz8I9JFYYlCIJY
TZAA6Dm6KAAhISGIjIzUtGnH19cXKSkpmrY5XDY7jrK2IVw1M0RCXhvSItxg5vUY410F2Lx1F9Lz
inDd6hDuRqYh1vsSrj/IYONN4/hRE7QODsPKeBfr9xwZMd4wPG4NmVIGg1/8G5wDItHcSR/rIQhi
9UECoOfoogA8evQIYWFhmjbteHl5ITV1/sycCcCZo8hulkDcWQTjo+bw8ryNS6HpqE/zws8/+yNM
jhrDcOcGHL/1ENMD1TjreAeVOck47xYByDvw51//HY6ePIGjRvvxJwNjDE8NwmK7Cbrok/0EQaxS
SAD0HF0UgNra2vfu8S9EpVLh7Nmz6O3t1XSZg8OxA3hWpn4wMCP6Lv7rf/1vuPLgFbrLkrBm+yEU
VtagsrQYjZ2DbAgVbp0zwvot+1DYMs4EoA8GG9cg7HkuamqrUVzVjDmFCMfXHkXThPYNnSAIYqVD
AqDn6KIAcJycnD54FcDd3V14HXAhDz1voaZP/QAgx3z/JtyJLxaa/W86YMuu3dh7zBRVXcNCt9Jn
/th59DzmN+OS9Fjs3LQFu3cbIuxFBXOKKbiYOqNTTAJAEMTqhARAz9FVAeDzO3fuHJydnVFcXIyu
ri7h4UB7e3tBDhZOg78ymJSUhMTERHWSHuP502dITEhAeUWlMIxcJoNC9T0bukoBmYyu+RMEoR+Q
AOg5uioA8/AH/S5fvgwbGxu4uLggPT1d0+ctfINr7+hAe3sb2trU6WDtHe3twsZKEARBvA8JgJ6j
6wJAEARBLA8kAHoOCQBBEIR+QgKg55AAEARB6CckAHoOCQBBEIR+QgKg55AAEARB6CckAHoOCQBB
EIR+QgKg55AAEARB6CckAHoOCQBBEIR+QgKg55AAEARB6CckAHoOCQBBEIR+QgKg55AAfD8TExMo
Ly9HTU0NhfKjwrejgYEBzZb1aRkcHFwV23F9fT0aGxuXnOrqarS3t2tKgVgICYCeQwLw/TQ3Nwuf
KOYiQKH8mHR2dqKiokKzZX1aKisrhYpQ23KtpPDvfPB10SYH76aqqkqQgMLCQk0pEAshAdBzdF0A
+MHSx8cHV69exf3799HQ0KDp8+ngHxfq6+vTtBHEXw/fh7hM/hTU1dUJB+eVTmtrqxCRSCTsl729
vcJVFX6M4lc5eDvvzvtz4eLrza8CEO9DAqDn6KoA8A3M1dUVZ8+eFT7xm5+fj+joaJw+fRr37t3T
DPUuKtQwYaiobtK0fxy4APSSABAfAX5w/CkFYHR0VNO2cuH7I6/c+dWAsbEx4bgzPDyMixcvoru7
GzKZTOjO+/PKip808CsBxPuQAOg5uioAd+/exe3btzVtb+HjOjo6IjQ0VNNFzXhPFY7v34C9+/Zj
784d2HHQBqLJj3OrgV82bW9rwcyC/WRudgZvW2chk8s1zdqRTw2joryWDfnjUYhHUF5W81GmNY9M
Mol+UZ9w5jQp0b4u9UyuBsalmrafhtkZCVtGkaZNw6zy/W7vMSOsm/KdY52IddNWjiqVStPEmqUT
6Ov/OJ+V/skFYGRE08aYe7uO88wtWO95xOOjQtkNDI++2eaH+/swNPUd+zub9szs28KeUcqhUL4/
7Rl23JhR/bAtmQtAV1eXUOlzoeHZtWsXr1zw1VdfCVcDuADw/ny5+TMDJADaIQHQc3RRAPgObmFh
seggvBA+H1NTU2EHF1CJYXFwJ1wfZqjbGfcvncEZ5yB2gJFC1D2IlppSPHuRp+7JKpHK2nrIl3jc
6R8aRbK/M865+Gu6iHFg85eIL+gU2l5Fe8Lh9mIheZfx5lc4ZmSN79aEpTHZmoujh60g07T/aGYl
MDu0hkmTMYwOGyE+S/s9aofjJnhe/tNdCZnorcS5s/tgbLQXJ62uY1zBhHCqA+ctD+PIoT04e8lD
6/9UKenF9YtHYWR8EAeOnEXzMCs5lQRuzqZsfffB6LQ9RJIZNuQcOqrzYHJ4D17V9QvjdlW9xukj
Rti3wwDX/RIXSN9fx8cQgPHBHjS2/fD/g3ALYGIS8slheDqfhaP7A00fVrYDnbhoZQyvqJeaLmqm
Okuw7ouvcYSVgf01HyZLc6jJiIOV0THsMNiLsGf5miEX431uH/ZYumnagIwQJ/zzr9dgbMEurRpr
wG9++Qs8rVSX9VLhxwd+aZ9XRLzy5/f4r1y5guvXr+Py5ctCZc8FgPfntwNIAD4MCYCeo4sCwC/1
h4SEaNq04+7ujvT0dKF5qiMfh46ewKKpjtWzg70VejrrsflXf4CV00Vs+fMfYOuXAkg7YGh8Cr3T
mmG/h86efrTkJ2DP/qPgJSDpKsbf/+f/BLv7yUL/6xZH4J1UJjQ3Vpahpr1baBZQSVFaWorq/Gc4
Z+UMBVSYGJ3C2FAvSssrFy3zYGczSiuq2RAaFBKUsXE7RJqztlmZMK2aglRYWTixaQHy6VGUlpWi
d1jM2thZbv/bg+nU5CiGJ5awkrJ+WJwwRuc7RiEeZsvI5ifR7OvXztkgtagBleWlGBCrB+bbxcT4
CFpbOjDKdnyJlC8VP2scw8SU+mpBf18LysoqIBOmM8e6izEy0IeKiipMTM8r0Rz6Bweg0O58AuND
bWjuUFd8jqySTirswpPAi3DwTRC6nTXZjeC0GqF5IXJxP+obm4XmYCczuIa+Rv2rBzC2vSl08758
EpeCX0A12QUHGzN8s2YNnlTwJ/UVsDEyREo5K9OZSSYG+5HXPiGM8yH4PsAvPS/kjagyPoYA+J7b
gV9+c3iBTMoQEnr/e+Wyrr4BiulxxD7wxo7Na2FyWXMrjcmQ9x1nbFz/DS4GPBE6TY0NYWRyGh35
sThz2UPopmYOkxNTQtNwUTzW7z3+dnvVMDvRiVP7tmDdDiO0jHCxAtKCnPF//G//JwKelwvtnGcB
l/G//5d/xJPSBfvLEmhpaREkoJ9t6/xWAL/vL5fLhWMQ/8srKH7mz/vzKwW8vOkZAO2QAOg5uigA
wcHBiIqK0rRphz8HkJysroDH2Nm1yUmLxZdyJ1tw+JAVmhvLsH/tIfCqSNH2GgY7rISK84ecybW1
d0Ay0gW7M0eR2y1FXuw9nD1nBUv7G5hVyXDi4BG0TcjxyP8Kq+TtccrcBFEvy6GcHoHtiX04aWmO
E4cNsO/YFTY1BYy++QamF5xgYbQDxuduCsuSn/4IZ05ZwM7ODJe8w1mlOowrVifZfM7DM+oZZBP9
OH9qP05YmuGk0R7sPuIojJf0yAsXnRzZWbEpqpvqYWlihPI+XjnP4pKlMR6XdrHm70E+xMY7hLwG
9S0AuVKFtuqXMD15CufP28Hs0i1Mzczhtpkx9hlZ4ZylJTbvOYz20Wkk+l/Ft99ugMs1b9y9dQVh
z9VXD8KvOsA99BXkE91wu3MJTufNYHnJE3KVEpbGu2F44CRMmXSYaSqXydY8HD5piUl1ffE9TMPi
8EEUt4pw0+wkMuvVFexj32u4cCdWaP4Qt86ZICG3ERHX7RH4uFToVvcynP2P7mBuVl2VebicQ1wh
r5SkOLZzM4o1TnVi/2bcS31fMBbCzzz5w6o9PT1C+4sXL/DkibpS5fxYAZAPNcDO9DTOnDmNp5qK
s/hpIP7117+CS1A8auurkF2kvbLjVwDGRkagVM2hp/QxzK96q3vMzQq3t/ISfHDhXrzQKdztHK6E
pKGnMB7rtuyB34MwdI1pbv8oJhD3KBhmlqcRm16i7raAvHgfuEemIzPaE3cjMoVuj+/fxFlztu2a
n2f/PTbLyQ7YmJ3AwROnEZOnlrOlws/+CwoKBDktKSn5YHh/Ptz8q4DE+5AA6Dm6KAAvX76Em9vb
y4fa4Jf8+DvNAqwCO7BtHRKL3p5JZIa5wui8F6YH6nBmj4Nwpi1uycfJXfaCDPwQ+NmGeFqCWK+L
uBuaCK/rF5Ff0wiHs5ZIS3sGa0dXdNa+whesIkzNysHjoBvYcNgOz6P9YHHFR5iGqCwFRkcvsmpZ
DMMv16FogO9ArILZuw9NXd04uOUvcA9PwevsZ/jiq014VVSAvTvXIS5PfeDKiXDDqYvqynKw8jkO
HbIVmqtLshEefA871/47QjPqkRrgjKvB6VAMVcHo+DlIte+ni1FN4ci232HbwaM4ZnIGdW19uHBi
K6xvBSPn9Wvs+OZrPK5oxl3TIwhIrhRGiXV3xLXg54j1sIP5tUdCN7/rdgh8or4S8vCyHVz9XzIP
mcLz5Dj4u13An9esQ/+kGMe2bcDzGv4wmgLGe/eiVTyLlHtO7Mz8hTDudyFnIuR87ijuhCUK7baG
xnjdqH6w7anvDThejxSa30Mlxv0bNrC96SWIorvZGYQ+UctKfXoUTp26ITRzrl8wQ1xBh9CcHuWF
det3wv6CPT77/HMk5qu7fxf8zDMwMBDh4eGIjY1ddLD8sQKQHu6Oe8nlGK5JxTnnAKFbToIv/u2z
3+CCbxheJIfinGug0P1dFj4E2PQqEqbOGgHQkPboNi74qa+mSCWTEEvZPj0kQkLUI9xiZbfd0Aht
I3LMysaQFB2IS+fN4XQrCLJ3LgGc27cOljdDEelpj28MzIRuiZ4X4P3wCTwuWyKloh950XfgHhQL
16s2ePjqhz20y5/J4WXI3wSYvxrAL/XPh7fz7rw/fwCQCwDdAtAOCYCeo4sCwKdz8uRJYQfWBrd7
/owA3xjnaS96jC1rv4HtxYtwsLbAxv0n0Dqmgqq3BIc2mQuXRycaXsFox3lMTnXgyAkz9C3xFgA/
oAyNiTFQnYaDu7fhpJUT+JzD717C5s0b4ZeQh76SOHy5diMeRUTg4cOHSCsoZ2dRDrgdoq7UJppe
4biJE6t8xnFquwnahaKSw8naDOXswLx73e/hFvQQD9mZVnhsMibZ/2S6vw0X7Exx6e4DRHk5wzXw
mTAtcUseTp66is6mQhzcfxqltTW4Yb0HPsllmBmugbWDC4K9buJeXK4w/PciG4D1meOaZeIoYLL9
jzh/2w+PwsLYOsWid2ICN60s8apRfXk7O+oubgYkIybAFf4p6krf85IlQlLrhOYwJxt4R+UiNfQW
LK8Gob6+EAf270LnwDDOWViiZVRdayTcuwo3vzA42dmy/9d3n/5Pj3TD+YItYjPV8+A4nTFEXJH6
bDv0lh08496/J62ST8D31iX4aM5GOaEuZ3DjofoWUl6cJ2xvhwvNHLUAvP3hmKHuJlTVlMLO2hJV
fd+/jXO4BDx+/FjT9pYfKwCnd/4Jm9j/3NHqGP75l3/BAC+y2UGcsTL/XrFdKACN3yMA2nA0Wo+H
2S2aNo4UO9dsRL3mf8kR91Zi86Z1cLrqgmtXL+PLL79GA5OGF/edcDM0HcONbB88Yozjx83RNyGH
s/2JHywAfH+cf+1PLBYLZV1UVCRU8sXFxcLVF34M4f1HRkboLYDvgARAz9FFAeDw1/6OHj266Ac8
+IbK7/sbGRkJB7N5+AbX1z+Aqrw0ODtdgpOLO8obOtHX04W+jibUVjQKZ30zkjHUVbViRilBbmEx
pO/evPwAwhmGSH1PeM3P/i9sO6c+E2/Je4j/+L/8r8homMCMuBtWJgcR+DAB8fHRyClrRUdlJrZu
2YaAkEBcPb0Pa7bZsLEmsP9LA7BRGNOwMDJE46gUQdetcfGaD5KfJONxag6GR3sRFxOOhIeeOGhk
j/KyV9i5TT2ta2YHsc7AAR312di2fgeS4lKx/YtfwDU6h08UnjZH8IvPd2NYwWSqpxr3HkQL6/9B
pCKcPLwPTQtuXScFXIe59RUkP0tBdGyKIFCO+zdip7E1wvyDsH27AUrbBhHsaguPGHWlmxXuhrU7
DyA8Pg7r//XX8IgrRJynHUzOuuDxQ1989scv0T08gtMmx1A/qN4GZKOt+PYX/wyLmxFC+3eR5G2F
P6w/hISEOAQHh6CsoQ9l6Q+x57Ax7gf5Yb/ZWfROKhATeh/VPer71Jy6lwH41e/WICY+AQ9CgpFe
UIeeulfYY2jAxruPgyeOIafx7UN1/GG4iBy1fHZWl7PyjYXbBXs43n743eW4BH6MAPTXZWDblt2I
jAxH2KMImBhuRmAqq9hmB7DzwCEIN0JmZzAtVz+H8S4LBaAuPRRG9ovfsnka5Awrd/Wtt5QQV/jG
Z2GwtRT+viEI9HTFTibVHcNSZCZFIDDoESsTU1jYuWqe7VAT7noW9h7q2wicZK/zcPBNwlP/K7C/
o5620ZqfY4e1+sqY+fG9CEyvF5qXCt8f+et+vHLn5ckr/N/+9re8csHPfvYz4Ye7+LGK9+fPCNBD
gB+GBEDP0VUB4PAfAbK2toadnR2cnJxgY2MDe3t7YQdfSFNTk/BbASlPnyMrK4slA08eJwvdKip/
/L0/fsDp6ekVmvPSUlDKKh6OSjyA+IRkTGlOXMV9zbh/1x3uvqFo7lPXpg0l6bjj7oaM/FxWiddh
jklETtorTAjH6BkU573CmPBQghQJIffh7umFV+VtTFLEiHrgBXcvP3QNqn+8pbE0U5hWel4uykrV
lUh+agz8/B8hN/cVGrvVr6o9v2ePI7bqs7vsKE9cuvuBy+LzqKQozM0BqzsXkRn/iM3fA8npJcKD
XvXlJch4kQzvO27IrVK/AdFQWYz6zvlX5ObwNCYQvuHhyM58haa2YcyqJhHm646EpOfIY2dpYrad
FTK5m1hQaxzbthZJpd//VHt7TS68Wfl4eHjA7e5d5FSpL8cXpSfgtps36vrY9jndiVPs7FIkfXtQ
G+2ph5+3tzAef700KUt9xaK1PJuNdwc51ep1maeyNB/tg2qB6KophreHOyKevPzRlT/nxwhA8FVT
3Ap/rWlj06pLxSEzJ6HZcvcGbDa5hPhIH5g4Lnxo7y0LBWBC1Iq88rcSzeltqUZpvbpMawrTWfm2
YXq0Hfc87sKHbdN9/LULRnNRJtzcPBHyKPG9hzZL87PQ2v/2ODE93IXckkp0NFajvE59VaW3vQEd
/epturjgNVpEix+a/D74/jj/FgC/EsCPO/wKwGeffYa0tDSh8uHdeX96C+C7IQHQc3RZAObhtwL4
ZX++0/8UqAVAfZlZ12mpLcYRQ0PkNaofjKstykV914J3v3UIhXgMqUxQjM5c+N4n2JfK9GAHsnPU
D/fpIj9GANJePEVmbhHKysqElJcUIi46Hl1MTpUTA8jJL0b/0CC6RNp/s2ChAKxk+PFg/ncAeGXE
3wLgb17wSn/+x3946HcAvh8SAD1nJQjATw0XAH5w0X2U8L7hiLDUIk27bjPeXia85dA69rGqf92H
b/9/rQBUVdcgOytTeEiWJz0jEzm5Oe9dEfsQXAD4PfOVDq/8+e/88/VeGL6fvtuNrzP/y4cn3ocE
QM8hAfh++IGFP5PAzzx4s+6mHf0Dgxga6NfST/fS3snP4kaEZzW09V+N4W+u/FRno/xVOH7lQNty
raTwSn3+KshSwm8l8v2XeB8SAD2HBOD74cu78DUjCuWvDX94jR8cfwr4fPmtLG3LtZIy/yM/Sw0f
590fZyLUkADoOSQABEEQ+gkJgJ5DAkAQBKGfkADoOSQABEEQ+gkJgJ5DAkAQBKGfkADoOSQAxGLm
lnxAmFXNCDu6TC5n42g6vscs+nu7IZEv8WcXfwjvzHR2RgZRb/97X6f7qZFOjkI08PaLgO+ysLxl
0mmollb8i1CxA7NyRtfWnNB1SAD0HBIAYiGd1flIzXj788sfYnZ6CP7ed4Vf17v/MB6TH3yVX4lQ
XzfU9X3c98+LXsThUVK2pk2NfKwdgd5hP/hjT8tNW3EqAsOTNG1v6W+vw8PwKAxJeMU9h/qibPjc
vQN3H3809fywH29qrSpGYcXC3+n/fkb6O9EzRE/H6zMkAHoOCQCxkOaiNEQnZQifxlWpZiGTTGJ0
/P3/62RPNYKj1F/k+xATI4MYmxpHdPA9NIjUX14aHR7A8LhaBqTTkjc/rzunUkCmUP+m8shgP8Ym
P7wtScd6ceeyI0Ii1R/zmUc+3olHwbGYkEkwNKL+qdl5ptlZeH//21/Ik8tlmJlVH/jkMnUzP4ue
Ydvm+PiY0J2fuQ8Oj0Iz2BtmFFL0i0SQKtVLr1AohfIaZQdG5cKTcJUMA4NDaC5Jx8PYt58E5oz1
tiDM3xdXb7ujb4pPZw4TY+rKuDE/BX5RT4XmeWbZsvH/h3hyDGKZupxGhwYxf2FFwdZBKlMvx/z/
bWxCU4asG79K87ZZwdZTjpRIP0Q+z8OUVN2Pl9HQ6IJ9fG4GA/0iiDX9idUHCYCeQwJALKSlJAOJ
Lwogn+zDfXdvRMdF4ZrzdeTWLv4Z5qneety85oT7AUEoeqcfq2VQkvEEd+7cxYPwMLjevIWuSRV6
G0vwMCwE93z9UNHcjVfP4lBYr/4GwOvnCShr6kJJ9lP4+frgQdxTyPhH6t9FJcWzpASkp71AYsLb
r/txZqbYMrN5RsTH4paLC57lqX9xryY/A54envDy8kBI9GMoVHNITohETY96e44Lf4C6fgl6awrg
y9Y5KjkJRYV5CA3ww73AULQPvt2uZxViZD6NR1BQEAJCojClmEXxswT4BT5AiJ8X7twLwySrn2Xj
PQj09oDP/SD4etzCw4Q0zRTUqJQKVllLERXxAJ2j6gpdJZtESX4u4mKiUNmi/vbEPCMdNfDz9EVk
5AN4+AYiKzsbwT7ucPd7gEkmIs2FmXjxqhaKqW74Lfi/FfCPHIl7ERyZKHzBUjHShqBHCRge6MJt
Z3ucd3ZFUUOPcAXhvp8f7t+7h+zSRiY500iJecj+V95IeFnw7t0WYpVAAqDnkAAQC5kXAOloB9xu
+WKanWH21rzGvaBEdo76ljmVEoOiXjTVlMKNVbpN/EM8GqYHW+DtdY9VTKxFOQbvO65oZZXcxFAP
SgtzEeDuAp+oNPS3ViD6cTarVacR9iAck+IphPjcwevKVvC6/73j0qwSWc9ikFvTgdH2KkRGqT+1
PM/MZDe8bnmiX6qCtL8Ovvdj2BnzAO55eqNfrK5kE8L8UVTVguTECFR2qc+4I0Luo6pPjPbiF/AN
Un/JLisxGKHxaZDIZ945QM6gvaUBWS+e4IKjIxtvHPmJjxD9vFjoG8WkoaJ9BPnPwpGYVSl0K3sZ
jYDIxVcABGYlTIiC0aX5DLJ0vB8prOLmlXBuRcui8h5oKoan1wPh+Ybc5FB4PVJ/GjrWn82va5wJ
wEs8flkJ+Vgr+7/dE7502VP9Cv6PnmNG0gffB9HCuIrhFnjcCxXGLUiLQVYV/8aFBJ63XJBRUofG
imxcv3sPAwOsLN3dhA9MaT/UE6sBEgA9hwSAWMi8AEiG2xEeliJ0m+iuxcOQxQKwkIzYAKSXq78i
xxlpLUVQWJymjVWwQb5o7h1C4oP7SMsvQdmrFHg9fMxqeAXiY+OQl5OJFM1zB3LJKDKexCE8JoWd
XQud3iAf6cR1J0f4BgTB8/Z1nLNxRFHd26sP/BbAw8AY8K1rZqIb4aFJ6Bc1ITDo7bf+i18kITu/
Cklx4ajuUz8tEB7kh2qRGG3FmUh6rvmOApON8vwMhASHoalXfUuA09dYgnv3g1FT34jQQF8UtYpQ
mJKIgmr1x6IyY2NQ1tCN1NgQVjGrBaO7kk0nWl2Wi1CJFwnAG2R98Pa4D8mCAhex+UYyaeJU5aYg
+bVaLl5ERaKqYwQtRRl4klGF6aEW9n9Ty8Z4Vw0iwp9DPt0Hn0DN55bH2uDhGyr8L18/jcCrev6N
izHccbmMyPhEJCbEIyk1C7zoxcNdSI5+iOTU11AuvY4gVhAkAHoOCQCxkMaCVESlvIaYncX731N/
v32ktQz+ftGLBGC0tx1ZGdnIfpkCd99gDCz4lvCsbAz+Pm5IeJ6JglfPcN7xElp6RAj18UBGQSnS
YoLgGhAjDFtX8AwOTtfROyFnPjCF4vxclBYXwOOuDxpb21FUVvVmvvz+Nn9Knv+sa23uC1YRx0Cm
eLstyVjldt8zVHgIUDHaCn/vR1DOyBAd4IPw+GfIeZUOX9/7GJyWI/9xBO76hbP5ZcPB3gF1gzI0
579AZKL6c7uNlSUoKSlly+yOtMJGoRunpSQd7j4hqKqogNtNFxS09iMnPhKZxa1C/6dhoSioE6Gt
IgO3PP2RW1CEQA9nJjzaBGAKAf6+6BhjB9NZOUoLX+P16xzERwQjPDlr0dsMvXUFCApOFppL0mMR
/VJ9xSE5JBhlbSNozEtFQmoZJION7P8WLfQbailFYCATtzkZ7t++ibjUbKTFBsPxuo9QpuUZ8bjh
FYLO/iE8jglj4vcaZeXlaGzvx/TEEApy81D0OhV3PYIgXrgwxKqBBEDPIQEgFjLe34Xmjj4opayS
rVF/ZU7GKoPa2sVPmMsnh/D8cQISkp9BNP7+c/eS0V4kx8WhoLwadTXVELN/+UhPI2LjH6Oqpg51
reozd/5FQO+gSHUlPzeDstwMRMcksLNudlZbno3HmoruXaZH+9HY1KVpU6OST6K2qkG4162SseVn
zfwwNSufQubzZMQmpqB7SP2d/1kmG+msW9arQlTV1mJUMqNe9zb1Mwk9zVWIjYpGTkkNZhYd61Ss
UkxDanou6hrqMTAhgai1Gb2D6rP9zsYG9ArzmENlQRaSnqShvqEOTa1vr5C8YU6JutoaTMr52s+h
uaoQMdHRyMwrf++MW8LWt65e/T39wZ4WNHcPCs3t9fUYmpRhXNSFtq4h9n8bZ/839f9Kyv5vdbVq
MRkTtSAuNgFlFVWoqm8S5IKX0YuUZFS3D7KilyD9aTJiEh6jtW8csyopXr1IQXzSU/SOrPwvCBLa
IQHQc0gAiJ8K8cQIEh4FI6dKS+XI6GquR+8wVT4EsVyQAOg5JADETwV/4j/8ceaiS90EQXw6SAD0
HBIAgiAI/YQEQM8hASAIgtBPSAD0HBIAgiAI/YQEQM/51ALAhyEBIAiC+Onhx3QSAD3mUwsAH06l
ose+CIIgfmrkwpc8SQD0lo8pAHw4giAIYnXCK34SgFXExxSA0dFRreNSKBQKZeWH1wEDAwMkAKuF
jyUA/DLS/DAUCoVCWZ3h9cGHbhuQAKwwPpYAEARBEPoNCcAKgwSAIAiC+BiQAKwwSAAIgiCIjwEJ
wAqDBIAgCIL4GJAArDB+iADwEARBEIQ2JiYmSABWEksVALFYLLz/yf/BFAqFQqG8m8HBQeEvCcAK
YakCMB+JRAwJkwEKhUKhUObDTxKl0mnIZLL36g0SAB3lhwiASDSA7p5e9PT0USgUCmWVp7dXhN6+
pYePMzQ0TFcAVgpLEQD+zxwfn0BDYwtGR8cxNkahUCiU1Z6h4RF24tcPUf/AktLb149GVk+8exWA
BEBHWaoA8I2hh9kgQRAEoR/wj//wt7/mHwL/voinxGhv76IrACuFHyIAXd29ms2CIAiCWO3wrwXy
p/rffdjvw5lEW1snCcBKgQSAIAiC0AYJwCqHBIAgCILQxocEgN8WeLebOiQAKwoSAIIgCEIb2gSA
3+sfGRkRJOB9ESABWFGQABAEQRDaeFcAJBIJBgYGkJWVhYaGBqGdBGAFQwJAEARBaGOhAPAzf175
Z2dno6amBjk5OYIE8B8AIgFYoZAAEARBENpYKAD8bL+1tRW1tbXCe/4ikQjl5eXv3AYgAVhRkAAQ
BEEQ2nj3FsDY2NibCp9fEXj3+QASgBUGCQBBEAShjXcF4N2H/ughwBUOCQBBEAShjXcF4PtDArCi
IAEgCIIgtEECsMohASAIgiC0QQKwyiEBIAiCILRBArDKIQEgCIIgtEECsMohASAIgiC0QQKwyiEB
IAiCILRBArDKIQEgCIIgtEECsMohASAIgiC0QQKwyiEBIAiCILRBArDKIQEgCIIgtEECsMohASAI
giC0QQKwyiEBIAiCILRBArDKIQEgCIIgtEECsMohASAIgiC0QQKwyiEBIAiCILRBArDKIQEgCIIg
tEECsMohASAIgiC0QQKwyiEBIAiCILRBArDKIQEgCIIgtEECsMohASAIgiC0QQKwyiEBIAiCILRB
ArDKIQEgCIIgtEECsMohASAIgiC0QQKwyiEBIAiCILRBArDKIQEgCIIgtEECsMohASAIgiC0QQKw
yiEBIAiCILTxrgDw5qmpKaF5/u/ikACsKEgACIIgCG0sFACJRMIq9zY0NTVBJpNhcHAQVVVVmJyc
JAFYqZAAEARBENpYKAD8jF8kEiErK0uQgLy8PNTU1EAsFpMArFRIAAiCIAhtvHsLgF8F6OvrQ3p6
Oqqrq9+p/EkAVhwkAARBEIQ2tD0EyCt9fvmfNy++/E8CsOIgASAIgiC0oU0AePjtgPcrfx4SgBUF
CQBBEAShjQ8JwIdDArCiIAEgCIIgtEECsMr5IQLQ3tEFlUrFMkuhUCiUVR6pTPaDBGB8fALNzW0k
ACuFpQqAWCxBc0sbWlvbmeF1UCgUCmXVpxNt7UsPryM6OruF3wlYWIeQAOgoSxGA+cjZP5XLAIVC
oVAo2vJu5c9DAqCj/BABoFAoFArlh4YEQEchAaBQKBTKcoYEQEchAXg//BKWQqEQnoClLE94+fLL
hdrKn/JxwsuXtuPlDS9fbZe8KYtDAqCjkAAsDt+pBwYGUFtbi/r6etTV1VE+cubLdWxsjA6eyxRe
rvzp7YXlTfm44eXKjxP9/f3CcUPb/4GiDgmAjkICsDjc6FtbW4UdfHh4WPjJS8rHDS/XyspK4cMi
dOBcnvBy5RVTRUUFbcfLlKGhIUECWlpahOOGtv8DRR0SAB2FBGBx+I7MP3nZ0dGh+SkMYjlobGwk
AVjGzAsAF1li+ejq6hJOGEgAvjskADoKCcDizAtAe3u7ZhcnloOGhgYSgGUMCcCnobOzkwRgCSEB
0FFIABaHBODTQAKwvCEB+DSQACwtJAA6CgnA4pAAfBpIAJY3JACfBhKApYUEQEchAVicTyUAM0ol
ZlSs4PUUEoDlzUoQgFnVDKsYlFDNzmq6vGVuTv1b9LoOCcDSQgKgo5AALM5yC8DMVC+unLfA5q1b
sWmrAZJL2zR9fggqVFYUQarStH4HAReu4VVln6ZNATfXSyjvnNS0/3SQACxvdF0AAq6expr1G7GV
7Qc3Qp9pur6lu+I1vL3jhebGmmIMiRVCs65BArC0kADoKCQAi7OsAqCYgsXBzbC+E4qh0VEMirrQ
0jcM1cwM5tjZzujoiGZAGasc+zXNakYHRRgcnRKaJT0V2LlnJwpbBpkKqOnnlakWIbi42xgJr+cl
Qw7TE3uRWa+ej3xqBKJ+Ng3NhQiVbJy1j6pbGDMzs1DKpRgd//jCQAKwvNF1Abh4/ACSCzvZNjYD
hVKJ8XH1ts2RTk9iWiLBxLiYHZdGcfTgNsS8qoNUuQTj/cSQACwtJAA6CgnA4iynADRkPsDB046a
tre8DvPHwR37cMbWFg11lTA/YoD9+wxge/Ue5LNAfW48TI4dwe4dO5CSW4VnYdfxN//9/8X6IxYQ
TYzj3uWz2L1/P/YeNEVTn1gzVTVXD53C47z5VxrlsDY/gpJeOZqLXmD//l3YtWMPyvum0VmSCcPd
27F3pwHuhjwVhr57yhx7D+zDFY9gof1jQgKwvNF1Abh6Zh8uezzAkydP0DEwikd3neH/uBLivlLY
3PRCc8kruF4OQ/HrOPz93/4N/vStAXJbhjRj6w4kAEsLCYCOQgKwOMspANmPbuLi7VBN21se3zqP
fUcvg5+IXzPfhiPnPVBWWoCNX36Gx1WDGOutxZOkSJjsXouvjByAuSmYnD4Ofq5e8dgNn2/ch4LS
Mlw6uQ2nbjwQpjmP84HTeFrQpWlTwsbSCFWDs3h0wwT7rdwwJpGz7jIc3fknON1/jOK8J/j8L1+i
a0oK6w1r4Z9Soh71I0MCsLzReQE4uR2b9xjB1NQUGRXtUE104+yZo7CwPI/SjlH0F6Xg+EEXYVgb
C2O8bh4TmnUNEoClhQRARyEBWJzlFIDOkgRsMTwhVPQLSbztglueL4Tms3v/DIMjp2BmZg4z07Mo
a+vCzbPGuOgZjOj71/DViQusHh+FselJ8Eek0gNs8buvNsHczAyWlubwe/xamM48Tof3IjKrRdM2
ixOHdqCoWwbMSBDudwtHTaxQVF6FA+t/g6NsfmbmFjhldxl905O4vP8MClvfXpr9mJAALG90XgDM
T6FyUNOiwdtyC/7pz8ZCc+frRJwxvik0W5oZoVSke5f/OSQASwsJgI5CArA4yykA/BL8teN7sOmA
ORITExEV8QB5rT14essZF67GCkNEeV7EQYsrSE9PR0p6PmYme7B37bcISn6BUJcz+M2Bs6wel2H7
t1/CLfw5GgqfwGDfETZsOp6mPEPnwOL79fkJXvjjF9sRl5AAdydTbDGyg2RmDiVZz/AyIwPmBpvh
+eAZ7t+wgdUNf2G+aTmVbEwFzNfuQ2bt/HMJHxcSgOWNrguAw+HNsGPbG98PCsoakJccDGtnHwTc
dcD1B2noKXqCwwaXhGEtD2zDyUte6BmbFtp1CRKApYUEQEchAVic5RQAlWoOc4opRPrcxunTp2F1
/hJaB0bRVvga2bn1moFkCL17jZ3NW8I35oVwtaChOBUWFlaIjE1CbEaOMFhFagwsrJ0wzptfxsGC
De9w0xtDU+zs/h3SEwKF/o7O7hicnhG6VWUnCt3c/CIxzU6uZqUjcLtkL8w3LosLAJAWmYTOIanQ
/LEhAVje6LIAqFQqpMXcg5npGWE/8AmMRXxCFBoH2LarGEJYdCy6WprwNPGVMHxv5WucZdtladfb
B1R1BRKApYUEQEchAVic5RSAzMxMPHwUgaTHj/Hs2TM8ffIEkeGPMDI+oRlCfyABWN7osgDwL+jF
JSQL+wBPUmIcevtEmr4rCxKApYUEQEchAVic5RQA4i0kAMsbXRaA1QQJwNJCAqCjkAAsDgnAp4EE
YHlDAvBpIAFYWkgAdBQSgMUhAfg0kAAsb0gAPg0kAEsLCYCOQgKwOPMCwHdsYvlobGwkAVjGzAtA
fb3m4VJiWeju7iYBWEJIAHQUEoDFmReAsrIyYcdubm6mfOS0tLSgpKREqKBIAJYnvFwHBgZQXFws
lLe2/wPlx4WXa3l5OQnAEkICoKOQACyOlJXD+Pg4urq6KMsYfuY0NTUllLe2/wPlx4WXKy9fXs7a
yp/y8TI2Nkbb8feEBEBHIQF4P3xn5kZPWd7QQXN5Q9vxp4lMJtNa/pS3IQHQUUgAKBQKhbKcIQHQ
UUgAKBQKhbKcIQHQUUgAKBQKhbKcIQHQUUgAKBQKhbKcIQHQUUgAKBQKhbKcIQHQUUgAKBQKhbKc
IQHQUUgAKBQKhbKcIQHQUUgAKBQKhbKcIQHQUUgAKBQKhbKcIQHQUUgAKBQKhbKcIQHQUUgAKBQK
hbKcIQHQUUgAKBQKhbKcIQHQUbzvBcWz+h+qGZXwT6JQKBQK5WOG09Y7TAKga9y85ZYqGp1CM7Mz
bmgUCoVCoXzMtPWOoKK2hQSAIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAgd4j/8h/8fDPMg+87jhlQA
AAAASUVORK5CYII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Get-DictionaryPassword
{
	$Dictionary = @(
		"Honda";
		"Staple";
		"Battery";
		"Civic";
		"Chicago";
		"Winter";
		"Cubs";
		"Bears";
		"Snow";
		"Train";
		"Shoes";
		"Blue";
		"Bike";
		"Ring";
		"Watch";
		"Computer";
		"Neck";
		"Laptop";
		"Monitor";
		"Toilet";
		"Baseball";
		"Football";
		"Soccer";
		"Phone";
		"Carbondale";
		"Saluki";
		"Swim";
		"Lake";
		"Puppy";
		"Watch";
		"Royals";
		"Basketball";
		"Letter";
		"Paper";
		"Sticker";
		"Kitten";
		"Marker";
		"Highway";
		"Wire";
		"Keyboard";
		"Frisbee";
		"Disc";
		"Hawk";
		"West";
		"North";
		"East";
		"South";
		"Water";
		"Ice";
		"Dirt";
		"Taco";
		"Mouse";
		"Deer";
		"Speaker";
		"Hand";
		"Green";
		"Purple";
		"Pink";
		"Boat";
		"Toilet";
		"Sting";
		"Fish";
		"Bee";
		"White";
		"Grey";
		"Shoes";
		"Carpet";
		"Bed";
		"Pillow";
		"Sears";
		"Mustard";
		"Relish";
		"Ketchup";
		"Milk";
		"Apple";
		"Orange";
		"Flower";
		"Lotion";
		"Plane";
		"Desert";
		"Sand";
		"Beach";
		"Clouds";
		"Wagon";
		"Hair";
		"Internet";
		"Track";
		"Golf";
		"Sledding";
		"Market";
		"Window";
		"Door";
		"Deck";
		"Cards";
		"Shelf";
		"Santa";
		"Tack";
		"Building";
		"Tennis";
		"Power";
		"Sox";
		"Wrigley";
		"Tea";
		"Juice";
		"Plant";
		"Geneva";
		"City";
		"Kansas";
		"Missouri";
		"Midwest";
		"Great";
		"Box";
		"Crane";
		"Michigan";
		"Illinois";
		"Garbage";
		"Cougars";
		"Route";
		"Bridge";
		"Mountain";
		"Message";
		"Fire";
		"Taxi";
		"Bus";
		"Color";
		"Sharpie";
		"Ball";
		"Square";
		"River";
		"Navy";
		"Pier";
		"Grant";
		"Park";
		"Lincoln";
		"President";
		"Wrigley";
		"Soldier";
		"Forest";
		"Bulldog";
		"Police";
		"Taco";
		"Deep";
		"Dish";
		"Pizza";
		"Fire";
		"Ice";
		"Lion";
		"World";
		"Shoe";
		"Ant";
		"Bug";
		"Hair";
		"Beard";
		"Light";
		"Wave";
		"Field";
		"Toll";
		"Tax";
		"Money";
		"Bill";
		"Pot";
		"Pan"
	)
	
	$word1 = (Get-Random $Dictionary)
	
	$word2 = (Get-Random $Dictionary | Where-Object { $_ -ne $word1 })
	
	$Word3 = (Get-Random $Dictionary | Where-Object { ($_ -ne $word1) -and ($_ -ne $word2) })
	
	$Num = Get-random -Maximum 99 -Minimum 0
	
	$Word1 + "-" + $word2 + "-" + $word3 + $Num
	
}

function Reset-Form
{
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	$comboboxOUTree.SelectedText = ""
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunADSync.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	$comboboxMFA.SelectedItem = "False"
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""
	$textboxo365city.Text = ""
	$textboxo365state.Text = ""
	$textboxo365zip.Text = ""
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

function Update-DisplayNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatDisplayName -ErrorAction SilentlyContinue).UserFormatDisplayName
		#Create an array that we will use for formatting
		$DisplayNameFormatString = @()
		If ($null -eq $config)
		{
			$config = "%Firstname% %LastName%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatDisplayName -Value "%FirstName% %LastName%" -Force | Out-Null
			
		}
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text
			}
			ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
			{
				$DisplayNameFormatString += $textboxInitials.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$DisplayNameFormatString += $space
			}
			ElseIf ($_ -eq "EmployeeID")
			{
				$DisplayNameFormatString += $textboxEmployeeID.text
			}
			ElseIf ($_ -eq "EmployeeNumber")
			{
				$DisplayNameFormatString += $textboxemployeenumber.text
			}
			ELseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.text
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$DisplayNameFormatString += $textboxUserLogonName.text
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$DisplayNameFormatString += $textboxEmail.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.Text
			}
			Else
			{
				$DisplayNameFormatString += $_
			}
			
		}
		$textboxDisplayName.Text = [String]::Join('', $DisplayNameFormatString)
		
	}
	
	
}

function Update-EmailTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatEmail -ErrorAction SilentlyContinue).UserFormatEmail
		#Create an array that we will use for formatting
		$EmailFormatString = @()
		If ($null -ne $config)
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$EmailFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$EmailFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$EmailFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$EmailFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$EmailFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$EmailFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$EmailFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$EmailFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$EmailFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$EmailFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$EmailFormatString += $_
				}
				
			}
			$textboxEmail.Text = [String]::Join('', $EmailFormatString)
		}
	}
}

function Update-SamAccountNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatSamAccountName -ErrorAction SilentlyContinue).UserFormatSamAccountName
		#Create an array that we will use for formatting
		$SamAccountNameFormatString = @()
		If ($null -ne $config)
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$SamAccountNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$SamAccountNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$SamAccountNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$SamAccountNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$SamAccountNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$SamAccountNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$SamAccountNameFormatString += $_
				}
				
			}
			$textboxSamAccount.Text = [String]::Join('', $SamAccountNameFormatString)
		}
	}
}

function Update-UserPrincipalNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatUserPrincipalName -ErrorAction SilentlyContinue).UserFormatUserPrincipalName
		#Create an array that we will use for formatting
		$UserPrincipalNameFormatString = @()
		If ($null -ne $config)
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$UserPrincipalNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$UserPrincipalNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$UserPrincipalNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$UserPrincipalNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$UserPrincipalNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$UserPrincipalNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$UserPrincipalNameFormatString += $_
				}
				
			}
			$textboxUserLogonName.Text = [String]::Join('', $UserPrincipalNameFormatString)
		}
	}
}

function Set-DarkMode
{
	$labelCountryCode.ForeColor = 'White'
	$contextmenustrip1.BackColor = "44,44,44"
	$contextmenustrip1.ForeColor = 'White'
	$MainForm.BackColor = "44,44,44"
	$MainForm.ForeColor = 'White'
	
	$labelLogFile.BackColor = "44,44,44"
	$labelLogFile.ForeColor = 'White'
	
	$labelconnectionstatus.ForeColor = 'LightCoral'
	
	
	$richtextboxregistry.ForeColor = 'White'
	$richtextboxregistry.BackColor = "44,44,44"
	
	$groupboxStatus.ForeColor = 'White'
	
	
	$tabpageSettings.BackColor = "44,44,44"
	$tabpageSettings.ForeColor = 'White'
	$groupboxADGroups.ForeColor = 'White'
	
	$menustrip1.BackColor = "44,44,44"
	$menustrip1.ForeColor = 'White'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "44,44,44"
					$_.ForeColor = 'White'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'White'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "44,44,44"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'White'
	$copyOffice365UserToolStripMenuItem.BackColor = "44,44,44"
	
	
	$groupboxInformation.ForeColor = 'White'
	$linklabelBradWyatt.LinkColor = 'DeepSkyBlue'
	$linklabelGitHub.LinkColor = 'DeepSkyBlue'
	$labelChangelog.ForeColor = 'DeepSkyBlue'
	
	$console.BackColor = "35,35,35"
	$console.ForeColor = 'White'
	
	$buttonExit.ForeColor = "white"
	$buttonExit.BackColor = "35,35,35"
	
	$buttonCreateUser.ForeColor = "white"
	$buttonCreateUser.BackColor = "35,35,35"
	
	$groupboxADUser.ForeColor = 'White'
	$groupboxADUser.BackColor = "44,44,44"
	
	$groupbox2FA.ForeColor = 'White'
	$groupboxOffice365User.ForeColor = 'White'
	
	$tabcontrolUserProperties.ForeColor = 'White'
	$tabcontrolUserProperties.BackColor = "44,44,44"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
		

	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
	}
	
	#GENERAL PAGE
	$panel1.BackColor = "35,35,35"
	$labelDisplayName.ForeColor = 'LightCoral'
	$labelPassword.ForeColor = 'LightCoral'
	$labelConfirmPassword.ForeColor = 'LightCoral'

	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
				$_.BackColor = "35,35,35"
				$_.ForeColor = 'White'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'White'
	$buttonGeneratePassword.BackColor = '44,44,44'
	$buttonClear.ForeColor = 'White'
	$buttonClear.BackColor = '44,44,44'
	
	$textboxPasswordGen.ForeColor = 'White'
	$textboxPasswordGen.BackColor = '35,35,35'
	$maskedtextboxpassword.ForeColor = 'White'
	$maskedtextboxpassword.BackColor = '44,44,44'
	$textboxConfirmPassword.BackColor = '44,44,44'
	$textboxConfirmPassword.ForeColor = 'White'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Flat'
	$comboboxDomains.ForeColor = 'White'
	$comboboxDomains.BackColor = "35,35,35"
	
	$comboboxOUTree.FlatStyle = 'Flat'
	$comboboxOUTree.ForeColor = 'White'
	$comboboxOUTree.BackColor = "35,35,35"
	
	$panel2.ForeColor = 'White'
	$Panel2.BackColor = "35,35,35"
	
	$datetimepickerDATE.ForeColor = 'White'
	$datetimepickerDATE.CalendarMonthBackground = "35,35,35"
	
	$datetimepickerTIME.ForeColor = 'White'
	$datetimepickerTIME.BackColor = "35,35,35"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "44,44,44"
	
	$groupboxaccountexpires.ForeColor = 'White'
	$labelUserLogonNameUPN.ForeColor = 'LightCoral'
	$labelUserLogonNamepreWind.ForeColor = 'White'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'White'
	$checkedlistboxGroups.BackColor = "35,35,35"
	$textboxPOSIX.ForeColor = 'White'
	$textboxPOSIX.BackColor = "44,44,44"
	
	$textboxSearchGroups.ForeColor = 'White'
	$textboxSearchGroups.BackColor = "35,35,35"
	
	$comboboxPrimaryGroup.FlatStyle = 'Flat'
	$comboboxPrimaryGroup.ForeColor = 'White'
	$comboboxPrimaryGroup.BackColor = "35,35,35"
	
	$groupboxPrimaryGroup.ForeColor = 'White'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'White'
	$groupboxHomeFolder.ForeColor = 'White'
	$comboboxDriveLetter.FlatStyle = 'Flat'
	$comboboxDriveLetter.ForeColor = 'White'
	$comboboxDriveLetter.BackColor = "35,35,35"
	$textboxhomedirectory.ForeColor = 'White'
	$textboxhomedirectory.BackColor = "35,35,35"
	$textboxprofilepath.ForeColor = 'White'
	$textboxprofilepath.BackColor = "35,35,35"
	$textboxlogonscript.ForeColor = 'White'
	$textboxlogonscript.BackColor = "35,35,35"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "44,44,44"
	$tabcontrolO365.ForeColor = 'White'
	$textboxADSyncServer.ForeColor = 'White'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365userpassword.ForeColor = 'LightCoral'
	$labelO365userconfirmpassword.ForeColor = 'LightCoral'
	$labelO365DisplayName.ForeColor = 'LightCoral'
	$tabpageO365General.BackColor = "44,44,44"
	$groupboxADSync.ForeColor = 'White'
	$textboxADSyncServer.BackColor = "35,35,35"
	$groupboxNoAdSync.ForeColor = 'White'
	$comboboxO365Licenses.FlatStyle = 'Flat'
	$comboboxO365Licenses.BackColor = "35,35,35"
	$comboboxO365Licenses.ForeColor = 'White'
	$panel3.ForeColor = 'White'
	$panel3.BackColor = "35,35,35"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$textboxo365passwordgen.BackColor = "44,44,44"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Lightcoral'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'White'
	$tabpageO365Account.BackColor = "44,44,44"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'LightCoral'
	$panel4.ForeColor = 'White'
	$panel4.BackColor = "35,35,35"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{

			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.BackColor = "44,44,44"
	$tabpageO365Address.ForeColor = 'White'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'White'
	$tabpageO365Groups.BackColor = "44,44,44"
	$labelO365Groups.ForeColor = 'White'
	$labelO365Groups.BackColor = "44,44,44"
	$checkedlistboxDISTROo365groups.ForeColor = 'White'
	$checkedlistboxDISTROo365groups.BackColor = "35,35,35"
	$labelSearch.ForeColor = 'White'
	$textboxO365MailGroups.ForeColor = 'White'
	$textboxO365MailGroups.BackColor = "35,35,35"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'White'
	$labelSecurityGroups.BackColor = "44,44,44"
	$checkedlistboxO365SecurityGroups.ForeColor = 'White'
	$checkedlistboxO365SecurityGroups.BackColor = "35,35,35"
	$labelSearchGroups2.ForeColor = 'White'
	$labelSearchGroups2.BackColor = "44,44,44"
	$textboxSearchO365SecurityGroups.ForeColor = 'White'
	$textboxSearchO365SecurityGroups.BackColor = "35,35,35"
	$tabpagesecurityGroups.BackColor = "44,44,44"
	$tabpagesecurityGroups.ForeColor = 'White'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'White'
	$labelsharedmailboxes.BackColor = "44,44,44"
	$tabpageo365shared.ForeColor = 'White'
	$tabpageo365shared.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.ForeColor = 'White'
	$groupboxSettingsSharedMailbox.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'White'
	$checkedlistboxsharedmailboxes.BackColor = "35,35,35"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "White"
	$tabpageO365Attributes.BackColor = "44,44,44"
	$comboboxO365HidefromGAL.FlatStyle = 'Flat'
	$comboboxO365HidefromGAL.ForeColor = 'White'
	$comboboxO365HidefromGAL.BackColor = "35,35,35"
	
	
	
}

function Set-LightMode
{
	$labelCountryCode.ForeColor = 'Black'
	$contextmenustrip1.BackColor = "WhiteSmoke"
	$contextmenustrip1.ForeColor = 'Black'
	$MainForm.BackColor = "WhiteSmoke"
	$MainForm.ForeColor = 'Black'
	
	$labelLogFile.BackColor = "White"
	$labelLogFile.ForeColor = 'Black'
	
	$labelconnectionstatus.ForeColor = 'FireBrick'
	
	$richtextboxregistry.ForeColor = 'Black'
	$richtextboxregistry.BackColor = "White"
	
	$groupboxStatus.ForeColor = 'Black'
	
	
	$tabpageSettings.BackColor = "White"
	$tabpageSettings.ForeColor = 'Black'
	$groupboxADGroups.ForeColor = 'Black'
	
	$menustrip1.BackColor = "White"
	$menustrip1.ForeColor = 'Black'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "White"
					$_.ForeColor = 'Black'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'Black'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "White"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'Black'
	$copyOffice365UserToolStripMenuItem.BackColor = "White"
	
	
	$groupboxInformation.ForeColor = 'Black'
	$linklabelBradWyatt.LinkColor = '0, 0, 255'
	$linklabelGitHub.LinkColor = '0, 0, 255'
	$labelChangelog.ForeColor = '0, 0, 255'
	
	$console.BackColor = "White"
	$console.ForeColor = 'Black'
	
	$buttonExit.ForeColor = "Black"
	$buttonExit.BackColor = "White"
	
	$buttonCreateUser.ForeColor = "Black"
	$buttonCreateUser.BackColor = "White"
	
	$groupboxADUser.ForeColor = 'Black'
	$groupboxADUser.BackColor = "White"
	
	$groupbox2FA.ForeColor = 'Black'
	$groupboxOffice365User.ForeColor = 'Black'
	
	$tabcontrolUserProperties.ForeColor = 'Black'
	$tabcontrolUserProperties.BackColor = "White"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
		
		
	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
	}
	
	#GENERAL PAGE
	$panel1.BackColor = "MenuBar"
	$labelDisplayName.ForeColor = 'FireBrick'
	$labelPassword.ForeColor = 'FireBrick'
	$labelConfirmPassword.ForeColor = 'FireBrick'
	
	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'Black'
	$buttonGeneratePassword.BackColor = 'White'
	$buttonClear.ForeColor = 'Black'
	$buttonClear.BackColor = 'White'
	
	$textboxPasswordGen.ForeColor = 'Black'
	$textboxPasswordGen.BackColor = 'White'
	$maskedtextboxpassword.ForeColor = 'Black'
	$maskedtextboxpassword.BackColor = 'White'
	$textboxConfirmPassword.BackColor = 'White'
	$textboxConfirmPassword.ForeColor = 'Black'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Standard'
	$comboboxDomains.ForeColor = 'Black'
	$comboboxDomains.BackColor = "Window"
	
	$comboboxOUTree.FlatStyle = 'Standard'
	$comboboxOUTree.ForeColor = 'Black'
	$comboboxOUTree.BackColor = "Window"
	
	$panel2.ForeColor = 'Black'
	$Panel2.BackColor = "MenuBar"
	
	$datetimepickerDATE.ForeColor = 'Black'
	$datetimepickerDATE.CalendarMonthBackground = "White"
	
	$datetimepickerTIME.ForeColor = 'Black'
	$datetimepickerTIME.BackColor = "White"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "White"
	
	$groupboxaccountexpires.ForeColor = 'Black'
	$labelUserLogonNameUPN.ForeColor = 'FireBrick'
	$labelUserLogonNamepreWind.ForeColor = 'Black'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'Black'
	$checkedlistboxGroups.BackColor = "White"
	$textboxPOSIX.ForeColor = 'Black'
	$textboxPOSIX.BackColor = "White"
	
	$textboxSearchGroups.ForeColor = 'Black'
	$textboxSearchGroups.BackColor = "White"
	
	$comboboxPrimaryGroup.FlatStyle = 'Standard'
	$comboboxPrimaryGroup.ForeColor = 'Black'
	$comboboxPrimaryGroup.BackColor = "Window"
	
	$groupboxPrimaryGroup.ForeColor = 'Black'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'Black'
	$groupboxHomeFolder.ForeColor = 'Black'
	$comboboxDriveLetter.FlatStyle = 'Standard'
	$comboboxDriveLetter.ForeColor = 'Black'
	$comboboxDriveLetter.BackColor = "Window"
	$textboxhomedirectory.ForeColor = 'Black'
	$textboxhomedirectory.BackColor = "White"
	$textboxprofilepath.ForeColor = 'Black'
	$textboxprofilepath.BackColor = "White"
	$textboxlogonscript.ForeColor = 'Black'
	$textboxlogonscript.BackColor = "White"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "White"
	$tabcontrolO365.ForeColor = 'Black'
	$textboxADSyncServer.ForeColor = 'Black'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365userpassword.ForeColor = 'FireBrick'
	$labelO365userconfirmpassword.ForeColor = 'FireBrick'
	$labelO365DisplayName.ForeColor = 'FireBrick'
	$tabpageO365General.BackColor = "White"
	$groupboxADSync.ForeColor = 'Black'
	$textboxADSyncServer.BackColor = "White"
	$groupboxNoAdSync.ForeColor = 'Black'
	$comboboxO365Licenses.FlatStyle = 'Standard'
	$comboboxO365Licenses.BackColor = "Window"
	$comboboxO365Licenses.ForeColor = 'Black'
	$panel3.ForeColor = 'Black'
	$panel3.BackColor = "MenuBar"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$textboxo365passwordgen.BackColor = "White"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'Black'
	$tabpageO365Account.BackColor = "White"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'FireBrick'
	$panel4.ForeColor = 'Black'
	$panel4.BackColor = "MenuBar"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.BackColor = "White"
	$tabpageO365Address.ForeColor = 'Black'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'Black'
	$tabpageO365Groups.BackColor = "White"
	$labelO365Groups.ForeColor = 'Black'
	$labelO365Groups.BackColor = "White"
	$checkedlistboxDISTROo365groups.ForeColor = 'Black'
	$checkedlistboxDISTROo365groups.BackColor = "White"
	$labelSearch.ForeColor = 'Black'
	$textboxO365MailGroups.ForeColor = 'Black'
	$textboxO365MailGroups.BackColor = "White"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'Black'
	$labelSecurityGroups.BackColor = "White"
	$checkedlistboxO365SecurityGroups.ForeColor = 'Black'
	$checkedlistboxO365SecurityGroups.BackColor = "White"
	$labelSearchGroups2.ForeColor = 'Black'
	$labelSearchGroups2.BackColor = "White"
	$textboxSearchO365SecurityGroups.ForeColor = 'Black'
	$textboxSearchO365SecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.ForeColor = 'Black'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'Black'
	$labelsharedmailboxes.BackColor = "White"
	$tabpageo365shared.ForeColor = 'Black'
	$tabpageo365shared.BackColor = "White"
	$groupboxSettingsSharedMailbox.ForeColor = 'Black'
	$groupboxSettingsSharedMailbox.BackColor = "White"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'Black'
	$checkedlistboxsharedmailboxes.BackColor = "White"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "Black"
	$tabpageO365Attributes.BackColor = "White"
	$comboboxO365HidefromGAL.FlatStyle = 'Standard'
	$comboboxO365HidefromGAL.ForeColor = 'Black'
	$comboboxO365HidefromGAL.BackColor = "Window"
	
}

function Copy-ADUserAttributes
{
	
	$textboxDescription.Text = $UserTemplate.Description
	$textboxoffice.Text = $UserTemplate.Office
	$textboxTelephone.Text = $UserTemplate.OfficePhone
	$textboxEmail.Text = $UserTemplate.EmailAddress
	$textboxWebPage.Text = $UserTemplate.HomePage
}

#endregion

$MainForm_Load = {
	$MFALogin = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name MFALogin -ErrorAction SilentlyContinue).MFALogin
	If ($MFALogin -eq 1)
	{
		$radiobuttonMFALogin.Checked = $true
	}
	Else
	{
		$radiobuttonNonMFALogin.Checked = $true
	}
	

	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		#Set-LightMode
		
	}
	
	
}

$MainForm_DuringShow = {
	
	Import-Module ActiveDirectory -ErrorAction SilentlyContinue
	Import-Module ADSync -ErrorAction SilentlyContinue
	
	#DEBUG
	$tabcontrolUserProperties.Enabled = $true
	$groupboxNoAdSync.Enabled = $true
	
	
	$textboxADSyncServer.Enabled = $false
	
	$datetimepickerDATE.Refresh()
	
	$radiobuttonNever.Checked = $true
	$datetimepickerDATE.Enabled = $false
	$datetimepickerTIME.Enabled = $false
	
	$datetimepickerTIME.Text = "05:00 PM"
	
	$MainForm.MaximizeBox = $false
	
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1
	#DEBUG
	#$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	#$comboboxO365Licenses.Enabled = $False
	$comboboxO365Licenses.Text = "Please connect to Office 365 to assign a license"
	
	#DEBUG
	#$tabcontrolUserProperties.Enabled = $false
	
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	
	$comboboxO365HidefromGAL.SelectedItem = "False"
	
	$labelTimeLeft.Text = ""
	
	$global:ExternalLog = "$env:TEMP\MUC.txt"
	$labelLogFile.Text = $global:ExternalLog
	
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items "Domain Users"
	$comboboxPrimaryGroup.SelectedItem = "Domain Users"
	
	$AlwaysADCreate = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysADCreate -ErrorAction SilentlyContinue).AlwaysADCreate
	If ($AlwaysADCreate -eq 1)
	{
		$checkboxCreateAnActiveDirect.Checked = $true
	}
	
	$AlwaysO365Create = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysO365Create -ErrorAction SilentlyContinue).AlwaysO365Create
	If ($AlwaysO365Create -eq 1)
	{
		$checkboxconfigo365user.Checked = $true
	}
}

$resetFormToolStripMenuItem_Click = {
	Reset-Form
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateAnActiveDirect.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
				
					
					add-logs -text "LOG: Getting user employeeType attribute to set"
					If ($null -ne $textboxemployeeType.text)
					{
						add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
						Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
					}
					Else
					{
						add-logs -text "LOG: No employeeType to add"
					}
					add-logs -text "LOG: Done with employeeType"
					
					add-logs -text "LOG: Getting user employeeNumber attribute to set"
					If ($null -ne $textboxemployeenumber.text)
					{
						add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
						Set-ADUser $User -Add @{ EmployeeNumber = $textboxemployeenumber.text }
					}
					Else
					{
						add-logs -text "LOG: No employeeNumber to add"
					}
					add-logs -text "LOG: Done with employeeNumber"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
					
					Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
					If ($comboboxPrimaryGroup.Text -eq "Domain Users")
					{
						Add-Logs -text "LOG: Primary Group set to Domain Users"
					}
					Else
					{
						$PrimaryGroup = $comboboxPrimaryGroup.Text
						Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
						Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
						$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
						Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
						Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
					}
					Add-Logs -text "LOG: Done"
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					add-logs -text "LOG: Getting user employeeType attribute to set"
					If ($null -ne $textboxemployeeType.text)
					{
						add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
						Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
					}
					Else
					{
						add-logs -text "LOG: No employeeType to add"
					}
					add-logs -text "LOG: Done with employeeType"
					
					add-logs -text "LOG: Getting user employeeNumber attribute to set"
					If ($null -ne $textboxemployeenumber.text)
					{
						add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
						Set-ADUser $User -Add @{ EmployeeNumber = $textboxemployeenumber.text }
					}
					Else
					{
						add-logs -text "LOG: No employeeNumber to add"
					}
					add-logs -text "LOG: Done with employeeNumber"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
					
					Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
					If ($comboboxPrimaryGroup.Text -eq "Domain Users")
					{
						Add-Logs -text "LOG: Primary Group set to Domain Users"
					}
					Else
					{
						$PrimaryGroup = $comboboxPrimaryGroup.Text
						Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
						Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
						$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
						Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
						Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
					}
					Add-Logs -text "LOG: Done"
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunADSync.CheckState -eq 'Checked')
		{
			If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$SyncServer = $textboxADSyncServer.text
				add-logs -text 'LOG: DirSync Enabled'
				add-logs -text "LOG: Running DirSync on $SyncServer"
				add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
				Try
				{
					Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
				}
				Catch
				{
					add-logs -text "WARN: $_"
					Add-Type -AssemblyName System.Windows.Forms
					[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
				}
				add-logs -text 'LOG: Done'
			}
			Else
			{
				add-logs -text "WARN: ADSync Server text box is empty"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
			}
		}
		#If DirSync is not enabled
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				
				#User is going to be disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										If ($Automap -eq "False")
										{
											Add-Logs -text "LOG: AutoMapping set to False"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
										}
										Else
										{
											Add-Logs -text "LOG: AutoMapping set to True"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
										}
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										If ($Automap -eq "False")
										{
											Add-Logs -text "LOG: AutoMapping set to False"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
										}
										Else
										{
											Add-Logs -text "LOG: AutoMapping set to True"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
										}
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
		
		#### ACTIVE DIRECTORY USER CREATION PORTION ####
		
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					add-logs -text "LOG: Getting user employeeType attribute to set"
					If ($null -ne $textboxemployeeType.text)
					{
						add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
						Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
					}
					Else
					{
						add-logs -text "LOG: No employeeType to add"
					}
					add-logs -text "LOG: Done with employeeType"
					
					add-logs -text "LOG: Getting user employeeNumber attribute to set"
					If ($null -ne $textboxemployeenumber.text)
					{
						add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
						Set-ADUser $User -Add @{ EmployeeNumber = $textboxemployeenumber.text }
					}
					Else
					{
						add-logs -text "LOG: No employeeNumber to add"
					}
					add-logs -text "LOG: Done with employeeNumber"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
					
					Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
					If ($comboboxPrimaryGroup.Text -eq "Domain Users")
					{
						Add-Logs -text "LOG: Primary Group set to Domain Users"
					}
					Else
					{
						$PrimaryGroup = $comboboxPrimaryGroup.Text
						Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
						Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
						$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
						Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
						Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
					}
					Add-Logs -text "LOG: Done"
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					add-logs -text "LOG: Getting user employeeType attribute to set"
					If ($null -ne $textboxemployeeType.text)
					{
						add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
						Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
					}
					Else
					{
						add-logs -text "LOG: No employeeType to add"
					}
					add-logs -text "LOG: Done with employeeType"
					
					add-logs -text "LOG: Getting user employeeNumber attribute to set"
					If ($null -ne $textboxemployeenumber.text)
					{
						add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
						Set-ADUser $User -Add @{ EmployeeNumber = $textboxemployeenumber.text }
					}
					Else
					{
						add-logs -text "LOG: No employeeNumber to add"
					}
					add-logs -text "LOG: Done with employeeNumber"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
					
					Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
					If ($comboboxPrimaryGroup.Text -eq "Domain Users")
					{
						Add-Logs -text "LOG: Primary Group set to Domain Users"
					}
					Else
					{
						$PrimaryGroup = $comboboxPrimaryGroup.Text
						Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
						Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
						$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
						Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
						Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
					}
					Add-Logs -text "LOG: Done"
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
		
		
		#### OFFICE 365 USER CREATION PORTION ####
		
		
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunADSync.CheckState -eq 'Checked')
		{
			If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$SyncServer = $textboxADSyncServer.text
				add-logs -text 'LOG: DirSync Enabled'
				add-logs -text "LOG: Running DirSync on $SyncServer"
				add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
				Try
				{
					Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
				}
				Catch
				{
					add-logs -text "WARN: $_"
					Add-Type -AssemblyName System.Windows.Forms
					[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
				}
				add-logs -text 'LOG: Done'
			}
			Else
			{
				add-logs -text "WARN: ADSync Server text box is empty"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
			}
		}
		#If DirSync is not enabled
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				
				#User is going to be disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										If ($Automap -eq "False")
										{
											Add-Logs -text "LOG: AutoMapping set to False"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
										}
										Else
										{
											Add-Logs -text "LOG: AutoMapping set to True"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
										}
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										If ($Automap -eq "False")
										{
											Add-Logs -text "LOG: AutoMapping set to False"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
										}
										Else
										{
											Add-Logs -text "LOG: AutoMapping set to True"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
										}
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
	
	$ResetForm = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ResetForm -ErrorAction SilentlyContinue).ResetForm
	If ($ResetForm -eq 1)
	{
		Reset-Form
	}
}


$textboxDisplayName_TextChanged = {
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'White'
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'Black'
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'Firebrick'
		}
		
	}
	
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxDisplayName_ChangeFocus = {
	$ADDisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDisplayName -ErrorAction SilentlyContinue).ADDisplayName
	If ($ADDisplayName -eq 1)
	{
		$words = $textboxDisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxLastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxLastName_ChangeFocus = {
	$ADLastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADLastName -ErrorAction SilentlyContinue).ADLastName
	If ($ADLastName -eq 1)
	{
		$words = $textboxLastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxLastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxFirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
	
	
		
	
}

$textboxFirstName_ChangeFocus = {
	$ADFirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADFirstName -ErrorAction SilentlyContinue).ADFirstName
	If ($ADFirstName -eq 1)
	{
		$words = $textboxFirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxFirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxInitials_ChangeFocus = {
	$ADInitials = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADInitials -ErrorAction SilentlyContinue).ADInitials
	If ($ADInitials -eq 1)
	{
		$words = $textboxInitials.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxInitials.Text = $TextInfo.ToTitleCase($words)
	}
}


$buttonGeneratePassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword
		$textboxPasswordGen.Text = $Password
		$maskedtextboxpassword.Text = $Password
		$textboxConfirmPassword.text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxpassword.Text = $textboxPasswordGen.Text
		$textboxConfirmPassword.text = $textboxPasswordGen.Text
	}
	
}

$textboxConfirmPassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'White'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Black'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Firebrick'
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}

			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateAnActiveDirect.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = $textboxUserLogonName.text
		$comboboxO365Domains.SelectedItem = $comboboxDomains.SelectedItem
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'White'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Black'
		}
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Firebrick'
		}
		
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonNonMFALogin.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: $((Get-ChildItem -Path $($env:LOCALAPPDATA+"\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse ).FullName|?{$_ -notmatch "_none_"}|select -First 1)'
		$Modules = $((Get-ChildItem -Path $($env:LOCALAPPDATA + "\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse).FullName | Where-Object{ $_ -notmatch "_none_" } | Select-Object -First 1)
		If ($Modules -eq $Null)
		{
			add-logs -text 'WARN: MFA Module was not found'
			$InfoMessage = "Exchange Online MFA Module was not found, please make sure you have downloaded and installed it from your tenant https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/mfa-connect-to-exchange-online-powershell?view=exchange-ps"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		$EXOSession = New-ExoPSSession
		Import-PSSession $EXOSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'MediumSeaGreen'
		}
		Else
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'Green'
		}
		
		
		$Global:O365_Pre_Req++
		#Create just an AD User
		If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD nad O365 User (w/ ADSync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD And O365 User (no Sync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 User no adsync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 user with ADSync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$buttonConnectToOffice365.ForeColor = 'White'
		}
		Else
		{
			$buttonConnectToOffice365.ForeColor = 'Black'
		}
		
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		#add-logs -text 'LOG: Enabling Licenses combobox'
		#add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		#$comboboxO365Licenses.Enabled = $True
		#add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text=""
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		$comboboxO365Licenses.SelectedIndex = 0
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$MailGroups = (Get-MsolGroup | Where-Object { ($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataMailGroups = $MailGroups
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $MailGroups
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$SecurityGroups = (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataSecurityGroups = $SecurityGroups
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $SecurityGroups
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		$comboboxO365HidefromGAL.SelectedItem = "False"
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword
		$textboxo365passwordgen.Text = $Password
		$maskedtextboxo365password.Text = $Password
		$textboxo365confirmpassword.Text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
		$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
		add-logs -text 'LOG: Done'
	}

	
	
}


$checkboxRunADSync_CheckedChanged = {
	If ($checkboxRunADSync.Checked -eq $True)
	{
		$groupboxNoAdSync.Enabled = $false
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
		
		$textboxADSyncServer.Enabled = $true
		
	}
	elseif ($checkboxRunADSync.Checked -eq $false)
	{
		$groupboxNoAdSync.Enabled = $True
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
		
		$textboxADSyncServer.Enabled = $false
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$buttonExit_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged = {
	If ((($textboxO365LastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	ElseIf ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}
$textboxO365LastName_FocusChanged = {
	$O365LastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365LastName -ErrorAction SilentlyContinue).O365LastName
	If ($O365LastName -eq 1)
	{
		$words = $textboxO365LastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365LastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365FirstName_TextChanged = {
	If ((($textboxO365FirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	ElseIf ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365FirstName_FocusChanged = {
	$O365FirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365FirstName -ErrorAction SilentlyContinue).O365FirstName
	If ($O365FirstName -eq 1)
	{
		$words = $textboxO365FirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365FirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365Initials_TextChanged = {
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged = {
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
	If ($Global:ExternalLog -ne $null)
	{
		$console.Text | Out-File $Global:ExternalLog
	}
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		If ($null -ne (Get-Module -ListAvailable -Name "ADSync"))
		{
			add-logs -text 'LOG: DirSync found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Enabling ADSync CheckBox'
		$checkboxRunADSync.Enabled = $True
		add-logs -text 'LOG: Enabling No ADSync Groupbox'
		$groupboxNoAdSync.Enabled = $true
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateAnActiveDirect_CheckedChanged = {
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateAnActiveDirect.Checked -eq $true))
	{
		If ($Null -ne (Get-Module -ListAvailable -Name "ActiveDirectory"))
		{
			add-logs -text 'LOG: Enabling AD User creation'
			$tabcontrolUserProperties.Enabled = $true
			add-logs -text 'LOG: Done'
			
			add-logs -text 'LOG: Loading Organizational Unit Tree'
			add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
			$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName
			If ($null -eq $OUTree)
			{
				$InfoMessage = 'Could not load Organizational Unit structure'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxOUTree.Enabled = $false
			}
			Else
			{
				add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
				Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
				add-logs -text 'LOG: Done'
				$comboboxOUTree.Enabled = $true
			}
			
			add-logs -text 'LOG: Getting Active Directory Groups'
			add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
			$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
			$Global:OriginalData = $Groups
			If ($null -eq $Groups)
			{
				add-logs -text 'WARN: No Active Directory Groups were found'
				$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
				Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting NetBIOS Name'
			add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
			$Netbiosname = (Get-ADDomain).NetBIOSName
			If ($null -eq $Netbiosname)
			{
				add-logs -text 'WARN: No NetBIOS Name was found'
				$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$textboxUPNDomain.Text = "Not Available"
			}
			Else
			{
				$textboxUPNDomain.Text = $Netbiosname + "\"
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting UPN Suffixes'
			add-logs -text 'CMD: $Forest = Get-ADForest'
			$Forest = Get-ADForest
			If ($null -eq $Forest)
			{
				add-logs -text 'WARN: No Active Directory Forest was found'
				$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxDomains.Enabled = $false
			}
			Else
			{
				$comboboxDomains.Enabled = $true
				$UPNs = @()
				add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
				$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
				If ($extraUPNs -ne $Null)
				{
					foreach ($extraUPN in $extraUPNs)
					{
						$UPNs += "@" + $extraUPN
					}
				}
				add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
				$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
				Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
			}
			add-logs -text 'LOG: Done'
			
			$comboboxDomains.SelectedIndex = 0
		}
		Else
		{
			$InfoMessage = "Could not locate the ActiveDirectory module on $env:COMPUTERNAME. This module is required to create an Active Directory user"
			$InfoTitle = "Error"
			Show-MessageBox_psf
			$checkboxCreateAnActiveDirect.CheckState = 'Unchecked'
		}
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	
	#Update-SamAccountNameTextbox
	Update-DisplayNameTextbox
	Update-EmailTextbox
	
	$textboxSamAccount.Text = $textboxUserLogonName.Text
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'White'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Black'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Firebrick'
		}
		
	}
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxUserLogonName_FocusChanged = {
	$ADUPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADUPN -ErrorAction SilentlyContinue).ADUPN
	If ($ADUPN -eq 1)
	{
		$words = $textboxUserLogonName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxUserLogonName.Text = $TextInfo.ToTitleCase($words)
	}
}




$maskedtextboxpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'White'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'LightCoral'
			
		}
		
	}
	Else
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'Black'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'Firebrick'
			
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}



$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHub_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'White'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'LightCoral'
		}
	}
	Else
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'Black'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'Firebrick'
		}
	}
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365DisplayName_FocusChanged = {
	$O365DisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365DisplayName -ErrorAction SilentlyContinue).O365DisplayName
	If ($O365DisplayName -eq 1)
	{
		$words = $textboxO365DisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365DisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365UPN_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'White'
		}
		Else
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Black'
		}
		
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'LightCoral'}
		Else
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Firebrick'
		}
		
		
	}
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_FocusChanged = {
	$O365UPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365UPN -ErrorAction SilentlyContinue).O365UPN
	If ($O365UPN -eq 1)
	{
		$words = $textboxO365UPN.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365UPN.Text = $TextInfo.ToTitleCase($words)
	}
}


$maskedtextboxo365password_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'White'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'lightcoral'
		}
	}
	Else
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'Black'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'Firebrick'
		}
	}
	
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}


$comboboxO365Licenses_SelectedIndexChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
		}
		
	}
	Else
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'White'
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
		
	}
	
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'LightCoral'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'LightCoral'
	}
	Else
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'Firebrick'
	}
	
	
}



$saveLogAsToolStripMenuItem_Click = {
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged = {
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}




$versionToolStripMenuItem_Click = {
	$InfoMessage = "
Version Number: $Version
Build Date: $Builddate
Author: Brad Wyatt
"
	$InfoTitle = "Build Information"
	Show-MessageBox_psf
	
}


$changelogToolStripMenuItem_Click = {
	Show-ChangeLog_psf
	
}

$labelChangelog_Click = {
	Show-ChangeLog_psf
	
}

$externalLogFileToolStripMenuItem_Click = {
	# Class Details:  https://msdn.microsoft.com/en-us/library/system.windows.forms.savefiledialog(v=vs.110).aspx 
	$SaveFileDialog = New-Object windows.forms.savefiledialog
	$SaveFileDialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$SaveFileDialog.title = "Log File Location"
	#$SaveFileDialog.filter = "All files (*.*)| *.*"   
	#$SaveFileDialog.filter = "PublishSettings Files|*.publishsettings|All Files|*.*" 
	$SaveFileDialog.filter = "Log Text File|*.txt"
	$SaveFileDialog.ShowHelp = $True
	$result = $SaveFileDialog.ShowDialog()
	$result
	$Global:ExternalLog = $SaveFileDialog.filename
	Write-Host $result
	If ($result -eq "Ok")
	{
		
		$labelLogFile.Text = $global:ExternalLog
		
	}
}


$radiobuttonExpireOn_CheckedChanged = {
	#Enable the Date Date / Time picker
	$datetimepickerDATE.Enabled = $true
	#Enable the Time date/time picker
	$datetimepickerTIME.Enabled = $true
	
}

$radiobuttonNever_CheckedChanged = {
	#Disable the Date Date/Time picker
	$datetimepickerDATE.Enabled = $false
	#Disable the Time Date/Time picker
	$datetimepickerTIME.Enabled = $false
	
}

$datetimepickerDATE_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$datetimepickerTIME_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$checkedlistboxGroups_SelectedIndexChanged = {
	$Items = @()
	$Items += $checkedlistboxGroups.CheckedItems
	$Items += "Domain Users"
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items $Items
	
}

$optionsToolStripMenuItem_Click = {
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
}

$textboxDescription_FocusChanged = {
	$ADDescription = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription
	If ($ADDescription -eq 1)
	{
		$words = $textboxDescription.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDescription.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxoffice_FocusChanged = {
	$ADOffice = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADOffice -eq 1)
	{
		$words = $textboxoffice.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxoffice.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxSamAccount_FocusChanged = {
	$ADSamAccountName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADSamAccountName -ErrorAction SilentlyContinue).ADSamAccountName
	If ($ADSamAccountName -eq 1)
	{
		$words = $textboxSamAccount.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxSamAccount.Text = $TextInfo.ToTitleCase($words)
	}
	
}



$textboxStreet_FocusChanged = {
	$ADStreet = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADStreet -ErrorAction SilentlyContinue).ADStreet
	If ($ADStreet -eq 1)
	{
		$words = $textboxstreet.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstreet.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxcity_FocusChanged = {
	$ADCity = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCity -ErrorAction SilentlyContinue).ADCity
	If ($ADCity -eq 1)
	{
		$words = $textboxcity.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxcity.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxstate_FocusChanged = {
	$ADState = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState
	If ($ADState -eq 1)
	{
		$words = $textboxstate.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstate.Text = $TextInfo.ToTitleCase($words)
	}
	
	
}

$textboxjobtitle_FocusChanged = {
	$ADJobTitle = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADJobTitle -ErrorAction SilentlyContinue).ADJobTitle
	If ($ADJobTitle -eq 1)
	{
		$words = $textboxjobtitle.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxjobtitle.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxDepartment_FocusChanged = {
	$ADDepartment = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment
	If ($ADDepartment -eq 1)
	{
		$words = $textboxDepartment.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDepartment.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxCompany_FocusChanged = {
	$ADCompany = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany
	If ($ADCompany -eq 1)
	{
		$words = $textboxCompany.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxCompany.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$debugToolStripMenuItem_Click = {
	#Set value to 1 so we dont have string settings get in the way
	#Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 1 -Force | Out-Null
	
	#$textboxFirstName.Text = "TIM"
	#$textboxLastName.Text = "Loser"
	#$textboxEmail.text= "Tim.loser@loser.com"
	#Set back to 0
	#Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 0 -Force | Out-Null
	$comboboxO365Licenses.SelectedItem = 0
	
	
}

$textboxSearchGroups_TextChanged = {
	$Filter = $textboxSearchGroups.text
	$Results = $OriginalData | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxGroups -Items $Results
}


$textboxSearchO365SecurityGroups_TextChanged={
	$Filter = $textboxSearchO365SecurityGroups.text
	$Results = $OriginalDataSecurityGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $Results
	
}

$textboxO365MailGroups_TextChanged={
	$Filter = $textboxO365MailGroups.text
	$Results = $OriginalDataMailGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $Results
	
}

$textboxO365street_FocusChanged={
	$O365Street = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365Street -ErrorAction SilentlyContinue).O365Street
	If ($O365Street -eq 1)
	{
		$words = $textboxO365street.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365street.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxo365city_FocusChanged={
	$O365City = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City
	If ($O365City -eq 1)
	{
		$words = $textboxo365city.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365city.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxo365state_FocusChanged={
	$O365State = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State
	If ($O365State -eq 1)
	{
		$words = $textboxo365state.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365state.Text = $TextInfo.ToTitleCase($words)
	}
	
}


$textboxemployeenumber_TextChanged={
	Update-DisplayNameTextbox
	Update-SamAccountNameTextbox
	Update-EmailTextbox
	Update-UserPrincipalNameTextbox
	
}

$textboxEmployeeID_TextChanged={
	Update-DisplayNameTextbox
	Update-SamAccountNameTextbox
	Update-EmailTextbox
	Update-UserPrincipalNameTextbox
}

$textboxEmail_TextChanged={
	Update-DisplayNameTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
}

$copyActiveDirectoryUserToolStripMenuItem_Click={
	
	#Set value to 1 so we dont have string settings get in the way
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 1 -Force | Out-Null
	Show-CopyFromUser_psf
	$CopyUser = $CopyFromUser_comboboxcopyuser
	$Job = $PSJob
	$UserJob = ($Job | Where-Object { $_.Name -like $CopyUser })[0]
	$UserTemplate = Get-ADUser -identity ($UserJob).ObjectGuid -properties *
	Copy-ADUserAttributes
	#Set back to 0
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 0 -Force | Out-Null
	Get-Job | Remove-Job
	
}

$textboxSamAccount_TextChanged={
	#Update-EmailTextbox
	Update-DisplayNameTextbox
	#Update-UserPrincipalNameTextbox
}
$textboxSamAccount_FocusChanged = {
	#Update-EmailTextbox
	Update-DisplayNameTextbox
	#Update-UserPrincipalNameTextbox
}


$clearFormToolStripMenuItem_Click={
	Reset-Form
	
}


$exitToolStripMenuItem1_Click={
	$MainForm.close()
	
}

$copyToolStripMenuItem_Click={
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>