<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
lOwTaehZX0P/xBxaiKPXVJOCnIoJMmpayD6cIe2exNz8JGIC3ElbZKB30Qkd9MbJ+Qk8drTD2bMy
eBqbg9WVZaRGP4G8FKnvgiP6x8jxx3+ygf6tuxoqYK2jQfatDGwu38XYzCJGu+tw0UoP8gqKuOH6
DNPk71iREw5lRWkoa1qhqncQOTHeeBySQP7Gi0wAMGO2TcYEwA7jYxMAlPmZSXR0dPJTvwx1YFMz
c1hamOc/UkeMOrLlZdLDJb/UixJWqTggTo4Ooy/TuDk5ULln90lZCneH/Ya79RfWnoEnzoc+Irf+
iQLaO6dhhTHSc15aWiT7Z4a7mZDe8U8Fw1rR1WWS97O70icxw61nFTNkubWy9IkB2hOn7yigj/cN
dDfCRl8GNx5Hkt75CtcOzrh1TL1cjvLyaYF1jaTbRJ+VX4M+Zz85Nc3tG/rsPN0fP3sPAN2edXWs
PZtPn45YJNPcviXbS9tJvxFOH7ecf/ng/ionKn5pH65/YmBt/62tjr5jgG7DAnHgPFa5UQqaxy1P
6plZ95TG2vrW72+iILg2rb1vgDI7TQTT3CIW50n7ST1MADBjtj3GBMAO42MUAO8CvQmQOgbqwHaT
TZH93dtej7T0LAyNT3N3wgsq92uMvg6X7j8qAOi0oDK7zeh2UgFAj5m99g0EZsx+jQnyCxuNCYAd
xm4QANSB0Yv6rrLBQYyMjnP7fnRkGIOCyvxKo71/+lpc+ipgOi2ozG6ztW2mr0CmIoAe08yYMRNs
9PpKzxkqnjf6BEHGBMAO430FAB1GpqpwrRe1/qtyvzRNf7dymrZrrWe31ovdSdP0903TG8tu1/R6
+zX1CJqmv5uZpr//juk32fr52z293t6U/y62mTo2066tml5vb8p/F9tMHZtp11ZNr7c35b+LbaaO
zbTr105To/fM0F8qmOn1VpBvWG9MAOww3lcAFBYWoqysDJWVlS9/16arqqpQUVHxs3z6u5a/Vqa8
vPwXp+nvm6Zpuerqau6X1v2m6bU66e/asm/KX5v+pXxaN11eUHmav77M26bpL7WampqX02v5tNxm
ptevn9pO2b7103SZN02vrf9N+Wtt/Bi3by2fLrOWv3F6bf1vyl9rI9u+7d8+Ou9t+Run19b/pvy1
Nu607cvJyeE6egsLC9zoGRMAu5D3EQCrq6soKSnhphkMBoOx+6CCg940ywTALuZ9BQBVivSXwWAw
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
Wrl5n9599RHdPvdOrV9zvxbevV41VWWaPzFDS831jBytA1kFeuD2W7Rs7fNatXKxDhbU6rm1CzV+
xgItnnWblv7f88o/sk0LV3UdvB99cIl+ve2Qij88oA+Ol/rb+uNC+TFl3v2bK8XmU+VMuk5H7/qd
LjbVKGv27cpf/aA+mjJbsexKJXY+rcOT7tTZ5u6SJkVfekrHZizU6TW/Vs7COSp45BVd6mxS/pLp
yvvVg8qcOUvVb2cq8uoGle4+7n9N7tK7FD9yXPkPLvcO697O5thOZa5+Rh2573kH/J/rzONPKnvp
/eqo8Q746+5R9vIHlDlvuir3HFZ08wadWPyQGj94Q9l3/bLrsnevUkd1jUruvcMrAauVPXuCjixe
538vAAPXnwLA6wA4YKhGAN2i5XnaunWr9n34+XvtR0Plqom26UJno4pLanXp004Vl5b553XUh/zL
55RH/M8vn2vU9m1btffo387BG6qL/MvmXrmscfrou9q2/Q11XLmtt0bLu66vrPdHs3/04T7//Lwe
15GoKfa3ZVd0LSdUlBWr5ZxXXS6eVUFJhdpaEyoNdZWJWG2FyiMt/ukT7+/R1m271Xy+69/pk5aw
tnnXc6Kw69kHdaU52v/OMZV7v3/zx+YH/KvefWuntr35jl+MPm2v15nK2q7LVpWrrqVDkZIClZTH
/G398dm5dnVU1CTvLV9M1KmttMo/fbk5rPCfd6i5pMb//LOzjao/8J7Od/Z80J70sfdz1u3cocbs
01e2eD/puWZFd+9UQ2ax//n5aJXONXY9YK+zvMJ/8N7ZqpBfPC63J9Re0fV4jXPe37925+s6W3/l
wX1/Pa/6vW8ofqzr73m5Lar4gQ/8rztXnutddpfOJryy5fmsM6Hom96/Z26BOqs///sAGBhGAPAN
5QoAAODvjxEAfBQAAHALIwD4hnoEAAD4++pPASguLmYFIOhYAQAAtzACgI8CAABuYQQAHyMAAHAL
IwD4WAEAALcwAoAv1QIw4DcDAgBcExgBwMcIAADcwggAvlQLwEDfDRAAcG1gBAAfjwEAALcwAoCP
EQAAuIUVAPgGewRgblgAgGuXObBTAJByAejtWQDmBtXe3u7faAghhFx76ejo8GPvv22MABwwmCMA
AEAwsALggMEcAQAAgoEC4IDBHAEAAIKBEYADGAEAAGysADiAEQAAwMYrATqAEQAAwMYIwAGpFoC8
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</Preview>
  <Form>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
Qs7qEiECu0RwYJcIDuwSwYFdIjiwSwQ70UfI3vURytR9hOxdH8GV9xFSiH0EPtFH4BN9BAfWR8je
9RF8Rx8he9cfIwiBUCHuQ3hRBLbdR2DbfYRkah8hj9lHSCFeIVD+KwSzfYVgtq8QjNUVgp24QrAT
1wiU/xqB8l8j0LtrBDtxjWAnrhHyE9cI9O4awWJeI9C7awSz/RXBWH1FsBNfEVT0K0IYeIOAiRuE
dNENQrroBiFddIOgojcIrvwGQkURvOgNQlR+gxCV3yC0LgwQKj8DhMrPAKGJY4BgtgcI6aIBgrEa
IFD+AQLlHyBkagYI7bEDBN8xRDDbQwSLOUTI3g0Rgp8hQsF+iBCBDREisCGCFx0iZHSHCGHgECEM
HCKki4YIsegQIa08ROCYQwSOOUTgmEMEjjlE4JhDhCTJEGEL1hCCbSNkakYIlH+EQPlHCGx7hMC2
Rwhse4SQsxohEN0RAr0bIdC7EQKzGiHwiRGC77hFiMDGCA5sjOA7xgi+Y4zgO8YImZoxQqZmjODA
xhB2AiFTM0ZwYGOE1MAYITUwRgiIxwix6L8QvOgdghe9Q2DbdwgqeodAdO8QVFRB0A4FoZ1FQcjU
KAjFWQXBWCkIbFtBYNsKQrpIQTiJQ0GIOxSEuENBiDsUhLhDQSA1CkLwoyAwKwUh+FEQSpIKQjVQ
QYjAFISM7gSB3k0Q6N0EIZk6QaB3EwR6N0FgVhMEZjVBYFYTBGY1QWBWEwRmNUFgVhMEUjNBIDUT
hJzVBIFP3CMkzu4RvOg9gsW8Rwh+7hHY9j2CdjwgaMcDAuV/QEimPiDYiQeEPOYDArN6QCg/fUMI
A78hmO0/EVT0TwSO+R3BbH9H4BPfo4nuH5/HtrXQbPc97MvVd8RU51TGgTVVXSrLyZd6gwpSrdeE
Lh+q9rNOLz79jQT/E7p8RP978mVqzR+tR+vttn7anFpL07Xfp9ZME7qTov+X3ql6WvuN1BtiV1q2
q80oa7eXYo+cqI/X5kx7O/kSM2e9V810V0/TDG1Kn+dd2X1RzWf27IgZ+BH26z8+e/fbe9Afn28f
/0N/vf+F//k2KL/p5sz65Xy6tOy582mgPmoUdWHfZYHWYOwGe0rXH16XDu+ETF90Y2bTS066Fv3U
MpyTBBPfXrqWv97Ca0aHpHUtw7JPvlzqtvZo69OfkvpSPWfq0pRSl2r9N+JpG/0/CYXZnUhpTanK
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
/dP58j/FlmUCB04DAA==</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load = {
	
	$textboxADSyncServer.Enabled = $false
	
	$datetimepickerDATE.Refresh()
	
	$radiobuttonNever.Checked = $true
	$datetimepickerDATE.Enabled = $false
	$datetimepickerTIME.Enabled = $false
	
	$datetimepickerTIME.Text = "05:00 PM"
	
	$MainForm.MaximizeBox = $false
	
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$comboboxO365countrycode.SelectedItem = "US"
	
	$comboboxO365HidefromGAL.SelectedItem = "False"
	
	$labelTimeLeft.Text = ""
	
	$global:ExternalLog = "$env:TEMP\MUC.txt"
	$labelLogFile.Text = $global:ExternalLog
	
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items "Domain Users"
	$comboboxPrimaryGroup.SelectedItem = "Domain Users"
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateAnActiveDirect.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
					
					Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
					If ($comboboxPrimaryGroup.Text -eq "Domain Users")
					{
						Add-Logs -text "LOG: Primary Group set to Domain Users"
					}
					Else
					{
						$PrimaryGroup = $comboboxPrimaryGroup.Text
						Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
						Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
						$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
						Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
						Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
					}
					Add-Logs -text "LOG: Done"
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
					
					Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
					If ($comboboxPrimaryGroup.Text -eq "Domain Users")
					{
						Add-Logs -text "LOG: Primary Group set to Domain Users"
					}
					Else
					{
						$PrimaryGroup = $comboboxPrimaryGroup.Text
						Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
						Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
						$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
						Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
						Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
					}
					Add-Logs -text "LOG: Done"
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunADSync.CheckState -eq 'Checked')
		{
			If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$SyncServer = $textboxADSyncServer.text
				add-logs -text 'LOG: DirSync Enabled'
				add-logs -text "LOG: Running DirSync on $SyncServer"
				add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
				Try
				{
					Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
				}
				Catch
				{
					add-logs -text "WARN: $_"
					Add-Type -AssemblyName System.Windows.Forms
					[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
				}
				add-logs -text 'LOG: Done'
			}
			Else
			{
				add-logs -text "WARN: ADSync Server text box is empty"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
			}
		}
		#If DirSync is not enabled
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				
				#User is going to be disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop) )
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
		
		#### ACTIVE DIRECTORY USER CREATION PORTION ####
		
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
					
					Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
					If ($comboboxPrimaryGroup.Text -eq "Domain Users")
					{
						Add-Logs -text "LOG: Primary Group set to Domain Users"
					}
					Else
					{
						$PrimaryGroup = $comboboxPrimaryGroup.Text
						Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
						Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
						$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
						Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
						Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
					}
					Add-Logs -text "LOG: Done"
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
					
					Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
					If ($comboboxPrimaryGroup.Text -eq "Domain Users")
					{
						Add-Logs -text "LOG: Primary Group set to Domain Users"
					}
					Else
					{
						$PrimaryGroup = $comboboxPrimaryGroup.Text
						Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
						Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
						$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
						Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
						Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
					}
					Add-Logs -text "LOG: Done"
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
		
		
		
		#### OFFICE 365 USER CREATION PORTION ####
		
		
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunADSync.CheckState -eq 'Checked')
		{
			If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$SyncServer = $textboxADSyncServer.text
				add-logs -text 'LOG: DirSync Enabled'
				add-logs -text "LOG: Running DirSync on $SyncServer"
				add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
				Try
				{
					Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
				}
				Catch
				{
					add-logs -text "WARN: $_"
					Add-Type -AssemblyName System.Windows.Forms
					[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
				}
				add-logs -text 'LOG: Done'
			}
			Else
			{
				add-logs -text "WARN: ADSync Server text box is empty"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
			}
		}
		#If DirSync is not enabled
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				
				#User is going to be disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}


$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}


$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateAnActiveDirect.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = $textboxUserLogonName.text
		$comboboxO365Domains.SelectedItem = $comboboxDomains.SelectedItem
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		If ($Modules -eq $Null)
		{
			add-logs -text 'WARN: MFA Module was not found'
			$InfoMessage = "Exchange Online MFA Module was not found, please make sure you have downloaded and installed it from your tenant https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/mfa-connect-to-exchange-online-powershell?view=exchange-ps"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		
		$labelconnectionstatus.Text = "Connected"
		$labelconnectionstatus.ForeColor = 'Green'
		
		$Global:O365_Pre_Req++
		#Create just an AD User
		If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD nad O365 User (w/ ADSync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD And O365 User (no Sync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 User no adsync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 user with ADSync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		$comboboxO365HidefromGAL.SelectedItem = "False"
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunADSync_CheckedChanged = {
	If ($checkboxRunADSync.Checked -eq $True)
	{
		$groupboxNoAdSync.Enabled = $false
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
		
		$textboxADSyncServer.Enabled = $true
		
	}
	elseif ($checkboxRunADSync.Checked -eq $false)
	{
		$groupboxNoAdSync.Enabled = $True
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
		
		$textboxADSyncServer.Enabled = $false
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged= {
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
		
	If ($Global:ExternalLog -ne $null)
	{
		$console.Text | Out-File $Global:ExternalLog 
	}
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Enabling ADSync CheckBox'
		$checkboxRunADSync.Enabled = $True
		add-logs -text 'LOG: Enabling No ADSync Groupbox'
		$groupboxNoAdSync.Enabled = $true
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateAnActiveDirect_CheckedChanged = {
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Organizational Unit Tree'
		add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
		$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName
		If ($null -eq $OUTree)
		{
			$InfoMessage = 'Could not load Organizational Unit structure'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$comboboxOUTree.Enabled = $false
		}
		Else
		{
			add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
			Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
			add-logs -text 'LOG: Done'
			$comboboxOUTree.Enabled = $true
		}
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$textboxUPNDomain.Text ="Not Available"
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$comboboxDomains.Enabled = $false
		}
		Else
		{
			$comboboxDomains.Enabled = $true
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {

		$textboxSamAccount.Text = $textboxUserLogonName.Text
	
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
		
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
		
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	$comboboxOUTree.SelectedText = ""
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunADSync.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	$comboboxMFA.SelectedItem = "False"
	$comboboxO365countrycode.SelectedItem = "US"
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""
	$textboxo365city.Text = ""
	$textboxo365state.Text = ""
	$textboxo365zip.Text = ""
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHub_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$Global:O365_Pre_Req--
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	$labelconnectionstatus.Text = "Not Connected"
	$labelconnectionstatus.ForeColor = 'Firebrick'
	
}



$saveLogAsToolStripMenuItem_Click={
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged={
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}




$versionToolStripMenuItem_Click={
	$InfoMessage = "
Version Number: $Version
Build Date: $Builddate
Author: Brad Wyatt
"
	$InfoTitle = "Build Information"
	Show-MessageBox_psf
	
}


$changelogToolStripMenuItem_Click={
	Show-ChangeLog_psf
	
}

$labelChangelog_Click={
	Show-ChangeLog_psf
	
}

$externalLogFileToolStripMenuItem_Click={
	# Class Details:  https://msdn.microsoft.com/en-us/library/system.windows.forms.savefiledialog(v=vs.110).aspx 
	$SaveFileDialog = New-Object windows.forms.savefiledialog
	$SaveFileDialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$SaveFileDialog.title = "Log File Location"
	#$SaveFileDialog.filter = "All files (*.*)| *.*"   
	#$SaveFileDialog.filter = "PublishSettings Files|*.publishsettings|All Files|*.*" 
	$SaveFileDialog.filter = "Log Text File|*.txt"
	$SaveFileDialog.ShowHelp = $True
	$result = $SaveFileDialog.ShowDialog()
	$result
	$Global:ExternalLog = $SaveFileDialog.filename
	Write-Host $result
	If ($result -eq "Ok")
	{
		
		$labelLogFile.Text = $global:ExternalLog
		
	}
}


$radiobuttonExpireOn_CheckedChanged = {
	#Enable the Date Date / Time picker
	$datetimepickerDATE.Enabled = $true
	#Enable the Time date/time picker
	$datetimepickerTIME.Enabled = $true
	
}

$radiobuttonNever_CheckedChanged = {
	#Disable the Date Date/Time picker
	$datetimepickerDATE.Enabled = $false
	#Disable the Time Date/Time picker
	$datetimepickerTIME.Enabled = $false
	
}

$datetimepickerDATE_ValueChanged={	
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$datetimepickerTIME_ValueChanged={
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$checkedlistboxGroups_SelectedIndexChanged = {
	$Items = @()
	$Items += $checkedlistboxGroups.CheckedItems
	$Items += "Domain Users"
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items $Items 
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>