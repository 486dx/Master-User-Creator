<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
Function Connect-Exchange
{
	
	param (
		[Parameter(Mandatory = $true)]
		[string]$URL = "ex2016srv1.exchangeserverpro.net"
	)
	
	$Credentials = Get-Credential -Message "Enter your Exchange admin credentials to connect to on-premise exchange"
	
	$ExOPSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri http://$URL/PowerShell/ -Authentication Kerberos -Credential $Credentials
	
	Import-PSSession $ExOPSession
	
}

function Toogle-LicenseStatus
{
	If ($null -eq $Licenses2Add)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
#If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
#If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($Licenses2Add.Count -ge 1))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($Licenses2Add.Count -ge 1))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Get-DictionaryPassword
{
	param
	(
		
		[switch]$O365
	)
	$Dictionary = @(
		"Honda";
		"Staple";
		"Battery";
		"Civic";
		"Chicago";
		"Winter";
		"Cubs";
		"Bears";
		"Snow";
		"Train";
		"Shoes";
		"Blue";
		"Bike";
		"Ring";
		"Watch";
		"Computer";
		"Neck";
		"Laptop";
		"Monitor";
		"Toilet";
		"Baseball";
		"Football";
		"Soccer";
		"Phone";
		"Carbondale";
		"Saluki";
		"Swim";
		"Lake";
		"Puppy";
		"Watch";
		"Royals";
		"Basketball";
		"Letter";
		"Paper";
		"Sticker";
		"Kitten";
		"Marker";
		"Highway";
		"Wire";
		"Keyboard";
		"Frisbee";
		"Disc";
		"Hawk";
		"West";
		"North";
		"East";
		"South";
		"Water";
		"Ice";
		"Dirt";
		"Taco";
		"Mouse";
		"Deer";
		"Speaker";
		"Hand";
		"Green";
		"Purple";
		"Pink";
		"Boat";
		"Toilet";
		"Sting";
		"Fish";
		"Bee";
		"White";
		"Grey";
		"Shoes";
		"Carpet";
		"Bed";
		"Pillow";
		"Sears";
		"Mustard";
		"Relish";
		"Ketchup";
		"Milk";
		"Apple";
		"Orange";
		"Flower";
		"Lotion";
		"Plane";
		"Desert";
		"Sand";
		"Beach";
		"Clouds";
		"Wagon";
		"Hair";
		"Internet";
		"Track";
		"Golf";
		"Sledding";
		"Market";
		"Window";
		"Door";
		"Deck";
		"Cards";
		"Shelf";
		"Santa";
		"Tack";
		"Building";
		"Tennis";
		"Power";
		"Sox";
		"Wrigley";
		"Tea";
		"Juice";
		"Plant";
		"Geneva";
		"City";
		"Kansas";
		"Missouri";
		"Midwest";
		"Great";
		"Box";
		"Crane";
		"Michigan";
		"Illinois";
		"Garbage";
		"Cougars";
		"Route";
		"Bridge";
		"Mountain";
		"Message";
		"Fire";
		"Taxi";
		"Bus";
		"Color";
		"Sharpie";
		"Ball";
		"Square";
		"River";
		"Navy";
		"Pier";
		"Grant";
		"Park";
		"Lincoln";
		"President";
		"Wrigley";
		"Soldier";
		"Forest";
		"Bulldog";
		"Police";
		"Taco";
		"Deep";
		"Dish";
		"Pizza";
		"Fire";
		"Ice";
		"Lion";
		"World";
		"Shoe";
		"Ant";
		"Bug";
		"Hair";
		"Beard";
		"Light";
		"Wave";
		"Field";
		"Toll";
		"Tax";
		"Money";
		"Bill";
		"Pot";
		"Pan"
	)
	If ($O365 -eq $True)
	{
		$word1 = (Get-Random $Dictionary)
		$Num = Get-random -Maximum 99 -Minimum 0
		$WChar = @(
			"!"
			"@"
			"$"
			"%"
			"&"
			"?"
			"#"
		)
		$Wildchar = Get-random $WChar
		
		$Word1 + "-" + $Num + $WildChar
	}
	Else
	{
		$word1 = (Get-Random $Dictionary)
		
		$word2 = (Get-Random $Dictionary | Where-Object { $_ -ne $word1 })
		
		$Word3 = (Get-Random $Dictionary | Where-Object { ($_ -ne $word1) -and ($_ -ne $word2) })
		
		$Num = Get-random -Maximum 99 -Minimum 0
		
		$Word1 + "-" + $word2 + "-" + $word3 + $Num
	}
	
	
}

function Reset-Form
{
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	
	$ADDescriptionReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription
	If ($ADDescriptionReset -ne 1)
	{
		$textboxDescription.Text = ""
	}
	
	$ADOfficeReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADOfficeReset -ne 1)
	{
		$textboxoffice.Text = ""
	}
	
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	$comboboxOUTree.SelectedText = ""
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	
	$ADCityReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADCityReset -ne 1)
	{
		$textboxcity.Text = ""
	}
	$ADStateReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState
	If ($ADStateReset -ne 1)
	{
		$textboxstate.Text = ""
	}
	
	$ADZipReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADZip -ErrorAction SilentlyContinue).ADZip
	If ($ADZipReset -ne 1)
	{
		$textboxzipcode.Text = ""
	}
	
	
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	
	$ADDepartmentReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment
	If ($ADDepartmentReset -ne 1)
	{
		$textboxDepartment.Text = ""
	}
	
	$ADCompanyReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany
	If ($ADCompanyReset -ne 1)
	{
		$textboxCompany.Text = ""
	}
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	
	$ADLogonScriptReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADLogonScript -ErrorAction SilentlyContinue).ADLogonScript
	If ($ADLogonScriptReset -ne 1)
	{
		$textboxlogonscript.Text = ""
	}
	

	
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	$textboxEmployeeID.Text = ""
	$textboxemployeenumber.Text = ""
	$textboxemployeeType.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunADSync.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	$comboboxMFA.SelectedItem = "False"
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""

	$O365CityReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City
	If ($O365CityReset -ne 1)
	{
		$textboxo365city.Text = ""
	}
	
	$O365StateReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State
	If ($O365StateReset -ne 1)
	{
		$textboxo365state.Text = ""
	}
	
	$O365ZipReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365Zip -ErrorAction SilentlyContinue).O365Zip
	If ($O365ZipReset -ne 1)
	{
		$textboxo365zip.Text = ""
	}
	
	
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

function Update-DisplayNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatDisplayName -ErrorAction SilentlyContinue).UserFormatDisplayName
		#Create an array that we will use for formatting
		$DisplayNameFormatString = @()
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%Firstname% %LastName%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatDisplayName -Value "%FirstName% %LastName%" -Force | Out-Null
		}
		
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text
			}
			ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
			{
				$DisplayNameFormatString += $textboxInitials.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$DisplayNameFormatString += $space
			}
			ElseIf ($_ -eq "EmployeeID")
			{
				$DisplayNameFormatString += $textboxEmployeeID.text
			}
			ElseIf ($_ -eq "EmployeeNumber")
			{
				$DisplayNameFormatString += $textboxemployeenumber.text
			}
			ELseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.text
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$DisplayNameFormatString += $textboxUserLogonName.text
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$DisplayNameFormatString += $textboxEmail.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.Text
			}
			ElseIf ($_ -eq "UserPrincipalNameDomain")
			{
				$EmailFormatString += $comboboxDomains.SelectedItem
			}
			ElseIf ($_ -eq "UPNDomain")
			{
				$EmailFormatString += $comboboxDomains.SelectedItem
			}
			Else
			{
				$DisplayNameFormatString += $_
			}
			
			$textboxDisplayName.Text = [String]::Join('', $DisplayNameFormatString)
			
		}
		
		
	}
}

function Update-EmailTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatEmail -ErrorAction SilentlyContinue).UserFormatEmail
		#Create an array that we will use for formatting
		$EmailFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$EmailFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$EmailFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$EmailFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$EmailFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$EmailFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$EmailFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$EmailFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$EmailFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$EmailFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$EmailFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.Text
				}
				ElseIf ($_ -eq "UserPrincipalNameDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				ElseIf ($_ -eq "UPNDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				Else
				{
					$EmailFormatString += $_
				}
				
			}
			$textboxEmail.Text = [String]::Join('', $EmailFormatString)
		}
	}
}

function Update-SamAccountNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatSamAccountName -ErrorAction SilentlyContinue).UserFormatSamAccountName
		#Create an array that we will use for formatting
		$SamAccountNameFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$SamAccountNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$SamAccountNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$SamAccountNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$SamAccountNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$SamAccountNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$SamAccountNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$SamAccountNameFormatString += $_
				}
				
			}
			$textboxSamAccount.Text = [String]::Join('', $SamAccountNameFormatString)
		}
	}
}

function Update-UserPrincipalNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatUserPrincipalName -ErrorAction SilentlyContinue).UserFormatUserPrincipalName
		#Create an array that we will use for formatting
		$UserPrincipalNameFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$UserPrincipalNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$UserPrincipalNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$UserPrincipalNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$UserPrincipalNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$UserPrincipalNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$UserPrincipalNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.Text
				}
				ElseIf ($_ -eq "UserPrincipalNameDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				ElseIf ($_ -eq "UPNDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				Else
				{
					$UserPrincipalNameFormatString += $_
				}
				
			}
			$textboxUserLogonName.Text = [String]::Join('', $UserPrincipalNameFormatString)
		}
	}
}

function Set-DarkMode
{
	$labelCountryCode.ForeColor = 'White'
	$contextmenustrip1.BackColor = "44,44,44"
	$contextmenustrip1.ForeColor = 'White'
	$MainForm.BackColor = "44,44,44"
	$MainForm.ForeColor = 'White'
	
	$labelLogFile.BackColor = "44,44,44"
	$labelLogFile.ForeColor = 'White'
	
	$labelconnectionstatus.ForeColor = 'LightCoral'
	
	
	$richtextboxregistry.ForeColor = 'White'
	$richtextboxregistry.BackColor = "44,44,44"
	
	$groupboxStatus.ForeColor = 'White'
	
	$groupboxADSync.ForeColor = 'White'
	$groupboxHybrid.ForeColor = 'White'
	$groupboxExchangeSetup.ForeColor = 'White'
	
	
	$tabpageSettings.BackColor = "44,44,44"
	$tabpageSettings.ForeColor = 'White'
	$groupboxADGroups.ForeColor = 'White'
	
	$menustrip1.BackColor = "44,44,44"
	$menustrip1.ForeColor = 'White'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "44,44,44"
					$_.ForeColor = 'White'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'White'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "44,44,44"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'White'
	$copyOffice365UserToolStripMenuItem.BackColor = "44,44,44"
	
	
	$groupboxInformation.ForeColor = 'White'
	$linklabelBradleyWyatt.LinkColor = 'DeepSkyBlue'
	$linklabelGitHub.LinkColor = 'DeepSkyBlue'
	$labelChangelog.ForeColor = 'DeepSkyBlue'
	
	$console.BackColor = "35,35,35"
	$console.ForeColor = 'White'
	
	$buttonExit.ForeColor = "white"
	$buttonExit.BackColor = "35,35,35"
	
	$buttonCreateUser.ForeColor = "white"
	$buttonCreateUser.BackColor = "35,35,35"
	
	$groupboxADUser.ForeColor = 'White'
	$groupboxADUser.BackColor = "44,44,44"
	
	$groupbox2FA.ForeColor = 'White'
	$groupboxOffice365User.ForeColor = 'White'
	
	$tabcontrolUserProperties.ForeColor = 'White'
	$tabcontrolUserProperties.BackColor = "44,44,44"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
		

	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
	}
	
	#GENERAL PAGE
	$groupboxADSync.ForeColor = 'White'
	$panel1.BackColor = "35,35,35"
	$labelDisplayName.ForeColor = 'LightCoral'
	$labelPassword.ForeColor = 'LightCoral'
	$labelConfirmPassword.ForeColor = 'LightCoral'

	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
				$_.BackColor = "35,35,35"
				$_.ForeColor = 'White'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'White'
	$buttonGeneratePassword.BackColor = '44,44,44'
	$buttonClear.ForeColor = 'White'
	$buttonClear.BackColor = '44,44,44'
	
	$textboxPasswordGen.ForeColor = 'White'
	$textboxPasswordGen.BackColor = '35,35,35'
	$maskedtextboxpassword.ForeColor = 'White'
	$maskedtextboxpassword.BackColor = '44,44,44'
	$textboxConfirmPassword.BackColor = '44,44,44'
	$textboxConfirmPassword.ForeColor = 'White'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Flat'
	$comboboxDomains.ForeColor = 'White'
	$comboboxDomains.BackColor = "35,35,35"
	
	$comboboxOUTree.FlatStyle = 'Flat'
	$comboboxOUTree.ForeColor = 'White'
	$comboboxOUTree.BackColor = "35,35,35"
	
	$panel2.ForeColor = 'White'
	$Panel2.BackColor = "35,35,35"
	
	$datetimepickerDATE.ForeColor = 'White'
	$datetimepickerDATE.CalendarMonthBackground = "35,35,35"
	
	$datetimepickerTIME.ForeColor = 'White'
	$datetimepickerTIME.BackColor = "35,35,35"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "44,44,44"
	
	$groupboxaccountexpires.ForeColor = 'White'
	$labelUserLogonNameUPN.ForeColor = 'LightCoral'
	$labelUserLogonNamepreWind.ForeColor = 'White'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'White'
	$checkedlistboxGroups.BackColor = "35,35,35"
	$textboxPOSIX.ForeColor = 'White'
	$textboxPOSIX.BackColor = "44,44,44"
	
	$textboxSearchGroups.ForeColor = 'White'
	$textboxSearchGroups.BackColor = "35,35,35"
	
	$comboboxPrimaryGroup.FlatStyle = 'Flat'
	$comboboxPrimaryGroup.ForeColor = 'White'
	$comboboxPrimaryGroup.BackColor = "35,35,35"
	
	$groupboxPrimaryGroup.ForeColor = 'White'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'White'
	$groupboxHomeFolder.ForeColor = 'White'
	$comboboxDriveLetter.FlatStyle = 'Flat'
	$comboboxDriveLetter.ForeColor = 'White'
	$comboboxDriveLetter.BackColor = "35,35,35"
	$textboxhomedirectory.ForeColor = 'White'
	$textboxhomedirectory.BackColor = "35,35,35"
	$textboxprofilepath.ForeColor = 'White'
	$textboxprofilepath.BackColor = "35,35,35"
	$textboxlogonscript.ForeColor = 'White'
	$textboxlogonscript.BackColor = "35,35,35"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "44,44,44"
	$tabcontrolO365.ForeColor = 'White'
	$textboxADSyncServer.ForeColor = 'White'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365userpassword.ForeColor = 'LightCoral'
	$labelO365userconfirmpassword.ForeColor = 'LightCoral'
	$labelO365DisplayName.ForeColor = 'LightCoral'
	$tabpageO365General.BackColor = "44,44,44"
	$groupboxADSync.ForeColor = 'White'
	$textboxADSyncServer.BackColor = "35,35,35"
	$groupboxNoAdSync.ForeColor = 'White'
	$comboboxO365Licenses.FlatStyle = 'Flat'
	$comboboxO365Licenses.BackColor = "35,35,35"
	$comboboxO365Licenses.ForeColor = 'White'
	$panel3.ForeColor = 'White'
	$panel3.BackColor = "35,35,35"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$textboxo365passwordgen.BackColor = "44,44,44"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Lightcoral'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'White'
	$tabpageO365Account.BackColor = "44,44,44"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'LightCoral'
	$panel4.ForeColor = 'White'
	$panel4.BackColor = "35,35,35"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{

			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.BackColor = "44,44,44"
	$tabpageO365Address.ForeColor = 'White'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'White'
	$tabpageO365Groups.BackColor = "44,44,44"
	$labelO365Groups.ForeColor = 'White'
	$labelO365Groups.BackColor = "44,44,44"
	$checkedlistboxDISTROo365groups.ForeColor = 'White'
	$checkedlistboxDISTROo365groups.BackColor = "35,35,35"
	$labelSearch.ForeColor = 'White'
	$textboxO365MailGroups.ForeColor = 'White'
	$textboxO365MailGroups.BackColor = "35,35,35"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'White'
	$labelSecurityGroups.BackColor = "44,44,44"
	$checkedlistboxO365SecurityGroups.ForeColor = 'White'
	$checkedlistboxO365SecurityGroups.BackColor = "35,35,35"
	$labelSearchGroups2.ForeColor = 'White'
	$labelSearchGroups2.BackColor = "44,44,44"
	$textboxSearchO365SecurityGroups.ForeColor = 'White'
	$textboxSearchO365SecurityGroups.BackColor = "35,35,35"
	$tabpagesecurityGroups.BackColor = "44,44,44"
	$tabpagesecurityGroups.ForeColor = 'White'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'White'
	$labelsharedmailboxes.BackColor = "44,44,44"
	$tabpageo365shared.ForeColor = 'White'
	$tabpageo365shared.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.ForeColor = 'White'
	$groupboxSettingsSharedMailbox.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'White'
	$checkedlistboxsharedmailboxes.BackColor = "35,35,35"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "White"
	$tabpageO365Attributes.BackColor = "44,44,44"
	$comboboxO365HidefromGAL.FlatStyle = 'Flat'
	$comboboxO365HidefromGAL.ForeColor = 'White'
	$comboboxO365HidefromGAL.BackColor = "35,35,35"
	
	$comboboxOWA.FlatStyle = 'Flat'
	$comboboxOWA.ForeColor = 'White'
	$comboboxOWA.BackColor = "35,35,35"
	
	$comboboxActiveSync.FlatStyle = 'Flat'
	$comboboxActiveSync.ForeColor = 'White'
	$comboboxActiveSync.BackColor = "35,35,35"
	
	
}

function Set-LightMode
{
	$labelCountryCode.ForeColor = 'Black'
	$contextmenustrip1.BackColor = "WhiteSmoke"
	$contextmenustrip1.ForeColor = 'Black'
	$MainForm.BackColor = "WhiteSmoke"
	$MainForm.ForeColor = 'Black'
	
	$labelLogFile.BackColor = "White"
	$labelLogFile.ForeColor = 'Black'
	
	$labelconnectionstatus.ForeColor = 'FireBrick'
	
	$richtextboxregistry.ForeColor = 'Black'
	$richtextboxregistry.BackColor = "White"
	
	$groupboxStatus.ForeColor = 'Black'
	
	$groupboxADSync.ForeColor = 'Black'
	$groupboxHybrid.ForeColor = 'Black'
	$groupboxExchangeSetup.ForeColor = 'Black'
	
	
	$tabpageSettings.BackColor = "White"
	$tabpageSettings.ForeColor = 'Black'
	$groupboxADGroups.ForeColor = 'Black'
	
	$menustrip1.BackColor = "White"
	$menustrip1.ForeColor = 'Black'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "White"
					$_.ForeColor = 'Black'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'Black'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "White"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'Black'
	$copyOffice365UserToolStripMenuItem.BackColor = "White"
	
	
	$groupboxInformation.ForeColor = 'Black'
	$linklabelBradleyWyatt.LinkColor = '0, 0, 255'
	$linklabelGitHub.LinkColor = '0, 0, 255'
	$labelChangelog.ForeColor = '0, 0, 255'
	
	$console.BackColor = "White"
	$console.ForeColor = 'Black'
	
	$buttonExit.ForeColor = "Black"
	$buttonExit.BackColor = "White"
	
	$buttonCreateUser.ForeColor = "Black"
	$buttonCreateUser.BackColor = "White"
	
	$groupboxADUser.ForeColor = 'Black'
	$groupboxADUser.BackColor = "White"
	
	$groupbox2FA.ForeColor = 'Black'
	$groupboxOffice365User.ForeColor = 'Black'
	
	$tabcontrolUserProperties.ForeColor = 'Black'
	$tabcontrolUserProperties.BackColor = "White"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
		
		
	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
	}
	
	#GENERAL PAGE
	$panel1.BackColor = "MenuBar"
	$labelDisplayName.ForeColor = 'FireBrick'
	$labelPassword.ForeColor = 'FireBrick'
	$labelConfirmPassword.ForeColor = 'FireBrick'
	
	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'Black'
	$buttonGeneratePassword.BackColor = 'White'
	$buttonClear.ForeColor = 'Black'
	$buttonClear.BackColor = 'White'
	
	$textboxPasswordGen.ForeColor = 'Black'
	$textboxPasswordGen.BackColor = 'White'
	$maskedtextboxpassword.ForeColor = 'Black'
	$maskedtextboxpassword.BackColor = 'White'
	$textboxConfirmPassword.BackColor = 'White'
	$textboxConfirmPassword.ForeColor = 'Black'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Standard'
	$comboboxDomains.ForeColor = 'Black'
	$comboboxDomains.BackColor = "Window"
	
	$comboboxOUTree.FlatStyle = 'Standard'
	$comboboxOUTree.ForeColor = 'Black'
	$comboboxOUTree.BackColor = "Window"
	
	$panel2.ForeColor = 'Black'
	$Panel2.BackColor = "MenuBar"
	
	$datetimepickerDATE.ForeColor = 'Black'
	$datetimepickerDATE.CalendarMonthBackground = "White"
	
	$datetimepickerTIME.ForeColor = 'Black'
	$datetimepickerTIME.BackColor = "White"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "White"
	
	$groupboxaccountexpires.ForeColor = 'Black'
	$labelUserLogonNameUPN.ForeColor = 'FireBrick'
	$labelUserLogonNamepreWind.ForeColor = 'Black'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'Black'
	$checkedlistboxGroups.BackColor = "White"
	$textboxPOSIX.ForeColor = 'Black'
	$textboxPOSIX.BackColor = "White"
	
	$textboxSearchGroups.ForeColor = 'Black'
	$textboxSearchGroups.BackColor = "White"
	
	$comboboxPrimaryGroup.FlatStyle = 'Standard'
	$comboboxPrimaryGroup.ForeColor = 'Black'
	$comboboxPrimaryGroup.BackColor = "Window"
	
	$groupboxPrimaryGroup.ForeColor = 'Black'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'Black'
	$groupboxHomeFolder.ForeColor = 'Black'
	$comboboxDriveLetter.FlatStyle = 'Standard'
	$comboboxDriveLetter.ForeColor = 'Black'
	$comboboxDriveLetter.BackColor = "Window"
	$textboxhomedirectory.ForeColor = 'Black'
	$textboxhomedirectory.BackColor = "White"
	$textboxprofilepath.ForeColor = 'Black'
	$textboxprofilepath.BackColor = "White"
	$textboxlogonscript.ForeColor = 'Black'
	$textboxlogonscript.BackColor = "White"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "White"
	$tabcontrolO365.ForeColor = 'Black'
	$textboxADSyncServer.ForeColor = 'Black'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365userpassword.ForeColor = 'FireBrick'
	$labelO365userconfirmpassword.ForeColor = 'FireBrick'
	$labelO365DisplayName.ForeColor = 'FireBrick'
	$tabpageO365General.BackColor = "White"
	$groupboxADSync.ForeColor = 'Black'
	$textboxADSyncServer.BackColor = "White"
	$groupboxNoAdSync.ForeColor = 'Black'
	$comboboxO365Licenses.FlatStyle = 'Standard'
	$comboboxO365Licenses.BackColor = "Window"
	$comboboxO365Licenses.ForeColor = 'Black'
	$panel3.ForeColor = 'Black'
	$panel3.BackColor = "MenuBar"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$textboxo365passwordgen.BackColor = "White"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'Black'
	$tabpageO365Account.BackColor = "White"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'FireBrick'
	$panel4.ForeColor = 'Black'
	$panel4.BackColor = "MenuBar"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.BackColor = "White"
	$tabpageO365Address.ForeColor = 'Black'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'Black'
	$tabpageO365Groups.BackColor = "White"
	$labelO365Groups.ForeColor = 'Black'
	$labelO365Groups.BackColor = "White"
	$checkedlistboxDISTROo365groups.ForeColor = 'Black'
	$checkedlistboxDISTROo365groups.BackColor = "White"
	$labelSearch.ForeColor = 'Black'
	$textboxO365MailGroups.ForeColor = 'Black'
	$textboxO365MailGroups.BackColor = "White"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'Black'
	$labelSecurityGroups.BackColor = "White"
	$checkedlistboxO365SecurityGroups.ForeColor = 'Black'
	$checkedlistboxO365SecurityGroups.BackColor = "White"
	$labelSearchGroups2.ForeColor = 'Black'
	$labelSearchGroups2.BackColor = "White"
	$textboxSearchO365SecurityGroups.ForeColor = 'Black'
	$textboxSearchO365SecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.ForeColor = 'Black'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'Black'
	$labelsharedmailboxes.BackColor = "White"
	$tabpageo365shared.ForeColor = 'Black'
	$tabpageo365shared.BackColor = "White"
	$groupboxSettingsSharedMailbox.ForeColor = 'Black'
	$groupboxSettingsSharedMailbox.BackColor = "White"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'Black'
	$checkedlistboxsharedmailboxes.BackColor = "White"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "Black"
	$tabpageO365Attributes.BackColor = "White"
	$comboboxO365HidefromGAL.FlatStyle = 'Standard'
	$comboboxO365HidefromGAL.ForeColor = 'Black'
	$comboboxO365HidefromGAL.BackColor = "Window"
	
	
	$comboboxOWA.FlatStyle = 'Standard'
	$comboboxOWA.ForeColor = 'Black'
	$comboboxOWA.BackColor = "Window"
	
	$comboboxActiveSync.FlatStyle = 'Standard'
	$comboboxActiveSync.ForeColor = 'Black'
	$comboboxActiveSync.BackColor = "Window"
	
}

function Copy-ADUserAttributes
{
	Add-Logs -text "LOG: Setting Description"
	$textboxDescription.Text = $UserTemplate.Description
	Add-Logs -text "LOG: Setting Office"
	$textboxoffice.Text = $UserTemplate.Office
	Add-Logs -text "LOG: Setting Office Phone"
	$textboxTelephone.Text = $UserTemplate.OfficePhone
	Add-Logs -text "LOG: Setting Email Address"
	$textboxEmail.Text = $UserTemplate.EmailAddress
	Add-Logs -text "LOG: Setting Home Page"
	$textboxWebPage.Text = $UserTemplate.HomePage
	
	Add-Logs -text "LOG: Changing the OU for the user to $((($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)")))"
	$comboboxOUTree.SelectedItem = (($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)"))
	
	Add-Logs -text "LOG: Checking Password Never Expires status"
	If ($UserTemplate.PasswordNeverExpires -eq $true)
	{
		Add-Logs -text "LOG: Setting Password Never Expires to True"
		$checkboxPasswordNeverExpires.CheckState = 'Checked'
	}
	Else
	{
		Add-Logs -text "LOG: Setting Password Never Expires to False"
		$checkboxPasswordNeverExpires.CheckState = 'UnChecked'
	}
	
	Add-Logs -text "LOG: Checking Password Change Ability"
	If ($UserTemplate.CannotChangePassword -eq $True)
	{
		Add-Logs -text "LOG: Setting User Cannot Change Password to True"
		$checkboxUserCannotChangePass.CheckState -eq 'Checked'
	}
	Else
	{
		Add-Logs -text "LOG: Setting User Cannot Change Password to False"
		$checkboxUserCannotChangePass.CheckState -eq 'UnChecked'
	}
	
	Add-Logs -text "LOG: Checking Password Change statue"
	If ($UserTemplate.PasswordExpired -eq $True)
	{
		Add-Logs -text "LOG: Setting User Must Change Password to True"
		$checkboxUserMustChangePasswo.CheckState -eq 'Checked'
	}
	Else
	{
		Add-Logs -text "LOG: Setting User Must Change Password to False"
		$checkboxUserMustChangePasswo.CheckState -eq 'UnChecked'
	}
	Add-Logs -text "LOG: Setting Street Address"
	$textboxStreet.Text = $UserTemplate.StreetAddress
	Add-Logs -text "LOG: Setting PO Box"
	$textboxPOBox.Text = $UserTemplate.POBox
	Add-Logs -text "LOG: Setting City"
	$textboxcity.Text = $UserTemplate.City
	Add-Logs -text "LOG: Setting State"
	$textboxstate.Text = $UserTemplate.State
	Add-Logs -text "LOG: Setting Postal Code"
	$textboxzipcode.Text = $UserTemplate.PostalCode
	Add-Logs -text "LOG: Checking Group Memberships"
	$checkedlistboxGroups.CheckedItems = $null
	$CacheGroups = "$env:TEMP\MUCCacheGroups.txt"
	$click = 1
	($UserTemplate).MemberOf | ForEach-Object {
		$GName = (Get-ADGroup $_).name
		Add-Logs -text "LOG: Adding User to the Group: $GName"
		
		$GName | Out-File $CacheGroups -Append -Force -ErrorAction SilentlyContinue
		$checkedlistboxGroups.SelectedItem = $GName
		$index = $checkedlistboxGroups.SelectedIndex
		$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
	}
	$click = 0
	Add-Logs -text "LOG: Setting Job Title"
	$textboxjobtitle.text = $UserTemplate.Title
	Add-Logs -text "LOG: Setting Department"
	$textboxDepartment.Text = $UserTemplate.Department
	Add-Logs -text "LOG: Setting Company"
	$textboxCompany.Text = $UserTemplate.Company
	Add-Logs -text "LOG: Setting Profile Path"
	$textboxprofilepath.Text = $UserTemplate.ProfilePath
	Add-Logs -text "LOG: Setting Script Path"
	$textboxlogonscript.Text = $UserTemplate.ScriptPath
	Add-Logs -text "LOG: Setting Home Drive"
	$comboboxDriveLetter.SelectedItem = $UserTemplate.HomeDrive
	Add-Logs -text "LOG: Setting Home Directory"
	$textboxhomedirectory.Text = $UserTemplate.HomeDirectory
	Add-Logs -text "LOG: Setting Employee Type"
	$textboxemployeeType.Text = $UserTemplate.EmployeeType
	
	Add-Logs -text "LOG: Done"
	
	
}

function Copy-O365UserAttributes
{
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force | Out-Null
	
	If ($Licenses2Add.count -gt 0)
	{
		$Global:Licenses2Add = New-Object 'System.Collections.Generic.List[System.Object]'
	}
	
	$CopyUser = $CopyFromO365User_comboboxcopyuser
	add-logs -text "LOG: Copying attributes from $CopyUser"
	
	$UserObj = (Get-Msoluser -All | Where-Object { $_.DisplayName -eq $CopyUser }) | Select-Object -First 1
	
	add-logs -text "LOG: Getting the UPN Domain of $CopyUser"
	$UPNDomain = ($UserObj.userprincipalname).split('@') | Select-Object -Last 1
	add-logs -text "LOG: Setting the UPN Domain to $UPNDomain"
	$comboboxO365Domains.SelectedItem = "@"+$UPNDomain
	
	add-logs -text "LOG: Copying Country Code"
	$comboboxO365countrycode.SelectedText = ($UserObj).CountryCode
	add-logs -text "LOG: Checking MFA status of $CopyUser"
	If ($null -eq $UserObj.StrongAuthenticationRequirements.State)
	{
		add-logs -text "LOG: Setting MFA to False"
		$comboboxMFA.SelectedItem = "False"
	}
	Else
	{
		add-logs -text "LOG: Setting MFA to True"
		$comboboxMFA.SelectedItem = "True"
	}
	add-logs -text "LOG: Copying City"
	$textboxo365city.Text = ($UserObj).city
	add-logs -text "LOG: Copying State"
	$textboxo365state.Text = ($UserObj).state
	add-logs -text "LOG: Copying Street Address"
	$textboxO365street.Text = ($UserObj).streetaddress
	add-logs -text "LOG: Copying Postal Code"
	$textboxo365zip.Text = ($UserObj).postalcode
	
	If (($UserObj).PasswordNeverExpires -eq $true)
	{
		add-logs -text "LOG: Copying Password Never Expires Flag"
		$checkboxO365PasswordNeverExpires.CheckState = 'Checked'
	}
	
	If (($UserObj).BlockCredential -eq $True)
	{
		add-logs -text "LOG: Copying Disabled Account State"
		$checkboxBlockCred.CheckState = 'Checked'
	}
	

	
	add-logs -text "LOG: Getting all licenses assinged to $CopyUser"
	$currentlicenses = ($UserObj).Licenses.accountskuid
	foreach ($currentlicense in $currentlicenses)
	{
		$TenantSku = Get-MSOLAccountSku | Where-Object { $_.AccountSkuID -match $currentlicense }
		
		If ($TenantSku.ActiveUnits -ne $TenantSku.ConsumedUnits)
		{
			$lic = $currentlicense -split ":" | Select-Object -Last 1
			#lookup skus in hashtable and convert to friendly name
			$FriendlyName = $Sku.Item("$Lic")
			If ($null -eq $FriendlyName)
			{
				add-logs -text "LOG: Copying The License: $_"
				$obj = [PSCustomObject]@{
					'Name' = $lic
				}
				$Licenses2Add.Add($obj)
			}
			Else
			{
				add-logs -text "LOG: Copying The License: $FriendlyName"
				$obj = [PSCustomObject]@{
					'Name' = $FriendlyName
				}
				
				$Licenses2Add.Add($obj)
				
			}
		}
	}
	
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	Toogle-LicenseStatus
	
	add-logs -text "LOG: Checking Mail Group Membership for $CopyUser"
	Get-MsolGroup -All | Where-Object { ($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") } | ForEach-Object {
		If (Get-MsolGroupMember -All -GroupObjectId $_.ObjectID | Where-Object { $_.EmailAddress -contains ($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:")})
		{
				If ($checkedlistboxDISTROo365groups.Items -contains $_.DisplayName)
				{
					$_.DisplayName | Out-File $CacheDistroGroupsFile -Append -Force -ErrorAction SilentlyContinue
					add-logs -text "LOG: Adding User to the Distribution Group: $($_.DisplayName)"
					$checkedlistboxDISTROo365groups.SelectedItem = $($_.DisplayName)
					$index = $checkedlistboxDISTROo365groups.SelectedIndex
					$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
				}
			}
		
		
	}
	Add-Logs -text "LOG: Getting all Security Groups $CopyUser is a Member of"
	Get-MsolGroup -All | Where-Object { $_.GroupType -eq "Security" } | ForEach-Object {
		If (Get-MsolGroupMember -All -GroupObjectId $_.ObjectID | Where-Object { $_.EmailAddress -contains ($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:") })
		{
				If ($checkedlistboxO365SecurityGroups.Items -contains $_.DisplayName)
				{
					$_.DisplayName | Out-File $CacheSecurityGroupsFile -Append -Force -ErrorAction SilentlyContinue
				add-logs -text "LOG: Adding User to the Security Group: $($_.DisplayName)"
					$checkedlistboxO365SecurityGroups.SelectedItem = $($_.DisplayName)
					$index = $checkedlistboxO365SecurityGroups.SelectedIndex
					$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
				}
			}
			
			
		}
	
	
	
	$UserObjMailbox = Get-Mailbox (($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:"))
	Add-Logs -text "LOG: Gettings GAL status for User"
	If ($UserObjMailbox.HiddenFromAddressListsEnabled -eq $true)
	{
		Add-Logs -text "LOG: Hiding User from GAL: True"
		$comboboxO365HidefromGAL.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "LOG: Hiding User from GAL: False"
		$comboboxO365HidefromGAL.SelectedItem = "False"
	}
	
	Add-Logs -text "LOG: Getting Outlook on the Web (OWA) Status for user"
	If (((Get-CASMailbox (($UserObjMailbox).GUID).Guid).OWAEnabled) -eq $True)
	{
		Add-Logs -text "LOG: Outlook on the Web (OWA): True"
		$comboboxOWA.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "LOG: Outlook on the Web (OWA): False"
		$comboboxOWA.SelectedItem = "False"
	}
	
	Add-Logs -text "LOG: Getting ActiveSync Status for user"
	If (((Get-CASMailbox (($UserObjMailbox).GUID).Guid).ActiveSync) -eq $True)
	{
		Add-Logs -text "LOG: ActiveSync: True"
		$comboboxActiveSync.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "LOG: ActiveSync: False"
		$comboboxActiveSync.SelectedItem = "False"
	}
	
	add-logs -text "LOG: Done"
	
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force | Out-Null
	
}

function License-MUCO365User
{
	$licenseforuser = @()
	#$Lookup = @()
	Add-Logs -text "LOG: Getting License selected for user"
	$Licenses = $Licenses2Add
	Add-Logs "LOG: We will be adding the licenses, $Licenses2Add"
	Add-Logs -text "LOG: Getting AccountSKU Domain"
	$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
	foreach ($License in $licenses)
	{
		Add-Logs -text "LOG: Looking up SKU for license"
		$Lookup = $Sku.keys | Where-Object { $Sku["$_"] -eq "$license" }
		Add-Logs "LOG: License lookup is $Lookup"
		If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
		{
			Add-Logs -text "LOG: No SKU found during lookup"
			$BackSKU = "$LicenseDomain$License"
			Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
			$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
			If ($CheckSku -ne $Null)
			{
				Add-Logs -text "LOG: Assigning $BackSKU to User"
				$licenseforuser += $CheckSku
			}
			Else
			{
				Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
				$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
				Add-Logs -text "WARN: Assigning $ReLic to user instead"
				$licenseforuser += (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
			}
		}
		
		Else
		{
			Add-Logs -text "LOG: Found the SKU for the license"
			$Lookup | ForEach-Object {
				Add-Logs -text "LOG: Checking License $_"
				$BackSKU = "$LicenseDomain$_"
				Add-Logs -text "LOG: Looking up $BackSKU in tenant"
				Add-Logs -text "LOG: Verifying $BackSKU in tenant"
				$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
				If ($CheckSku -ne $Null)
				{
					Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
					$licenseforuser += $CheckSku
				}
				Else
				{
					Add-Logs -text "WARN: $BackSKU was not found in tenant"
				}
			}
		}
		Add-Logs "LOG: OUTPUTTING $licenseforuser"
		$licenseforuser | Out-File "$env:TEMP\MUClicenseforuser.txt" -Force
		
	}
}

function New-MUCUser
{
		
	add-logs -text 'LOG: Converting password to SecureString'
	add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
	$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
	#Get disable account boolean
	add-logs -text 'LOG: Checking if account is disabled or enabled'
	$disabledaccount = ($checkboxAccountIsDisabled.checked)
	#If account should be disabled
	If ($disabledaccount -eq $true)
	{
		add-logs -text 'LOG: Account is disabled'
		add-logs -text 'LOG: Creating user'
		Try
		{
			New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text -Fax $textboxFax.Text -MobilePhone $textboxMobile.Text -HomePhone $textboxHomePhone.Text
		}
		Catch
		{
			add-logs -text "WARN: $_"
			$InfoMessage = $_
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		$User = Get-ADUser -Filter * -Properties * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
		add-logs -text "LOG: User has been created"
		
		#Check if Account is set to expire at a specific time
		Add-Logs -text "LOG: Checking if User account expiration is set"
		If ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text "LOG: User account expiration is set"
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			Add-Logs -text "LOG: Done"
		}
		Else
		{
			Add-Logs -text "LOG: User account expiration not set"
		}
		
		$Proxys = @()
		add-logs -text "LOG: Getting user proxy addresses to set"
		$Proxys += $textboxproxyaddress.Lines
		If ($Proxys -ne $Null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text "LOG: Adding proxy addresses"
				add-logs -text "LOG: Getting user proxy addresses to set"
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
			}
		}
		Else
		{
			add-logs -text "LOG: No proxys were found to add"
		}
		add-logs -text "LOG: Done with Proxys"
		
		
		
		add-logs -text "LOG: Getting user employeeType attribute to set"
		If ($textboxemployeeType.text -ne "")
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
		}
		Else
		{
			add-logs -text "LOG: No employeeType to add"
		}
		add-logs -text "LOG: Done with employeeType"
		
		add-logs -text "LOG: Getting user employeeNumber attribute to set"
		If ($textboxemployeenumber.text -ne "")
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			Set-ADUser $User -EmployeeNumber $textboxemployeenumber.text 
		}
		Else
		{
			add-logs -text "LOG: No employeeNumber to add"
		}
		add-logs -text "LOG: Done with employeeNumber"
		
		add-logs -text "LOG: Getting user employeeID attribute to set"
		If ($textboxEmployeeID.Text -ne "")
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			Set-ADUser $User -EmployeeID $textboxEmployeeID.text
		}
		Else
		{
			add-logs -text "LOG: No employeeID to add"
		}
		add-logs -text "LOG: Done with employeeID"
		
		#Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		$groups = $checkedlistboxGroups.CheckedItems
		If ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $Group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
				Add-ADGroupMember -Identity $Group -Members $User
			}
		}
		Else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text "LOG: Done"
		
		Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
		If ($comboboxPrimaryGroup.Text -eq "Domain Users")
		{
			Add-Logs -text "LOG: Primary Group set to Domain Users"
		}
		Else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
		}
		Add-Logs -text "LOG: Done"
		
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		If ($comboboxOUTree.Text -ne $Null)
		{
			
			add-logs -text 'LOG: Specific OU specified, moving user'
			$CanocicalName = $comboboxOUTree.text
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$User | Move-ADObject -TargetPath $OUTOMove
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
	Else
	{
		add-logs -text 'LOG: Account is enabled'
		add-logs -text 'LOG: Creating user'
		Try
		{
			New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text -Fax $textboxFax.Text -MobilePhone $textboxMobile.Text -HomePhone $textboxHomePhone.Text
		}
		Catch
		{
			add-logs -text "WARN: $_"
			$InfoMessage = $_
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		$User = Get-ADUser -Filter * -Properties * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
		add-logs -text "LOG: User has been created"
		
		#Check if Account is set to expire at a specific time
		Add-Logs -text "LOG: Checking if User account expiration is set"
		If ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text "LOG: User account expiration is set"
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			Add-Logs -text "LOG: Done"
		}
		Else
		{
			Add-Logs -text "LOG: User account expiration not set"
		}
		
		$Proxys = @()
		add-logs -text "LOG: Getting user proxy addresses to set"
		$Proxys += $textboxproxyaddress.Lines
		If ($Proxys -ne $Null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text "LOG: Adding proxy addresses"
				add-logs -text "LOG: Getting user proxy addresses to set"
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
			}
		}
		Else
		{
			add-logs -text "LOG: No proxys were found to add"
		}
		add-logs -text "LOG: Done with Proxys"
		
		add-logs -text "LOG: Getting user employeeType attribute to set"
		If ($textboxemployeeType.text -ne "")
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
		}
		Else
		{
			add-logs -text "LOG: No employeeType to add"
		}
		add-logs -text "LOG: Done with employeeType"
		
		add-logs -text "LOG: Getting user employeeNumber attribute to set"
		If ($textboxemployeenumber.text -ne "")
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			Set-ADUser $User -EmployeeNumber $textboxemployeenumber.text
		}
		Else
		{
			add-logs -text "LOG: No employeeNumber to add"
		}
		add-logs -text "LOG: Done with employeeNumber"
		
		add-logs -text "LOG: Getting user employeeID attribute to set"
		If ($textboxEmployeeID.Text -ne "")
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			Set-ADUser $User -EmployeeID $textboxEmployeeID.text
		}
		Else
		{
			add-logs -text "LOG: No employeeID to add"
		}
		add-logs -text "LOG: Done with employeeID"
		
		#Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		$groups = $checkedlistboxGroups.CheckedItems
		If ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $Group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
				Add-ADGroupMember -Identity $Group -Members $User
			}
		}
		Else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text "LOG: Done"
		
		Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
		If ($comboboxPrimaryGroup.Text -eq "Domain Users")
		{
			Add-Logs -text "LOG: Primary Group set to Domain Users"
		}
		Else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
		}
		Add-Logs -text "LOG: Done"
		
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		If ($comboboxOUTree.Text -ne $null)
		{
			
			add-logs -text 'LOG: Specific OU specified, moving user'
			$CanocicalName = $comboboxOUTree.Text
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$User | Move-ADObject -TargetPath $OUTOMove
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
}

function New-MUCHybridUser
{
	add-logs -text 'LOG: Checking DirSync option'
	
	If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$SyncServer = $textboxADSyncServer.text
		add-logs -text 'LOG: DirSync Enabled'
		add-logs -text "LOG: Running DirSync on $SyncServer"
		add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
		Try
		{
			Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		add-logs -text 'LOG: Done'
	}
	Else
	{
		add-logs -text "WARN: ADSync Server text box is empty"
		Add-Type -AssemblyName System.Windows.Forms
		[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
	}
	
	Add-Logs -text "LOG: Checking exchange connection"
	$Check = Get-ExchangeServer
	If ($Check)
	{
		Add-Logs -text "INFO: Connected to Exchange - creating the user"
		$UPN = "$($textboxUserLogonName.Text)$($comboboxDomains.SelectedItem)"
		add-logs -text "CMD: Enable-RemoteMailbox -Identity $UPN -RemoteRoutingAddress $($textboxHybridRemoteRouting.Text)"
		Enable-RemoteMailbox -Identity $UPN -RemoteRoutingAddress $textboxHybridRemoteRouting.Text
	}
	Else
	{
		add-logs -text "WARN: Not connected to Exchange / no access to Exchange module - cannot create exchange mailbox"
	}
	
}

function New-MUCO365User
{
	add-logs -text 'LOG: Checking DirSync option'
	#If DirSync is enabled
	If ($checkboxRunADSync.CheckState -eq 'Checked')
	{
		If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$SyncServer = $textboxADSyncServer.text
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text "LOG: Running DirSync on $SyncServer"
			add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
			Try
			{
				Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text "WARN: ADSync Server text box is empty"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
		}
	}
	#If DirSync is not enabled
	Else
	{
		add-logs -text "LOG: User is not being AD-Synced"
		
		add-logs -text 'LOG: All required parameters are valid'
		
		#Check to see if the user is being enabled upon creation or disabled
		
		#User is going to be disabled
		add-logs -text 'LOG: Checking enabled status of user'
		If ($checkboxBlockCred.Checked -eq $true)
		{
			#If user is going to be disabled
			add-logs -text 'LOG: User is Disabled'
			add-logs -text 'LOG: Creating user'
			If (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
			{
				add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
				$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				If ($Licenses2Add -ne $null)
				{
					License-MUCO365User
				}
				Try
				{
					add-logs -text 'LOG: Creating User'
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Adding Licenses'
					$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
					$licenseforuser | ForEach-Object {
						Add-Logs -text "LOG: Adding $_"
						
						Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
					}
					Add-Logs -text 'LOG: Done'
					
				}
				Catch
				{
					add-logs -text "WARN: $_"
					$InfoMessage = $_
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				
				#Find if user should be added to any Security groups
				add-logs -text 'LOG: Getting checked Security groups'
				$groups = $checkedlistboxO365SecurityGroups.CheckedItems
				If ($groups -ne $null)
				{
					add-logs -text 'LOG: Security Groups found'
					$DN = ($User).DisplayName
					foreach ($group in $groups)
					{
						add-logs -text "LOG: Adding $DN to $Group"
						$GroupGuid = ((get-msolgroup -All | where-object { $_.displayname -eq $Group }).ObjectID).GUID
						$UserGUID = (($User).ObjectID).GUID
						add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
						Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
					}
				}
				Else
				{
					add-logs -text 'LOG: No Security Groups checked'
				}
				Add-Logs -text 'LOG: Done with Security Groups'
				
				#Check user licenses, if licensed create and wait for mailbox
				Add-Logs -text 'LOG: Checking if license was applied to the user'
				If ($Licenses2Add -ne $Null)
				{
					Add-Logs -text 'LOG: License is applied to the new user'
					
					$ts = New-TimeSpan -Minutes 8
					
					$TermLoop = ((get-date) + $ts).ToString("HH:mm")
					Do
					{
						$DateNow = (Get-date).ToString("HH:mm")
						Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 20 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 10 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
						Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
					}
					Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
					
					add-logs -text 'LOG: Checking E-Mail address field for entered data'
					If ($textboxO365EmailAddress.Text -like "*@*")
					{
						add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
						If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
						{
							add-logs -text 'LOG: Email is different from UPN, proceeding.'
							
							Try
							{
								$PrimEmail = $textboxO365EmailAddress.Text
								add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
								Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
								add-logs -text "LOG: Done"
							}
							Catch
							{
								add-logs -text "WARN: $_"
								Add-Type -AssemblyName System.Windows.Forms
								[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
							}
						}
						Else
						{
							add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
						}
						
					}
					Else
					{
						add-logs -text "LOG: No E-Mail entered"
					}
					
					#Add any email aliases
					add-logs -text 'LOG: Checking Alias Addresses field for entered data'
					If ($textboxo365proxyaddresses.Text -ne $null)
					{
						add-logs -text 'LOG: Found Alias Addresses to add'
						$Proxys = $textboxo365proxyaddresses.Lines
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						$DN = $Mailbox.DisplayName
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding $Proxy for $DN"
							Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
							add-logs -text 'LOG: Done'
						}
					}
					Else
					{
						add-logs -text 'LOG: No Alias Addresses found'
					}
					add-logs -text 'LOG: Done with Alias Addresses'
					
					#Find if user should be added to any mail groups
					add-logs -text 'LOG: Getting checked mail groups'
					$groups = $checkedlistboxDISTROo365groups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Mail Groups found'
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
							If ((Get-UnifiedGroup).displayName -contains $group)
							{
								Add-Logs -text "LOG: $group is an Office 365 group"
								Add-Logs -text "LOG: Adding $DN to $Group"
								Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
								Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
								Add-Logs -text "LOG: Done"
							}
							Else
							{
								Add-Logs -text "LOG: $group is not an Office 365 group"
								
								add-logs -text "LOG: Adding $DN to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
					}
					Else
					{
						add-logs -text 'LOG: No Mail Groups checked'
					}
					Add-Logs -text 'LOG: Done with Mail Groups'
					
					#Shared Mailboxes
					Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
					$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
					#If there are shared mailboxes to add the user to (full access rights)
					If ($SharedMailboxes -ne $null)
					{
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								$Automap = $comboboxsharedmailboxautomap.Text
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
								If ($Automap -eq "False")
								{
									Add-Logs -text "LOG: AutoMapping set to False"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
								}
								Else
								{
									Add-Logs -text "LOG: AutoMapping set to True"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
						}
						ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
								Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
								Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
								Add-Logs -text "LOG: Done"
							}
							
						}
						Else
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
								Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
								Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
								Add-Logs -text 'LOG: Done'
							}
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No Shared Mailboxes selected'
					}
					Add-Logs -text 'LOG: Done with Shared Mailboxes'
					
					Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
					#Hide from GAL
					If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
					{
						Add-Logs -text 'LOG: Hide from global address list is set to True'
						Add-Logs -text 'LOG: Hiding mailbox from global address list'
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						If ($null -ne $mailbox)
						{
							Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
						}
						Else
						{
							Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
							$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
					}
					Else
					{
						Add-Logs -text 'LOG: Hide from global address list is set to False'
					}
				}
				Else
				{
					Add-Logs -text 'LOG: No license is being added for the new user'
					Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
					Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
					Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
				}
				
				#If MFA is set to TRUE then enable MFA for the user
				Add-Logs -text 'LOG: Checking MFA status for the user'
				If ($comboboxMFA.Selecteditem -eq "True")
				{
					$UserMFA = ($User).UserPrincipalName
					Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
					Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
					$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
					Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
					$Auth.RelyingParty = "*"
					Add-Logs -text 'CMD: $MFA = @($Auth)'
					$MFA = @($Auth)
					Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
					Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
					Add-Logs -text 'LOG: Done'
				}
				Else
				{
					Add-Logs -text 'LOG: MFA is set to False'
				}
				Add-Logs -text 'LOG: Done'
				
				Add-Logs -text 'LOG: Checking OWA'
				If ($comboboxOWA.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: OWA Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
					Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
				}
				Else
				{
					Add-Logs -text 'LOG: OWA Enabled'
					
				}
				
				Add-Logs -text 'LOG: Checking ActiveSync'
				If ($comboboxActiveSync.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: ActiveSync Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false'
					Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false
				}
				Else
				{
					Add-Logs -text 'LOG: ActiveSync Enabled'
					
				}
				
				Add-Logs -text 'LOG: Done'
				
			}
		}
		Else
		{
			#User is going to be enabled upon creation
			add-logs -text 'LOG: User is Enabled'
			add-logs -text 'LOG: Creating user'
			If (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
			{
				add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
				$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				If ($Licenses2Add -ne $null)
				{
					License-MUCO365User
				}
				Try
				{
					add-logs -text 'LOG: Creating User'
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Adding Licenses'
					$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
					$licenseforuser | ForEach-Object {
						Add-Logs -text "LOG: Adding $_"
						
						Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
					}
					Add-Logs -text 'LOG: Done'
				}
				Catch
				{
					add-logs -text "WARN: $_"
					$InfoMessage = $_
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				#Find if user should be added to any Security groups
				add-logs -text 'LOG: Getting checked Security groups'
				$groups = $checkedlistboxO365SecurityGroups.CheckedItems
				If ($groups -ne $null)
				{
					add-logs -text 'LOG: Security Groups found'
					$DN = ($User).DisplayName
					foreach ($group in $groups)
					{
						add-logs -text "LOG: Adding $DN to $Group"
						$GroupGuid = ((get-msolgroup -All | where-object { $_.displayname -eq $Group }).ObjectID).GUID
						$UserGUID = (($User).ObjectID).GUID
						add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
						Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
					}
				}
				Else
				{
					add-logs -text 'LOG: No Security Groups checked'
				}
				Add-Logs -text 'LOG: Done with Security Groups'
				
				#Check user licenses, if licensed create and wait for mailbox
				Add-Logs -text 'LOG: Checking if license was applied to the user'
				If ($Licenses2Add -ne $Null)
				{
					Add-Logs -text 'LOG: License is applied to the new user'
					
					$ts = New-TimeSpan -Minutes 8
					
					$TermLoop = ((get-date) + $ts).ToString("HH:mm")
					Do
					{
						$DateNow = (Get-date).ToString("HH:mm")
						Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 20 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 10 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
						Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
					}
					Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
					
					add-logs -text 'LOG: Checking E-Mail address field for entered data'
					If ($textboxO365EmailAddress.Text -like "*@*")
					{
						add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
						If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
						{
							add-logs -text 'LOG: Email is different from UPN, proceeding.'
							
							Try
							{
								$PrimEmail = $textboxO365EmailAddress.Text
								add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
								Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
								add-logs -text "LOG: Done"
							}
							Catch
							{
								add-logs -text "WARN: $_"
								Add-Type -AssemblyName System.Windows.Forms
								[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
							}
						}
						Else
						{
							add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
						}
						
					}
					Else
					{
						add-logs -text "LOG: No E-Mail entered"
					}
					
					#Add any email aliases
					add-logs -text 'LOG: Checking Alias Addresses field for entered data'
					If ($textboxo365proxyaddresses.Text -ne $null)
					{
						add-logs -text 'LOG: Found Alias Addresses to add'
						$Proxys = $textboxo365proxyaddresses.Lines
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						$DN = $Mailbox.DisplayName
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding $Proxy for $DN"
							Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
							add-logs -text 'LOG: Done'
						}
					}
					Else
					{
						add-logs -text 'LOG: No Alias Addresses found'
					}
					add-logs -text 'LOG: Done with Alias Addresses'
					
					#Find if user should be added to any mail groups
					add-logs -text 'LOG: Getting checked mail groups'
					$groups = $checkedlistboxDISTROo365groups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Mail Groups found'
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
							If ((Get-UnifiedGroup).displayName -contains $group)
							{
								Add-Logs -text "LOG: $group is an Office 365 group"
								Add-Logs -text "LOG: Adding $DN to $Group"
								Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
								Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
								Add-Logs -text "LOG: Done"
							}
							Else
							{
								Add-Logs -text "LOG: $group is not an Office 365 group"
								
								add-logs -text "LOG: Adding $DN to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
					}
					Else
					{
						add-logs -text 'LOG: No Mail Groups checked'
					}
					Add-Logs -text 'LOG: Done with Mail Groups'
					
					#Shared Mailboxes
					Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
					$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
					#If there are shared mailboxes to add the user to (full access rights)
					If ($SharedMailboxes -ne $null)
					{
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								$Automap = $comboboxsharedmailboxautomap.Text
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
								If ($Automap -eq "False")
								{
									Add-Logs -text "LOG: AutoMapping set to False"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
								}
								Else
								{
									Add-Logs -text "LOG: AutoMapping set to True"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
						}
						ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
								Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
								Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
								Add-Logs -text "LOG: Done"
							}
							
						}
						Else
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
								Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
								Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
								Add-Logs -text 'LOG: Done'
							}
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No Shared Mailboxes selected'
					}
					Add-Logs -text 'LOG: Done with Shared Mailboxes'
					
					Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
					#Hide from GAL
					If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
					{
						Add-Logs -text 'LOG: Hide from global address list is set to True'
						Add-Logs -text 'LOG: Hiding mailbox from global address list'
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						If ($null -ne $mailbox)
						{
							Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
						}
						Else
						{
							Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
							$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
					}
					Else
					{
						Add-Logs -text 'LOG: Hide from global address list is set to False'
					}
				}
				Else
				{
					Add-Logs -text 'LOG: No license is being added for the new user'
					Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
					Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
					Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
				}
				
				#If MFA is set to TRUE then enable MFA for the user
				Add-Logs -text 'LOG: Checking MFA status for the user'
				If ($comboboxMFA.Selecteditem -eq "True")
				{
					$UserMFA = ($User).UserPrincipalName
					Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
					Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
					$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
					Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
					$Auth.RelyingParty = "*"
					Add-Logs -text 'CMD: $MFA = @($Auth)'
					$MFA = @($Auth)
					Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
					Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
					Add-Logs -text 'LOG: Done'
				}
				Else
				{
					Add-Logs -text 'LOG: MFA is set to False'
				}
				Add-Logs -text 'LOG: Done'
				
				Add-Logs -text 'LOG: Checking OWA'
				If ($comboboxOWA.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: OWA Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
					Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
				}
				Else
				{
					Add-Logs -text 'LOG: OWA Enabled'
					
				}
				
				Add-Logs -text 'LOG: Checking ActiveSync'
				If ($comboboxActiveSync.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: ActiveSync Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false'
					Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false
				}
				Else
				{
					Add-Logs -text 'LOG: ActiveSync Enabled'
					
				}
				
				Add-Logs -text 'LOG: Done'
			}
		}
	}
}

function Update-O365DisplayNameTextBox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365DisplayName -ErrorAction SilentlyContinue).UserFormatO365DisplayName
		#Create an array that we will use for formatting
		$O365DisplayNameFormatString = @()
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%Firstname% %LastName%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatO365DisplayName -Value "%FirstName% %LastName%" -Force | Out-Null
		}
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$O365DisplayNameFormatString += $textboxO365FirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$O365DisplayNameFormatString += $textboxO365LastName.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$O365DisplayNameFormatString += $space
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$O365DisplayNameFormatString += $textboxUserLogonName.text
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$O365DisplayNameFormatString += $textboxO365EmailAddress.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$O365DisplayNameFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$O365DisplayNameFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "UserPrincipalNameDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			ElseIf ($_ -eq "UPNDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			Else
			{
				$O365DisplayNameFormatString += $_
			}
			$textboxO365DisplayName.Text = [String]::Join('', $O365DisplayNameFormatString)
		}
		
	}
}

function Update-O365EmailTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365Email -ErrorAction SilentlyContinue).UserFormatO365Email
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%FirstLetterFirstName%%LastName%%UserPrincipalNameDomain%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatO365Email -Value $config -Force | Out-Null
		}
		#Create an array that we will use for formatting
		$O365EmailFormatString = @()
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$O365EmailFormatString += $textboxO365FirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$O365EmailFormatString += $textboxO365LastName.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$O365EmailFormatString += $space
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$O365EmailFormatString += $textboxUserLogonName.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$O365EmailFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$O365EmailFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "UserPrincipalNameDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			ElseIf ($_ -eq "UPNDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			Else
			{
				$O365EmailFormatString += $_
			}
			$textboxO365EmailAddress.Text = [String]::Join('', $O365EmailFormatString)
		}
		
	}
}

function Update-O365UserPrincipalNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365UserPrincipalName -ErrorAction SilentlyContinue).UserFormatO365UserPrincipalName
		#Create an array that we will use for formatting
		$O365UserPrincipalNameFormatString = @()
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365FirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365LastName.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$O365UserPrincipalNameFormatString += $space
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$O365UserPrincipalNameFormatString += $textboxO365EmailAddress.text
			}
			Else
			{
				$O365UserPrincipalNameFormatString += $_
			}
			$textboxO365UPN.Text = [String]::Join('', $O365UserPrincipalNameFormatString)
		}
		
	}
}

#endregion

$MainForm_Load = {
	

	
	$MFALogin = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name MFALogin -ErrorAction SilentlyContinue).MFALogin
	If ($MFALogin -eq 1)
	{
		$radiobuttonMFALogin.Checked = $true
	}
	Else
	{
		$radiobuttonNonMFALogin.Checked = $true
	}
	

	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		#Set-LightMode
		
	}
	
	
}

$MainForm_DuringShow = {
	
	Import-Module ActiveDirectory -ErrorAction SilentlyContinue
	Import-Module ADSync -ErrorAction SilentlyContinue
	
	#DEBUG
	#$tabcontrolUserProperties.Enabled = $true
	#$groupboxNoAdSync.Enabled = $true
	
	
	
	$copyActiveDirectoryUserToolStripMenuItem.Enabled = $false
	$copyOffice365UserToolStripMenuItem.Enabled = $false
	
	$textboxADSyncServer.Enabled = $false
	
	$datetimepickerDATE.Refresh()
	
	$radiobuttonNever.Checked = $true
	$datetimepickerDATE.Enabled = $false
	$datetimepickerTIME.Enabled = $false
	
	$datetimepickerTIME.Text = "05:00 PM"
	
	$MainForm.MaximizeBox = $false
	
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1
	#DEBUG
	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $false

	#Disable the Office 365 license drop down until we connect to MSOnline
	#$comboboxO365Licenses.Enabled = $False
	$comboboxO365Licenses.Text = "Please connect to Office 365 to assign a license"
	
	#DEBUG
	$tabcontrolUserProperties.Enabled = $false
	
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	
	$comboboxO365HidefromGAL.SelectedItem = "False"
	
	$labelTimeLeft.Text = ""
	
	$global:ExternalLog = "$env:TEMP\MUC.txt"
	$labelLogFile.Text = $global:ExternalLog
	
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items "Domain Users"
	$comboboxPrimaryGroup.SelectedItem = "Domain Users"
	
	$AlwaysADCreate = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysADCreate -ErrorAction SilentlyContinue).AlwaysADCreate
	If ($AlwaysADCreate -eq 1)
	{
		$checkboxCreateAnActiveDirect.Checked = $true
	}
	
	$AlwaysO365Create = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysO365Create -ErrorAction SilentlyContinue).AlwaysO365Create
	If ($AlwaysO365Create -eq 1)
	{
		$checkboxconfigo365user.Checked = $true
	}
	
	$ExchangeSetup = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ExchangeSetup -ErrorAction SilentlyContinue).ExchangeSetup
	If ($ExchangeSetup -eq "Hybrid")
	{
		$radiobuttonHybrid.Checked = $true
	}
	ElseIf ($ExchangeSetup -eq "Cloud Only")
	{
		$radiobuttonCloudOnly.Checked = $true
	}
	Else 
	{
		$radiobuttonOther.Checked = $true
	}
	
	
	If ($checkboxconfigo365user.Checked -eq $true)
	{
		$groupboxExchangeSetup.Enabled = $true
		$groupbox2FA.Enabled = $true
		$groupboxHybrid.Enabled = $true
		$textboxexchangeserverURL.Enabled = $true
	}
	Else
	{
		$groupboxExchangeSetup.Enabled = $false
		$groupbox2FA.Enabled = $false
		$groupboxHybrid.Enabled = $false
		$textboxexchangeserverURL.Enabled = $false
	}
	
	
	$comboboxActiveSync.SelectedItem = "True"
	

	$ExchangeURL = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ExchangeURL -ErrorAction SilentlyContinue).ExchangeURL
	
	$textboxexchangeserverURL.Text = $ExchangeURL
	
	
	$ExchangeWhere = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ExchangeWhere -ErrorAction SilentlyContinue).ExchangeWhere
	If ($ExchangeWhere -eq "Remote")
	{
		$radiobuttonexchangeremote.Checked = $true
	}
	Elseif ($radiobuttonLocal.Checked -eq $true)
	{
		$radiobuttonLocal.Checked = $true
		
	}
	Else
	{
		#Do Nothing
	}
	
	$RemoteFWDINGDomain = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ExchangeRemoteDomain -ErrorAction SilentlyContinue).ExchangeRemoteDomain
	$textboxHybridRemoteRouting.Text = $RemoteFWDINGDomain
	
	If ($radiobuttonHybrid.Checked -eq $true)
	{
		#Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name ExchangeSetup -Value Hybrid -Force | Out-Null
		
		$groupboxHybrid.Enabled = $true
		$groupboxADGroups.Enabled = $true
		$groupboxNoAdSync.Enabled = $false
		$checkboxRunADSync.checked = $true
	}
	
	$ADSyncServer = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ADSyncServer -ErrorAction SilentlyContinue).ADSyncServer
	$textboxADSyncServer.Text = $ADSyncServer
}

$resetFormToolStripMenuItem_Click = {
	Reset-Form
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateAnActiveDirect.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		Try
		{
			New-MUCUser
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
	
		Try
		{
			New-MUCO365User
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
		
		#### ACTIVE DIRECTORY USER CREATION PORTION ####
		
		add-logs -text 'LOG: Only an Active Directory user is being created'
		Try
		{
			New-MUCUser
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
		
		
		#### OFFICE 365 USER CREATION PORTION ####
		
		
		add-logs -text 'LOG: Office 365 User is being created'
		Try
		{
			if ($radiobuttonHybrid.Checked -eq $true)
			{
				add-logs -text 'LOG: A Hybrid user is being created'
				New-MUCHybridUser
			}
			else
			{
				New-MUCO365User
			}
			
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
	
	$ResetForm = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ResetForm -ErrorAction SilentlyContinue).ResetForm
	If ($ResetForm -eq 1)
	{
		Reset-Form
	}
}


$textboxDisplayName_TextChanged = {
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'White'
			$labelhybridusermailbox.Text = $textboxDisplayName.text
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'LightCoral'
			$labelhybridusermailbox.Text = $textboxDisplayName.text
		}
		
	}
	Else
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'Black'
			$labelhybridusermailbox.Text = $textboxDisplayName.text
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'Firebrick'
			$labelhybridusermailbox.Text = $textboxDisplayName.text
		}
		
	}
	
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxDisplayName_ChangeFocus = {
	$ADDisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDisplayName -ErrorAction SilentlyContinue).ADDisplayName
	If ($ADDisplayName -eq 1)
	{
		$words = $textboxDisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxLastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxLastName_ChangeFocus = {
	$ADLastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADLastName -ErrorAction SilentlyContinue).ADLastName
	If ($ADLastName -eq 1)
	{
		$words = $textboxLastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxLastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxFirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
	
	
		
	
}

$textboxFirstName_ChangeFocus = {
	$ADFirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADFirstName -ErrorAction SilentlyContinue).ADFirstName
	If ($ADFirstName -eq 1)
	{
		$words = $textboxFirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxFirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxInitials_ChangeFocus = {
	$ADInitials = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADInitials -ErrorAction SilentlyContinue).ADInitials
	If ($ADInitials -eq 1)
	{
		$words = $textboxInitials.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxInitials.Text = $TextInfo.ToTitleCase($words)
	}
}


$buttonGeneratePassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword
		$textboxPasswordGen.Text = $Password
		$maskedtextboxpassword.Text = $Password
		$textboxConfirmPassword.text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxpassword.Text = $textboxPasswordGen.Text
		$textboxConfirmPassword.text = $textboxPasswordGen.Text
	}
	
}

$textboxConfirmPassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'White'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Black'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Firebrick'
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}

			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateAnActiveDirect.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = $textboxUserLogonName.text
		$comboboxO365Domains.SelectedItem = $comboboxDomains.SelectedItem
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'White'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Black'
		}
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Firebrick'
		}
		
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonNonMFALogin.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: $((Get-ChildItem -Path $($env:LOCALAPPDATA+"\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse ).FullName|?{$_ -notmatch "_none_"}|select -First 1)'
		$Modules = $((Get-ChildItem -Path $($env:LOCALAPPDATA + "\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse).FullName | Where-Object{ $_ -notmatch "_none_" } | Select-Object -First 1)
		If ($Modules -eq $Null)
		{
			add-logs -text 'WARN: MFA Module was not found'
			$InfoMessage = "Exchange Online MFA Module was not found, please make sure you have downloaded and installed it from your tenant https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/mfa-connect-to-exchange-online-powershell?view=exchange-ps"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		$EXOSession = New-ExoPSSession
		Import-PSSession $EXOSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		$copyOffice365UserToolStripMenuItem.Enabled = $true
		
		add-logs -text 'LOG: Connected to Office 365!'
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'MediumSeaGreen'
		}
		Else
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'Green'
		}
		
		
		$Global:O365_Pre_Req++
		#Create just an AD User
		If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD nad O365 User (w/ ADSync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD And O365 User (no Sync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 User no adsync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 user with ADSync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$buttonConnectToOffice365.ForeColor = 'White'
		}
		Else
		{
			$buttonConnectToOffice365.ForeColor = 'Black'
		}
		
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		#add-logs -text 'LOG: Enabling Licenses combobox'
		#add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		#$comboboxO365Licenses.Enabled = $True
		#add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = ""
		
		#Cache licenses to use in other forms
		$LicenseArray | Out-File "$env:TEMP\MUCLicenses.txt" -Force -ErrorAction SilentlyContinue
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		#add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		#Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = "Click to select an Office 365 license"

		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup -All | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$MailGroups = (Get-MsolGroup -All | Where-Object { ($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataMailGroups = $MailGroups
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $MailGroups
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup -All | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$SecurityGroups = (Get-MsolGroup -All | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataSecurityGroups = $SecurityGroups
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $SecurityGroups
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		$comboboxO365HidefromGAL.SelectedItem = "False"
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword -O365
		$textboxo365passwordgen.Text = $Password
		$maskedtextboxo365password.Text = $Password
		$textboxo365confirmpassword.Text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
		$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
		add-logs -text 'LOG: Done'
	}

	
	
}


$checkboxRunADSync_CheckedChanged = {
	If ($checkboxRunADSync.Checked -eq $True)
	{
		$groupboxNoAdSync.Enabled = $false
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
		
		$textboxADSyncServer.Enabled = $true
		
	}
	elseif ($checkboxRunADSync.Checked -eq $false)
	{
		$groupboxNoAdSync.Enabled = $True
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
		
		$textboxADSyncServer.Enabled = $false
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$buttonExit_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged = {
	If ((($textboxO365LastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	Else
	{
		Update-O365EmailTextbox
		Update-O365DisplayNameTextBox
		Update-O365UserPrincipalNameTextbox
	}
}
$textboxO365LastName_FocusChanged = {
	$O365LastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365LastName -ErrorAction SilentlyContinue).O365LastName
	If ($O365LastName -eq 1)
	{
		$words = $textboxO365LastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365LastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365FirstName_TextChanged = {
	If ((($textboxO365FirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	Else
	{
		Update-O365EmailTextbox
		Update-O365DisplayNameTextBox
		Update-O365UserPrincipalNameTextbox
	}
	
}

$textboxO365FirstName_FocusChanged = {
	$O365FirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365FirstName -ErrorAction SilentlyContinue).O365FirstName
	If ($O365FirstName -eq 1)
	{
		$words = $textboxO365FirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365FirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365Initials_TextChanged = {
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged = {
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
	If ($Global:ExternalLog -ne $null)
	{
		$console.Text | Out-File $Global:ExternalLog
	}
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	if ($checkboxconfigo365user.CheckState -eq 'checked')
	{
		$tabpageOffice365.Enabled = $true
		$groupboxExchangeSetup.Enabled = $true
		$groupbox2FA.Enabled = $true
		
		$ExchangeSetup = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ExchangeSetup -ErrorAction SilentlyContinue).ExchangeSetup
		If ($ExchangeSetup -eq "Hybrid")
		{
			$radiobuttonHybrid.Checked = $true
		}
		ElseIf ($ExchangeSetup -eq "Cloud Only")
		{
			$radiobuttonCloudOnly.Checked = $true
		}
		Else
		{
			$radiobuttonOther.Checked = $true
		}
		
		
		
	}
	Else
	{
		$tabpageOffice365.Enabled = $false
		$groupboxExchangeSetup.Enabled = $false
		$groupbox2FA.Enabled = $false
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		If ($null -ne (Get-Module -ListAvailable -Name "ADSync"))
		{
			add-logs -text 'LOG: DirSync found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			$groupboxNoAdSync.Enabled = $true
			$comboboxOWA.SelectedItem = "True"
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Enabling ADSync CheckBox'
		$checkboxRunADSync.Enabled = $True
		add-logs -text 'LOG: Enabling No ADSync Groupbox'
		$groupboxNoAdSync.Enabled = $true
		add-logs -text 'LOG: Done'
	}
	
	
	
	If ($radiobuttonOther.Checked -eq $true)
	{
		$groupboxHybrid.Enabled = $false
		$groupboxADSync.Enabled = $true
		$groupboxNoAdSync.Enabled = $true
	}
	If ($radiobuttonCloudOnly.Checked -eq $true)
	{
		$groupboxHybrid.Enabled = $flase
		$groupboxADSync.Enabled = $false
		$groupboxNoAdSync.Enabled = $true
	}
	If ($radiobuttonHybrid.Checked -eq $true)
	{
		$groupboxHybrid.Enabled = $true
		$groupboxADSync.Enabled = $true
		$groupboxNoAdSync.Enabled = $false
	}
	
	
	$ExchangeWhere = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ExchangeWhere -ErrorAction SilentlyContinue).ExchangeWhere
	If ($ExchangeWhere -eq "Remote")
	{
		$radiobuttonexchangeremote.Checked = $true
	}
	Elseif ($radiobuttonLocal.Checked -eq $true)
	{
		$radiobuttonLocal.Checked = $true
		
	}
	Else
	{
		$CallEMS = ". '$env:ExchangeInstallPath\bin\RemoteExchange.ps1'; Connect-ExchangeServer -auto -ClientApplication:ManagementShell "
		Invoke-Expression $CallEMS
		$Check = Get-ExchangeServer
		If ($Check)
		{
			$radiobuttonLocal.Checked = $true
			$labelExchangeNotConnected.Text = "Connected"
			$labelExchangeNotConnected.ForeColor = 'MediumSeaGreen'
		}
		Else
		{
			$radiobuttonexchangeremote.Checked = $true
		}
	}
	
	
	
	
	
}

$checkboxCreateAnActiveDirect_CheckedChanged = {
	
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateAnActiveDirect.Checked -eq $true))
	{
		If ($Null -ne (Get-Module -ListAvailable -Name "ActiveDirectory"))
		{
			add-logs -text 'LOG: Enabling AD User creation'
			$tabcontrolUserProperties.Enabled = $true
			add-logs -text 'LOG: Done'
			
			Add-Logs -text "Enabling Copy AD User Menu Item"
			$copyActiveDirectoryUserToolStripMenuItem.Enabled = $true
			add-logs -text 'LOG: Done'
			
			
			add-logs -text 'LOG: Loading Organizational Unit Tree'
			add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
			$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName
			If ($null -eq $OUTree)
			{
				$InfoMessage = 'Could not load Organizational Unit structure'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxOUTree.Enabled = $false
			}
			Else
			{
				add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
				Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
				add-logs -text 'LOG: Done'
				$comboboxOUTree.Enabled = $true
			}
			
			add-logs -text 'LOG: Getting Active Directory Groups'
			add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
			$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
			$Global:OriginalData = $Groups
			If ($null -eq $Groups)
			{
				add-logs -text 'WARN: No Active Directory Groups were found'
				$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
				Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting NetBIOS Name'
			add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
			$Netbiosname = (Get-ADDomain).NetBIOSName
			If ($null -eq $Netbiosname)
			{
				add-logs -text 'WARN: No NetBIOS Name was found'
				$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$textboxUPNDomain.Text = "Not Available"
			}
			Else
			{
				$textboxUPNDomain.Text = $Netbiosname + "\"
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting UPN Suffixes'
			add-logs -text 'CMD: $Forest = Get-ADForest'
			$Forest = Get-ADForest
			If ($null -eq $Forest)
			{
				add-logs -text 'WARN: No Active Directory Forest was found'
				$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxDomains.Enabled = $false
			}
			Else
			{
				$comboboxDomains.Enabled = $true
				$UPNs = @()
				add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
				$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
				If ($extraUPNs -ne $Null)
				{
					foreach ($extraUPN in $extraUPNs)
					{
						$UPNs += "@" + $extraUPN
					}
				}
				add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
				$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
				Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
			}
			add-logs -text 'LOG: Done'
			
			$comboboxDomains.SelectedIndex = 0
		}
		Else
		{
			$InfoMessage = "Could not locate the ActiveDirectory module on $env:COMPUTERNAME. This module is required to create an Active Directory user"
			$InfoTitle = "Error"
			Show-MessageBox_psf
			$checkboxCreateAnActiveDirect.CheckState = 'Unchecked'
		}
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	
	Update-SamAccountNameTextbox
	Update-DisplayNameTextbox
	Update-EmailTextbox
	
	$textboxSamAccount.Text = $textboxUserLogonName.Text
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'White'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Black'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Firebrick'
		}
		
	}
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxUserLogonName_FocusChanged = {
	$ADUPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADUPN -ErrorAction SilentlyContinue).ADUPN
	If ($ADUPN -eq 1)
	{
		$words = $textboxUserLogonName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxUserLogonName.Text = $TextInfo.ToTitleCase($words)
	}
}




$maskedtextboxpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'White'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'LightCoral'
			
		}
		
	}
	Else
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'Black'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'Firebrick'
			
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}



$linklabelBradleyWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHub_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'White'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'LightCoral'
		}
	}
	Else
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'Black'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'Firebrick'
		}
	}
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365DisplayName_FocusChanged = {
	$O365DisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365DisplayName -ErrorAction SilentlyContinue).O365DisplayName
	If ($O365DisplayName -eq 1)
	{
		$words = $textboxO365DisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365DisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365UPN_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		Update-O365EmailTextbox
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'White'
		}
		Else
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Black'
		}
		
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Firebrick'
		}
		
		
	}
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_FocusChanged = {
	$O365UPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365UPN -ErrorAction SilentlyContinue).O365UPN
	If ($O365UPN -eq 1)
	{
		$words = $textboxO365UPN.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365UPN.Text = $TextInfo.ToTitleCase($words)
	}
}


$maskedtextboxo365password_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'White'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'lightcoral'
		}
	}
	Else
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'Black'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'Firebrick'
		}
	}
	
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}

$comboboxO365Licnses_Click = {
	Show-O365LicenseSelection_psf
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	Toogle-LicenseStatus
}





$comboboxO365countrycode_SelectedIndexChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
		}
		
	}
	Else
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'White'
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
		
	}
	
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'LightCoral'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'LightCoral'
	}
	Else
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'Firebrick'
	}
	
	
}



$saveLogAsToolStripMenuItem_Click = {
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged = {
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}




$versionToolStripMenuItem_Click = {
	$InfoMessage = "
Version Number: $Version
Build Date: $Builddate
Author: Bradley Wyatt
"
	$InfoTitle = "Build Information"
	Show-MessageBox_psf
	
}


$changelogToolStripMenuItem_Click = {
	Show-ChangeLog_psf
	
}

$labelChangelog_Click = {
	Show-ChangeLog_psf
	
}

$externalLogFileToolStripMenuItem_Click = {
	# Class Details:  https://msdn.microsoft.com/en-us/library/system.windows.forms.savefiledialog(v=vs.110).aspx 
	$SaveFileDialog = New-Object windows.forms.savefiledialog
	$SaveFileDialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$SaveFileDialog.title = "Log File Location"
	#$SaveFileDialog.filter = "All files (*.*)| *.*"   
	#$SaveFileDialog.filter = "PublishSettings Files|*.publishsettings|All Files|*.*" 
	$SaveFileDialog.filter = "Log Text File|*.txt"
	$SaveFileDialog.ShowHelp = $True
	$result = $SaveFileDialog.ShowDialog()
	$result
	$Global:ExternalLog = $SaveFileDialog.filename
	Write-Host $result
	If ($result -eq "Ok")
	{
		
		$labelLogFile.Text = $global:ExternalLog
		
	}
}


$radiobuttonExpireOn_CheckedChanged = {
	#Enable the Date Date / Time picker
	$datetimepickerDATE.Enabled = $true
	#Enable the Time date/time picker
	$datetimepickerTIME.Enabled = $true
	
}

$radiobuttonNever_CheckedChanged = {
	#Disable the Date Date/Time picker
	$datetimepickerDATE.Enabled = $false
	#Disable the Time Date/Time picker
	$datetimepickerTIME.Enabled = $false
	
}

$datetimepickerDATE_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$datetimepickerTIME_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$checkedlistboxGroups_SelectedIndexChanged = {

	If ($click -ne 1)
	{
		$CachedCheckedGroups = Get-Content $CacheGroups -ErrorAction SilentlyContinue
		
		$checkedlistboxGroups.CheckedItems | ForEach-Object{
			#If checked and not in file, add and append
			$CheckItem = Get-Content $CacheGroups | Select-String $_
			If ($null -eq $CheckItem)
			{				
				$_ | Out-File $CacheGroups -Force -Append
			}
		}
		
		$CachedCheckedGroups = Get-Content $CacheGroups -ErrorAction SilentlyContinue
		
		
		#Get all unchecked items
		$UncheckedItems = $checkedlistboxGroups.Items | Where-Object { $checkedlistboxGroups.CheckedItems -notcontains $_ }
		
		#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
		Compare-Object -ReferenceObject $CachedCheckedGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
			# == means that the obj is unchecked but present on the file, we need to remove from file
			If ($_.SideIndicator -eq "==")
			{
				#Remove the item that is present on the list but unchecked from the file
				$Info = $CachedCheckedGroups | select-string -pattern $_.InputObject -notmatch
				$InfoMessage = $Info
				$Info | Out-File $CacheGroups -Force -ErrorAction SilentlyContinue
			}
		}
	}
	
	
	$Items = @()
	$Items += $checkedlistboxGroups.CheckedItems
	$Items += "Domain Users"
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items $Items
	
	
}





$optionsToolStripMenuItem_Click = {
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
}

$textboxDescription_FocusChanged = {
	$ADDescription = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription
	If ($ADDescription -eq 1)
	{
		$words = $textboxDescription.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDescription.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxoffice_FocusChanged = {
	$ADOffice = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADOffice -eq 1)
	{
		$words = $textboxoffice.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxoffice.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxSamAccount_FocusChanged = {
	$ADSamAccountName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADSamAccountName -ErrorAction SilentlyContinue).ADSamAccountName
	If ($ADSamAccountName -eq 1)
	{
		$words = $textboxSamAccount.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxSamAccount.Text = $TextInfo.ToTitleCase($words)
	}
	
}



$textboxStreet_FocusChanged = {
	$ADStreet = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADStreet -ErrorAction SilentlyContinue).ADStreet
	If ($ADStreet -eq 1)
	{
		$words = $textboxstreet.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstreet.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxcity_FocusChanged = {
	$ADCity = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCity -ErrorAction SilentlyContinue).ADCity
	If ($ADCity -eq 1)
	{
		$words = $textboxcity.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxcity.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxstate_FocusChanged = {
	$ADState = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState
	If ($ADState -eq 1)
	{
		$words = $textboxstate.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstate.Text = $TextInfo.ToTitleCase($words)
	}
	
	
}

$textboxjobtitle_FocusChanged = {
	$ADJobTitle = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADJobTitle -ErrorAction SilentlyContinue).ADJobTitle
	If ($ADJobTitle -eq 1)
	{
		$words = $textboxjobtitle.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxjobtitle.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxDepartment_FocusChanged = {
	$ADDepartment = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment
	If ($ADDepartment -eq 1)
	{
		$words = $textboxDepartment.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDepartment.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxCompany_FocusChanged = {
	$ADCompany = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany
	If ($ADCompany -eq 1)
	{
		$words = $textboxCompany.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxCompany.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxSearchGroups_TextChanged = {
	
	$click = 1
	$Filter = $textboxSearchGroups.text
	$Results = $OriginalData | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxGroups -Items $Results
	
	Get-Content $CacheGroups -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxGroups.Items -contains $_)
		{
			$checkedlistboxGroups.SelectedItem = $_
			$index = $checkedlistboxGroups.SelectedIndex
			$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchGroups.Focus()
	
}


$textboxSearchO365SecurityGroups_TextChanged = {
	$click = 1
	
	
	$Filter = $textboxSearchO365SecurityGroups.text
	$Results = $OriginalDataSecurityGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $Results
	
	Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxO365SecurityGroups.Items -contains $_)
		{
			$checkedlistboxO365SecurityGroups.SelectedItem = $_
			$index = $checkedlistboxO365SecurityGroups.SelectedIndex
			$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchO365SecurityGroups.Focus()
	
}

$textboxO365MailGroups_TextChanged={
	
	$click = 1
	$Filter = $textboxO365MailGroups.text
	$Results = $OriginalDataMailGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $Results
	
	Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxDISTROo365groups.Items -contains $_)
		{
			$checkedlistboxDISTROo365groups.SelectedItem = $_
			$index = $checkedlistboxDISTROo365groups.SelectedIndex
			$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxO365MailGroups.Focus()
	
	
	
	
}

$textboxO365street_FocusChanged={
	$O365Street = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365Street -ErrorAction SilentlyContinue).O365Street
	If ($O365Street -eq 1)
	{
		$words = $textboxO365street.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365street.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxo365city_FocusChanged={
	$O365City = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City
	If ($O365City -eq 1)
	{
		$words = $textboxo365city.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365city.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxo365state_FocusChanged={
	$O365State = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State
	If ($O365State -eq 1)
	{
		$words = $textboxo365state.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365state.Text = $TextInfo.ToTitleCase($words)
	}
	
}


$textboxemployeenumber_TextChanged={
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
}

$textboxEmployeeID_TextChanged={
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
}

$textboxEmail_TextChanged={
	
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
	
}

$copyActiveDirectoryUserToolStripMenuItem_Click={
	
	#Set value to 1 so we dont have string settings get in the way
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 1 -Force | Out-Null
	Show-CopyFromUser_psf
	$CopyUser = $CopyFromUser_comboboxcopyuser
	$Job = $PSJob
	$UserJob = ($Job | Where-Object { $_.Name -like $CopyUser })[0]
	$UserTemplate = Get-ADUser -identity ($UserJob).ObjectGuid -properties *
	Copy-ADUserAttributes
	#Set back to 0
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 0 -Force | Out-Null
	Get-Job | Remove-Job
	
}

$textboxSamAccount_TextChanged={
	Update-EmailTextbox
	Update-DisplayNameTextbox
	Update-UserPrincipalNameTextbox
}
$textboxSamAccount_FocusChanged = {
	#Update-EmailTextbox
	Update-DisplayNameTextbox
	#Update-UserPrincipalNameTextbox
}


$clearFormToolStripMenuItem_Click={
	Reset-Form
	
}


$exitToolStripMenuItem1_Click={
	$MainForm.close()
	
}

$copyToolStripMenuItem_Click={
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
	
}

$checkedlistboxDISTROo365groups_SelectedIndexChanged = {
	$CopyO365User = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyO365User -ErrorAction SilentlyContinue).CopyO365User
	If ($CopyO365User -ne 1)
	{
		If ($click -ne 1)
		{
			$CachedCheckedDistroGroups = Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue
			
			$checkedlistboxDISTROo365groups.CheckedItems | ForEach-Object{
				#If checked and not in file, add and append
				$CheckItem = Get-Content $CacheDistroGroupsFile | Select-String $_
				If ($null -eq $CheckItem)
				{
					$_ | Out-File $CacheDistroGroupsFile -Force -Append
				}
			}
			
			$CachedCheckedDistroGroups = Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue
			
			
			#Get all unchecked items
			$UncheckedItems = $checkedlistboxDISTROo365groups.Items | Where-Object { $checkedlistboxDISTROo365groups.CheckedItems -notcontains $_ }
			
			#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
			Compare-Object -ReferenceObject $CachedCheckedDistroGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
				# == means that the obj is unchecked but present on the file, we need to remove from file
				If ($_.SideIndicator -eq "==")
				{
					#Remove the item that is present on the list but unchecked from the file
					$Info = $CachedCheckedDistroGroups | select-string -pattern $_.InputObject -notmatch
					$InfoMessage = $Info
					$Info | Out-File $CacheDistroGroupsFile -Force -ErrorAction SilentlyContinue
				}
			}
		}
	}
	
}

$checkedlistboxO365SecurityGroups_SelectedIndexChanged = {
	$CopyO365User = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyO365User -ErrorAction SilentlyContinue).CopyO365User
	If ($CopyO365User -ne 1)
	{
		If ($click -ne 1)
		{
			$CachedCheckedSecurityGroups = Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue
			
			$checkedlistboxO365SecurityGroups.CheckedItems | ForEach-Object{
				#If checked and not in file, add and append
				$CheckItem = Get-Content $CacheSecurityGroupsFile | Select-String $_
				If ($null -eq $CheckItem)
				{
					$_ | Out-File $CacheSecurityGroupsFile -Force -Append
				}
			}
			
			$CachedCheckedSecurityGroups = Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue
			
			
			#Get all unchecked items
			$UncheckedItems = $checkedlistboxO365SecurityGroups.Items | Where-Object { $checkedlistboxO365SecurityGroups.CheckedItems -notcontains $_ }
			
			#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
			Compare-Object -ReferenceObject $CachedCheckedSecurityGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
				# == means that the obj is unchecked but present on the file, we need to remove from file
				If ($_.SideIndicator -eq "==")
				{
					#Remove the item that is present on the list but unchecked from the file
					$Info = $CachedCheckedSecurityGroups | select-string -pattern $_.InputObject -notmatch
					$InfoMessage = $Info
					$Info | Out-File $CacheSecurityGroupsFile -Force -ErrorAction SilentlyContinue
				}
			}
		}
	}
	
}

$checkboxUserMustChangePasswo_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
	
}

$checkboxUserCannotChangePass_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both 'User Must Change Password at Next Logon' and User 'Cannot Change Password' for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
		
	}
	
	
}

$checkboxPasswordNeverExpires_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
	
}


$copyOffice365UserToolStripMenuItem_Click={
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force | Out-Null
	Show-CopyFromO365User_psf
	Copy-O365UserAttributes
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force | Out-Null
	
}

$MainForm_Closing=[System.Windows.Forms.FormClosingEventHandler]{
Get-PSSession | Remove-PSSession -ErrorAction SilentlyContinue
	
}



$comboboxO365Domains_SelectedIndexChanged={
	Update-O365EmailTextbox
}


$comboboxDomains_SelectedIndexChanged={
	Update-EmailTextbox
	
}

$radiobuttonHybrid_CheckedChanged={
	If ($radiobuttonHybrid.Checked -eq $true)
	{
		#Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name ExchangeSetup -Value Hybrid -Force | Out-Null
		
		$groupboxHybrid.Enabled = $true
		$groupboxADGroups.Enabled = $true
		$groupboxNoAdSync.Enabled = $false
		$checkboxRunADSync.checked -eq $true
	}
	
	
}

$radiobuttonCloudOnly_CheckedChanged={
	If ($radiobuttonCloudOnly.Checked -eq $true)
	{
		#Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name ExchangeSetup -Value "Cloud Only" -Force | Out-Null
		
		$groupboxHybrid.Enabled = $false
		$groupboxADGroups.Enabled = $false
		$groupboxNoAdSync.Enabled = $true
	}

	
}



$radiobuttonOther_CheckedChanged={
	If ($radiobuttonOther.Checked -eq $true)
	{
		#Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name ExchangeSetup -Value Other -Force | Out-Null
		
		
		$groupboxHybrid.Enabled = $false
		$groupboxADGroups.Enabled = $true
		$groupboxNoAdSync.Enabled = $true
	}
	
}

$radiobuttonexchangeremote_CheckedChanged = {
	If ($radiobuttonexchangeremote.Checked -eq $true)
	{
		$textboxexchangeserverURL.Enabled = $true
	}
	Else
	{
		$textboxexchangeserverURL.Enabled = $false
	}
	
	
}

$buttonConnectToExchange_Click={
	If ($radiobuttonHybrid.Checked -eq $true)
	{
		If ($radiobuttonexchangeremote.Checked -eq $true)
		{
			try
			{
				Connect-Exchange -URL $textboxexchangeserverURL.Text
			}
			catch
			{
				add-logs -text "WARN: $_"
				$InfoMessage = $_
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			
		}
		Else
		{
			try
			{
				$CallEMS = ". '$env:ExchangeInstallPath\bin\RemoteExchange.ps1'; Connect-ExchangeServer -auto -ClientApplication:ManagementShell "
				Invoke-Expression $CallEMS
			}
			catch
			{
				add-logs -text "WARN: $_"
				$InfoMessage = $_
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			
		}
		$Check = Get-ExchangeServer
		If ($Check)
		{
			$labelExchangeNotConnected.Text = "Connected"
			$labelExchangeNotConnected.ForeColor = 'MediumSeaGreen'
		}
		
		
	}
	
}


$textboxEmail_FocusLeave = {
	
	$RemoteFWDINGDomain = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ExchangeRemoteDomain -ErrorAction SilentlyContinue).ExchangeRemoteDomain
	$textboxHybridRemoteRouting.Text = $RemoteFWDINGDomain
	
	If ($textboxHybridRemoteRouting.Text -ne $RemoteFWDINGDomain)
	{
		$textboxHybridRemoteRouting.Text = $RemoteFWDINGDomain
	}
	$EmailFirstHalf = ((($textboxEmail.Text).Split("@") | Select-Object -First 1))
	$ExistingValue = $textboxHybridRemoteRouting.Text
	$textboxHybridRemoteRouting.Text = "$EmailFirstHalf$ExistingValue"
	
}



$button1_Click={

		#TODO: Place custom script here
		$tabpageGeneral.Enabled = $true
		$tabpage1.Enabled = $true
		$tabcontrolUserProperties.Enabled = $true

}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>