<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
iM8owiXf/TjifwjmtofR3d2Fg06W2Hf4GPxPnEbT4ASaciLgftAHzhZ7cPdFMm6dP4Q78d+9FLLc
kAEgCMODDMAaxpAMQH93C/rFU7oxzhzamloxwbbd29Er9OoH2rsg5zfmqyeRkpiAlq4B9I2IoGa9
+uykBCRnFkEjrPuG0b4WpKUkIT4+HrnFtd8xAJKRAQyOaAPTtIxVXn5agNHX3YopJV96HnmZySir
a0Pf8DCm2b72t3dDMTcPUW8fRJI3TyVIR3vQ2jukG9PS39GGYQl/xGAOucmJQjqi4R6My7RPGNQW
ZiEjrwLi0QGW1gRmpGPo6xMJ8zjD7fVC3ksaOoTxgbY6YbypV/v2rpqibDaeCJFcu+ezMjGSE+KR
nFsMNcu+anIEiWz5HN0lgN7Od8t5ZSADQBCGBxmANYyh3QNAGC9kAAjC8CADsIYhA0CsFGQACMLw
IAOwhiEDQKwUZAAIwvAgA7CGIQNArBRkAAjC8CADsIYhA0CsFGQACMLwIAOwhiEDQKwUZAAIwvAg
A7CGIQNArBRkAAjC8CADsIYhA0CsFGQACMLwIAOwhiEDQKwUZAAIwvAgA7CGIQNArBRkAAjC8CAD
sIYhA0CsFGQACMLwIAOwhiEDQKwUZAAIwvAgA7CGIQNArBRkAAjC8CADsIYhA0CsFGQACMLwIAOw
hiEDQKwUZAAIwvAgA7CGIQNArBRkAAjC8CADsIYhA0CsFGQACMLwIAOwhiEDQKwUZAAIwvAgA7CG
IQNArBRkAAjC8CADsIYhA0CsFGQACMLwIAOwhiEDQKwUZAAIwvAgA7CGIQNArBRkAAjC8CADsIYh
A0CsFGQACMLwIAOwhiEDQKwUZAAIwvAgA7CGIQNArBRkAAjC8CADsIYhA0CsFGQACMLwIAOwhiED
QKwUZAAIwvAgA7CGIQNArBRkAAjC8CADsIYhA0CsFGQACMLwIAOwhiEDQKwUZAAIwvAgA7CGIQNA
rBRkAAjC8CADsIYhA0CsFGQACMLwIAOwhiEDQKwUZAAIwvAgA7CGIQNArBRkAAjC8CADsIYhA0Cs
FGQACMLwIAOwhiEDQKwUZAAIwvAgA7CGIQNArBRkAAjC8CADsIYhA0CsFCLRGMYlUt0YQRCGgIQd
k6MisW7sbcgAGDlkAIiVYmJiEi2t7ejtHUBvH4lEMgTxY1LKjk19kAEwcsgAECvJ7Ows1BoNNCQS
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</Preview>
  <Form>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
tv/pfvp/xROayzikAwA=</Form>
  <Code><![CDATA[#region Control Helper Functions
function Toogle-LicenseStatus
{
	If ($null -eq $Licenses2Add)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
#If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
#If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($Licenses2Add.Count -ge 1))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($Licenses2Add.Count -ge 1))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Get-DictionaryPassword
{
	param
	(
		
		[switch]$O365
	)
	$Dictionary = @(
		"Honda";
		"Staple";
		"Battery";
		"Civic";
		"Chicago";
		"Winter";
		"Cubs";
		"Bears";
		"Snow";
		"Train";
		"Shoes";
		"Blue";
		"Bike";
		"Ring";
		"Watch";
		"Computer";
		"Neck";
		"Laptop";
		"Monitor";
		"Toilet";
		"Baseball";
		"Football";
		"Soccer";
		"Phone";
		"Carbondale";
		"Saluki";
		"Swim";
		"Lake";
		"Puppy";
		"Watch";
		"Royals";
		"Basketball";
		"Letter";
		"Paper";
		"Sticker";
		"Kitten";
		"Marker";
		"Highway";
		"Wire";
		"Keyboard";
		"Frisbee";
		"Disc";
		"Hawk";
		"West";
		"North";
		"East";
		"South";
		"Water";
		"Ice";
		"Dirt";
		"Taco";
		"Mouse";
		"Deer";
		"Speaker";
		"Hand";
		"Green";
		"Purple";
		"Pink";
		"Boat";
		"Toilet";
		"Sting";
		"Fish";
		"Bee";
		"White";
		"Grey";
		"Shoes";
		"Carpet";
		"Bed";
		"Pillow";
		"Sears";
		"Mustard";
		"Relish";
		"Ketchup";
		"Milk";
		"Apple";
		"Orange";
		"Flower";
		"Lotion";
		"Plane";
		"Desert";
		"Sand";
		"Beach";
		"Clouds";
		"Wagon";
		"Hair";
		"Internet";
		"Track";
		"Golf";
		"Sledding";
		"Market";
		"Window";
		"Door";
		"Deck";
		"Cards";
		"Shelf";
		"Santa";
		"Tack";
		"Building";
		"Tennis";
		"Power";
		"Sox";
		"Wrigley";
		"Tea";
		"Juice";
		"Plant";
		"Geneva";
		"City";
		"Kansas";
		"Missouri";
		"Midwest";
		"Great";
		"Box";
		"Crane";
		"Michigan";
		"Illinois";
		"Garbage";
		"Cougars";
		"Route";
		"Bridge";
		"Mountain";
		"Message";
		"Fire";
		"Taxi";
		"Bus";
		"Color";
		"Sharpie";
		"Ball";
		"Square";
		"River";
		"Navy";
		"Pier";
		"Grant";
		"Park";
		"Lincoln";
		"President";
		"Wrigley";
		"Soldier";
		"Forest";
		"Bulldog";
		"Police";
		"Taco";
		"Deep";
		"Dish";
		"Pizza";
		"Fire";
		"Ice";
		"Lion";
		"World";
		"Shoe";
		"Ant";
		"Bug";
		"Hair";
		"Beard";
		"Light";
		"Wave";
		"Field";
		"Toll";
		"Tax";
		"Money";
		"Bill";
		"Pot";
		"Pan"
	)
	If ($O365 -eq $True)
	{
		$word1 = (Get-Random $Dictionary)
		$Num = Get-random -Maximum 99 -Minimum 0
		$WChar = @(
			"!"
			"@"
			"$"
			"%"
			"&"
			"?"
			"#"
		)
		$Wildchar = Get-random $WChar
		
		$Word1 + "-" + $Num + $WildChar
	}
	Else
	{
		$word1 = (Get-Random $Dictionary)
		
		$word2 = (Get-Random $Dictionary | Where-Object { $_ -ne $word1 })
		
		$Word3 = (Get-Random $Dictionary | Where-Object { ($_ -ne $word1) -and ($_ -ne $word2) })
		
		$Num = Get-random -Maximum 99 -Minimum 0
		
		$Word1 + "-" + $word2 + "-" + $word3 + $Num
	}
	
	
}

function Reset-Form
{
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	
	$ADDescriptionReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription
	If ($ADDescriptionReset -ne 1)
	{
		$textboxDescription.Text = ""
	}
	
	$ADOfficeReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADOfficeReset -ne 1)
	{
		$textboxoffice.Text = ""
	}
	
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	$comboboxOUTree.SelectedText = ""
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	
	$ADCityReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADCityReset -ne 1)
	{
		$textboxcity.Text = ""
	}
	$ADStateReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState
	If ($ADStateReset -ne 1)
	{
		$textboxstate.Text = ""
	}
	
	$ADZipReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADZip -ErrorAction SilentlyContinue).ADZip
	If ($ADZipReset -ne 1)
	{
		$textboxzipcode.Text = ""
	}
	
	
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	
	$ADDepartmentReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment
	If ($ADDepartmentReset -ne 1)
	{
		$textboxDepartment.Text = ""
	}
	
	$ADCompanyReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany
	If ($ADCompanyReset -ne 1)
	{
		$textboxCompany.Text = ""
	}
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	
	$ADLogonScriptReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADLogonScript -ErrorAction SilentlyContinue).ADLogonScript
	If ($ADLogonScriptReset -ne 1)
	{
		$textboxlogonscript.Text = ""
	}
	

	
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	$textboxEmployeeID.Text = ""
	$textboxemployeenumber.Text = ""
	$textboxemployeeType.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunADSync.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	$comboboxMFA.SelectedItem = "False"
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""

	$O365CityReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City
	If ($O365CityReset -ne 1)
	{
		$textboxo365city.Text = ""
	}
	
	$O365StateReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State
	If ($O365StateReset -ne 1)
	{
		$textboxo365state.Text = ""
	}
	
	$O365ZipReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365Zip -ErrorAction SilentlyContinue).O365Zip
	If ($O365ZipReset -ne 1)
	{
		$textboxo365zip.Text = ""
	}
	
	
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

function Update-DisplayNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatDisplayName -ErrorAction SilentlyContinue).UserFormatDisplayName
		#Create an array that we will use for formatting
		$DisplayNameFormatString = @()
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%Firstname% %LastName%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatDisplayName -Value "%FirstName% %LastName%" -Force | Out-Null
		}
		
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text
			}
			ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
			{
				$DisplayNameFormatString += $textboxInitials.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$DisplayNameFormatString += $space
			}
			ElseIf ($_ -eq "EmployeeID")
			{
				$DisplayNameFormatString += $textboxEmployeeID.text
			}
			ElseIf ($_ -eq "EmployeeNumber")
			{
				$DisplayNameFormatString += $textboxemployeenumber.text
			}
			ELseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.text
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$DisplayNameFormatString += $textboxUserLogonName.text
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$DisplayNameFormatString += $textboxEmail.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.Text
			}
			ElseIf ($_ -eq "UserPrincipalNameDomain")
			{
				$EmailFormatString += $comboboxDomains.SelectedItem
			}
			ElseIf ($_ -eq "UPNDomain")
			{
				$EmailFormatString += $comboboxDomains.SelectedItem
			}
			Else
			{
				$DisplayNameFormatString += $_
			}
			
			$textboxDisplayName.Text = [String]::Join('', $DisplayNameFormatString)
			
		}
		
		
	}
}

function Update-EmailTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatEmail -ErrorAction SilentlyContinue).UserFormatEmail
		#Create an array that we will use for formatting
		$EmailFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$EmailFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$EmailFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$EmailFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$EmailFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$EmailFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$EmailFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$EmailFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$EmailFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$EmailFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$EmailFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.Text
				}
				ElseIf ($_ -eq "UserPrincipalNameDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				ElseIf ($_ -eq "UPNDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				Else
				{
					$EmailFormatString += $_
				}
				
			}
			$textboxEmail.Text = [String]::Join('', $EmailFormatString)
		}
	}
}

function Update-SamAccountNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatSamAccountName -ErrorAction SilentlyContinue).UserFormatSamAccountName
		#Create an array that we will use for formatting
		$SamAccountNameFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$SamAccountNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$SamAccountNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$SamAccountNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$SamAccountNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$SamAccountNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$SamAccountNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$SamAccountNameFormatString += $_
				}
				
			}
			$textboxSamAccount.Text = [String]::Join('', $SamAccountNameFormatString)
		}
	}
}

function Update-UserPrincipalNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatUserPrincipalName -ErrorAction SilentlyContinue).UserFormatUserPrincipalName
		#Create an array that we will use for formatting
		$UserPrincipalNameFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$UserPrincipalNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$UserPrincipalNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$UserPrincipalNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$UserPrincipalNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$UserPrincipalNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$UserPrincipalNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.Text
				}
				ElseIf ($_ -eq "UserPrincipalNameDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				ElseIf ($_ -eq "UPNDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				Else
				{
					$UserPrincipalNameFormatString += $_
				}
				
			}
			$textboxUserLogonName.Text = [String]::Join('', $UserPrincipalNameFormatString)
		}
	}
}

function Set-DarkMode
{
	$labelCountryCode.ForeColor = 'White'
	$contextmenustrip1.BackColor = "44,44,44"
	$contextmenustrip1.ForeColor = 'White'
	$MainForm.BackColor = "44,44,44"
	$MainForm.ForeColor = 'White'
	
	$labelLogFile.BackColor = "44,44,44"
	$labelLogFile.ForeColor = 'White'
	
	$labelconnectionstatus.ForeColor = 'LightCoral'
	
	
	$richtextboxregistry.ForeColor = 'White'
	$richtextboxregistry.BackColor = "44,44,44"
	
	$groupboxStatus.ForeColor = 'White'
	
	
	$tabpageSettings.BackColor = "44,44,44"
	$tabpageSettings.ForeColor = 'White'
	$groupboxADGroups.ForeColor = 'White'
	
	$menustrip1.BackColor = "44,44,44"
	$menustrip1.ForeColor = 'White'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "44,44,44"
					$_.ForeColor = 'White'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'White'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "44,44,44"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'White'
	$copyOffice365UserToolStripMenuItem.BackColor = "44,44,44"
	
	
	$groupboxInformation.ForeColor = 'White'
	$linklabelBradWyatt.LinkColor = 'DeepSkyBlue'
	$linklabelGitHub.LinkColor = 'DeepSkyBlue'
	$labelChangelog.ForeColor = 'DeepSkyBlue'
	
	$console.BackColor = "35,35,35"
	$console.ForeColor = 'White'
	
	$buttonExit.ForeColor = "white"
	$buttonExit.BackColor = "35,35,35"
	
	$buttonCreateUser.ForeColor = "white"
	$buttonCreateUser.BackColor = "35,35,35"
	
	$groupboxADUser.ForeColor = 'White'
	$groupboxADUser.BackColor = "44,44,44"
	
	$groupbox2FA.ForeColor = 'White'
	$groupboxOffice365User.ForeColor = 'White'
	
	$tabcontrolUserProperties.ForeColor = 'White'
	$tabcontrolUserProperties.BackColor = "44,44,44"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
		

	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
	}
	
	#GENERAL PAGE
	$groupboxADSync.ForeColor = 'White'
	$panel1.BackColor = "35,35,35"
	$labelDisplayName.ForeColor = 'LightCoral'
	$labelPassword.ForeColor = 'LightCoral'
	$labelConfirmPassword.ForeColor = 'LightCoral'

	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
				$_.BackColor = "35,35,35"
				$_.ForeColor = 'White'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'White'
	$buttonGeneratePassword.BackColor = '44,44,44'
	$buttonClear.ForeColor = 'White'
	$buttonClear.BackColor = '44,44,44'
	
	$textboxPasswordGen.ForeColor = 'White'
	$textboxPasswordGen.BackColor = '35,35,35'
	$maskedtextboxpassword.ForeColor = 'White'
	$maskedtextboxpassword.BackColor = '44,44,44'
	$textboxConfirmPassword.BackColor = '44,44,44'
	$textboxConfirmPassword.ForeColor = 'White'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Flat'
	$comboboxDomains.ForeColor = 'White'
	$comboboxDomains.BackColor = "35,35,35"
	
	$comboboxOUTree.FlatStyle = 'Flat'
	$comboboxOUTree.ForeColor = 'White'
	$comboboxOUTree.BackColor = "35,35,35"
	
	$panel2.ForeColor = 'White'
	$Panel2.BackColor = "35,35,35"
	
	$datetimepickerDATE.ForeColor = 'White'
	$datetimepickerDATE.CalendarMonthBackground = "35,35,35"
	
	$datetimepickerTIME.ForeColor = 'White'
	$datetimepickerTIME.BackColor = "35,35,35"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "44,44,44"
	
	$groupboxaccountexpires.ForeColor = 'White'
	$labelUserLogonNameUPN.ForeColor = 'LightCoral'
	$labelUserLogonNamepreWind.ForeColor = 'White'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'White'
	$checkedlistboxGroups.BackColor = "35,35,35"
	$textboxPOSIX.ForeColor = 'White'
	$textboxPOSIX.BackColor = "44,44,44"
	
	$textboxSearchGroups.ForeColor = 'White'
	$textboxSearchGroups.BackColor = "35,35,35"
	
	$comboboxPrimaryGroup.FlatStyle = 'Flat'
	$comboboxPrimaryGroup.ForeColor = 'White'
	$comboboxPrimaryGroup.BackColor = "35,35,35"
	
	$groupboxPrimaryGroup.ForeColor = 'White'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'White'
	$groupboxHomeFolder.ForeColor = 'White'
	$comboboxDriveLetter.FlatStyle = 'Flat'
	$comboboxDriveLetter.ForeColor = 'White'
	$comboboxDriveLetter.BackColor = "35,35,35"
	$textboxhomedirectory.ForeColor = 'White'
	$textboxhomedirectory.BackColor = "35,35,35"
	$textboxprofilepath.ForeColor = 'White'
	$textboxprofilepath.BackColor = "35,35,35"
	$textboxlogonscript.ForeColor = 'White'
	$textboxlogonscript.BackColor = "35,35,35"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "44,44,44"
	$tabcontrolO365.ForeColor = 'White'
	$textboxADSyncServer.ForeColor = 'White'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365userpassword.ForeColor = 'LightCoral'
	$labelO365userconfirmpassword.ForeColor = 'LightCoral'
	$labelO365DisplayName.ForeColor = 'LightCoral'
	$tabpageO365General.BackColor = "44,44,44"
	$groupboxADSync.ForeColor = 'White'
	$textboxADSyncServer.BackColor = "35,35,35"
	$groupboxNoAdSync.ForeColor = 'White'
	$comboboxO365Licenses.FlatStyle = 'Flat'
	$comboboxO365Licenses.BackColor = "35,35,35"
	$comboboxO365Licenses.ForeColor = 'White'
	$panel3.ForeColor = 'White'
	$panel3.BackColor = "35,35,35"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$textboxo365passwordgen.BackColor = "44,44,44"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Lightcoral'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'White'
	$tabpageO365Account.BackColor = "44,44,44"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'LightCoral'
	$panel4.ForeColor = 'White'
	$panel4.BackColor = "35,35,35"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{

			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.BackColor = "44,44,44"
	$tabpageO365Address.ForeColor = 'White'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'White'
	$tabpageO365Groups.BackColor = "44,44,44"
	$labelO365Groups.ForeColor = 'White'
	$labelO365Groups.BackColor = "44,44,44"
	$checkedlistboxDISTROo365groups.ForeColor = 'White'
	$checkedlistboxDISTROo365groups.BackColor = "35,35,35"
	$labelSearch.ForeColor = 'White'
	$textboxO365MailGroups.ForeColor = 'White'
	$textboxO365MailGroups.BackColor = "35,35,35"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'White'
	$labelSecurityGroups.BackColor = "44,44,44"
	$checkedlistboxO365SecurityGroups.ForeColor = 'White'
	$checkedlistboxO365SecurityGroups.BackColor = "35,35,35"
	$labelSearchGroups2.ForeColor = 'White'
	$labelSearchGroups2.BackColor = "44,44,44"
	$textboxSearchO365SecurityGroups.ForeColor = 'White'
	$textboxSearchO365SecurityGroups.BackColor = "35,35,35"
	$tabpagesecurityGroups.BackColor = "44,44,44"
	$tabpagesecurityGroups.ForeColor = 'White'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'White'
	$labelsharedmailboxes.BackColor = "44,44,44"
	$tabpageo365shared.ForeColor = 'White'
	$tabpageo365shared.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.ForeColor = 'White'
	$groupboxSettingsSharedMailbox.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'White'
	$checkedlistboxsharedmailboxes.BackColor = "35,35,35"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "White"
	$tabpageO365Attributes.BackColor = "44,44,44"
	$comboboxO365HidefromGAL.FlatStyle = 'Flat'
	$comboboxO365HidefromGAL.ForeColor = 'White'
	$comboboxO365HidefromGAL.BackColor = "35,35,35"
	
	$comboboxOWA.FlatStyle = 'Flat'
	$comboboxOWA.ForeColor = 'White'
	$comboboxOWA.BackColor = "35,35,35"
	
	$comboboxActiveSync.FlatStyle = 'Flat'
	$comboboxActiveSync.ForeColor = 'White'
	$comboboxActiveSync.BackColor = "35,35,35"
	
	
}

function Set-LightMode
{
	$labelCountryCode.ForeColor = 'Black'
	$contextmenustrip1.BackColor = "WhiteSmoke"
	$contextmenustrip1.ForeColor = 'Black'
	$MainForm.BackColor = "WhiteSmoke"
	$MainForm.ForeColor = 'Black'
	
	$labelLogFile.BackColor = "White"
	$labelLogFile.ForeColor = 'Black'
	
	$labelconnectionstatus.ForeColor = 'FireBrick'
	
	$richtextboxregistry.ForeColor = 'Black'
	$richtextboxregistry.BackColor = "White"
	
	$groupboxStatus.ForeColor = 'Black'
	
	
	$tabpageSettings.BackColor = "White"
	$tabpageSettings.ForeColor = 'Black'
	$groupboxADGroups.ForeColor = 'Black'
	
	$menustrip1.BackColor = "White"
	$menustrip1.ForeColor = 'Black'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "White"
					$_.ForeColor = 'Black'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'Black'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "White"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'Black'
	$copyOffice365UserToolStripMenuItem.BackColor = "White"
	
	
	$groupboxInformation.ForeColor = 'Black'
	$linklabelBradWyatt.LinkColor = '0, 0, 255'
	$linklabelGitHub.LinkColor = '0, 0, 255'
	$labelChangelog.ForeColor = '0, 0, 255'
	
	$console.BackColor = "White"
	$console.ForeColor = 'Black'
	
	$buttonExit.ForeColor = "Black"
	$buttonExit.BackColor = "White"
	
	$buttonCreateUser.ForeColor = "Black"
	$buttonCreateUser.BackColor = "White"
	
	$groupboxADUser.ForeColor = 'Black'
	$groupboxADUser.BackColor = "White"
	
	$groupbox2FA.ForeColor = 'Black'
	$groupboxOffice365User.ForeColor = 'Black'
	
	$tabcontrolUserProperties.ForeColor = 'Black'
	$tabcontrolUserProperties.BackColor = "White"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
		
		
	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
	}
	
	#GENERAL PAGE
	$panel1.BackColor = "MenuBar"
	$labelDisplayName.ForeColor = 'FireBrick'
	$labelPassword.ForeColor = 'FireBrick'
	$labelConfirmPassword.ForeColor = 'FireBrick'
	
	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'Black'
	$buttonGeneratePassword.BackColor = 'White'
	$buttonClear.ForeColor = 'Black'
	$buttonClear.BackColor = 'White'
	
	$textboxPasswordGen.ForeColor = 'Black'
	$textboxPasswordGen.BackColor = 'White'
	$maskedtextboxpassword.ForeColor = 'Black'
	$maskedtextboxpassword.BackColor = 'White'
	$textboxConfirmPassword.BackColor = 'White'
	$textboxConfirmPassword.ForeColor = 'Black'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Standard'
	$comboboxDomains.ForeColor = 'Black'
	$comboboxDomains.BackColor = "Window"
	
	$comboboxOUTree.FlatStyle = 'Standard'
	$comboboxOUTree.ForeColor = 'Black'
	$comboboxOUTree.BackColor = "Window"
	
	$panel2.ForeColor = 'Black'
	$Panel2.BackColor = "MenuBar"
	
	$datetimepickerDATE.ForeColor = 'Black'
	$datetimepickerDATE.CalendarMonthBackground = "White"
	
	$datetimepickerTIME.ForeColor = 'Black'
	$datetimepickerTIME.BackColor = "White"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "White"
	
	$groupboxaccountexpires.ForeColor = 'Black'
	$labelUserLogonNameUPN.ForeColor = 'FireBrick'
	$labelUserLogonNamepreWind.ForeColor = 'Black'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'Black'
	$checkedlistboxGroups.BackColor = "White"
	$textboxPOSIX.ForeColor = 'Black'
	$textboxPOSIX.BackColor = "White"
	
	$textboxSearchGroups.ForeColor = 'Black'
	$textboxSearchGroups.BackColor = "White"
	
	$comboboxPrimaryGroup.FlatStyle = 'Standard'
	$comboboxPrimaryGroup.ForeColor = 'Black'
	$comboboxPrimaryGroup.BackColor = "Window"
	
	$groupboxPrimaryGroup.ForeColor = 'Black'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'Black'
	$groupboxHomeFolder.ForeColor = 'Black'
	$comboboxDriveLetter.FlatStyle = 'Standard'
	$comboboxDriveLetter.ForeColor = 'Black'
	$comboboxDriveLetter.BackColor = "Window"
	$textboxhomedirectory.ForeColor = 'Black'
	$textboxhomedirectory.BackColor = "White"
	$textboxprofilepath.ForeColor = 'Black'
	$textboxprofilepath.BackColor = "White"
	$textboxlogonscript.ForeColor = 'Black'
	$textboxlogonscript.BackColor = "White"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "White"
	$tabcontrolO365.ForeColor = 'Black'
	$textboxADSyncServer.ForeColor = 'Black'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365userpassword.ForeColor = 'FireBrick'
	$labelO365userconfirmpassword.ForeColor = 'FireBrick'
	$labelO365DisplayName.ForeColor = 'FireBrick'
	$tabpageO365General.BackColor = "White"
	$groupboxADSync.ForeColor = 'Black'
	$textboxADSyncServer.BackColor = "White"
	$groupboxNoAdSync.ForeColor = 'Black'
	$comboboxO365Licenses.FlatStyle = 'Standard'
	$comboboxO365Licenses.BackColor = "Window"
	$comboboxO365Licenses.ForeColor = 'Black'
	$panel3.ForeColor = 'Black'
	$panel3.BackColor = "MenuBar"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$textboxo365passwordgen.BackColor = "White"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'Black'
	$tabpageO365Account.BackColor = "White"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'FireBrick'
	$panel4.ForeColor = 'Black'
	$panel4.BackColor = "MenuBar"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.BackColor = "White"
	$tabpageO365Address.ForeColor = 'Black'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'Black'
	$tabpageO365Groups.BackColor = "White"
	$labelO365Groups.ForeColor = 'Black'
	$labelO365Groups.BackColor = "White"
	$checkedlistboxDISTROo365groups.ForeColor = 'Black'
	$checkedlistboxDISTROo365groups.BackColor = "White"
	$labelSearch.ForeColor = 'Black'
	$textboxO365MailGroups.ForeColor = 'Black'
	$textboxO365MailGroups.BackColor = "White"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'Black'
	$labelSecurityGroups.BackColor = "White"
	$checkedlistboxO365SecurityGroups.ForeColor = 'Black'
	$checkedlistboxO365SecurityGroups.BackColor = "White"
	$labelSearchGroups2.ForeColor = 'Black'
	$labelSearchGroups2.BackColor = "White"
	$textboxSearchO365SecurityGroups.ForeColor = 'Black'
	$textboxSearchO365SecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.ForeColor = 'Black'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'Black'
	$labelsharedmailboxes.BackColor = "White"
	$tabpageo365shared.ForeColor = 'Black'
	$tabpageo365shared.BackColor = "White"
	$groupboxSettingsSharedMailbox.ForeColor = 'Black'
	$groupboxSettingsSharedMailbox.BackColor = "White"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'Black'
	$checkedlistboxsharedmailboxes.BackColor = "White"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "Black"
	$tabpageO365Attributes.BackColor = "White"
	$comboboxO365HidefromGAL.FlatStyle = 'Standard'
	$comboboxO365HidefromGAL.ForeColor = 'Black'
	$comboboxO365HidefromGAL.BackColor = "Window"
	
	
	$comboboxOWA.FlatStyle = 'Standard'
	$comboboxOWA.ForeColor = 'Black'
	$comboboxOWA.BackColor = "Window"
	
	$comboboxActiveSync.FlatStyle = 'Standard'
	$comboboxActiveSync.ForeColor = 'Black'
	$comboboxActiveSync.BackColor = "Window"
	
}

function Copy-ADUserAttributes
{
	Add-Logs -text "Setting Description"
	$textboxDescription.Text = $UserTemplate.Description
	Add-Logs -text "Setting Office"
	$textboxoffice.Text = $UserTemplate.Office
	Add-Logs -text "Setting Office Phone"
	$textboxTelephone.Text = $UserTemplate.OfficePhone
	Add-Logs -text "Setting Email Address"
	$textboxEmail.Text = $UserTemplate.EmailAddress
	Add-Logs -text "Setting Home Page"
	$textboxWebPage.Text = $UserTemplate.HomePage
	
	Add-Logs -text "Changing the OU for the user to $((($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)")))"
	$comboboxOUTree.SelectedItem = (($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)"))
	
	Add-Logs -text "Checking Password Never Expires status"
	If ($UserTemplate.PasswordNeverExpires -eq $true)
	{
		Add-Logs -text "Setting Password Never Expires to True"
		$checkboxPasswordNeverExpires.CheckState = 'Checked'
	}
	Else
	{
		Add-Logs -text "Setting Password Never Expires to False"
		$checkboxPasswordNeverExpires.CheckState = 'UnChecked'
	}
	
	Add-Logs -text "Checking Password Change Ability"
	If ($UserTemplate.CannotChangePassword -eq $True)
	{
		Add-Logs -text "Setting User Cannot Change Password to True"
		$checkboxUserCannotChangePass.CheckState -eq 'Checked'
	}
	Else
	{
		Add-Logs -text "Setting User Cannot Change Password to False"
		$checkboxUserCannotChangePass.CheckState -eq 'UnChecked'
	}
	
	Add-Logs -text "Checking Password Change statue"
	If ($UserTemplate.PasswordExpired -eq $True)
	{
		Add-Logs -text "Setting User Must Change Password to True"
		$checkboxUserMustChangePasswo.CheckState -eq 'Checked'
	}
	Else
	{
		Add-Logs -text "Setting User Must Change Password to False"
		$checkboxUserMustChangePasswo.CheckState -eq 'UnChecked'
	}
	Add-Logs -text "Setting Street Address"
	$textboxStreet.Text = $UserTemplate.StreetAddress
	Add-Logs -text "Setting PO Box"
	$textboxPOBox.Text = $UserTemplate.POBox
	Add-Logs -text "Setting City"
	$textboxcity.Text = $UserTemplate.City
	Add-Logs -text "Setting State"
	$textboxstate.Text = $UserTemplate.State
	Add-Logs -text "Setting Postal Code"
	$textboxzipcode.Text = $UserTemplate.PostalCode
	Add-Logs -text "Checking Group Memberships"
	$checkedlistboxGroups.CheckedItems = $null
	($UserTemplate).MemberOf | ForEach-Object {
		$GName = (Get-ADGroup $_).name
		Add-Logs -text "Adding User to the Group: $GName"
		
		$checkedlistboxGroups.SelectedItem = $GName
		$index = $checkedlistboxGroups.SelectedIndex
		$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
	}
	Add-Logs -text "Setting Job Title"
	$textboxjobtitle.text = $UserTemplate.Title
	Add-Logs -text "Setting Department"
	$textboxDepartment.Text = $UserTemplate.Department
	Add-Logs -text "Setting Company"
	$textboxCompany.Text = $UserTemplate.Company
	Add-Logs -text "Setting Profile Path"
	$textboxprofilepath.Text = $UserTemplate.ProfilePath
	Add-Logs -text "Setting Script Path"
	$textboxlogonscript.Text = $UserTemplate.ScriptPath
	Add-Logs -text "Setting Home Drive"
	$comboboxDriveLetter.SelectedItem = $UserTemplate.HomeDrive
	Add-Logs -text "Setting Home Directory"
	$textboxhomedirectory.Text = $UserTemplate.HomeDirectory
	Add-Logs -text "Setting Employee Type"
	$textboxemployeeType.Text = $UserTemplate.EmployeeType
	
	
}

function Copy-O365UserAttributes
{
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force | Out-Null
	
	If ($Licenses2Add.count -gt 0)
	{
		$Global:Licenses2Add = New-Object 'System.Collections.Generic.List[System.Object]'
	}
	
	$CopyUser = $CopyFromO365User_comboboxcopyuser
	add-logs -text "LOG: Copying attributes from $CopyUser"
	
	$UserObj = (Get-Msoluser -All | Where-Object { $_.DisplayName -eq $CopyUser }) | Select-Object -First 1
	
	add-logs -text "LOG: Getting the UPN Domain of $CopyUser"
	$UPNDomain = ($UserObj.userprincipalname).split('@') | Select-Object -Last 1
	add-logs -text "LOG: Setting the UPN Domain to $UPNDomain"
	$comboboxO365Domains.SelectedItem = "@"+$UPNDomain
	
	add-logs -text "LOG: Copying Country Code"
	$comboboxO365countrycode.SelectedText = ($UserObj).CountryCode
	add-logs -text "LOG: Checking MFA status of $CopyUser"
	If ($null -eq $UserObj.StrongAuthenticationRequirements.State)
	{
		add-logs -text "LOG: Setting MFA to False"
		$comboboxMFA.SelectedItem = "False"
	}
	Else
	{
		add-logs -text "LOG: Setting MFA to True"
		$comboboxMFA.SelectedItem = "True"
	}
	add-logs -text "LOG: Copying City"
	$textboxo365city.Text = ($UserObj).city
	add-logs -text "LOG: Copying State"
	$textboxo365state.Text = ($UserObj).state
	add-logs -text "LOG: Copying Street Address"
	$textboxO365street.Text = ($UserObj).streetaddress
	add-logs -text "LOG: Copying Postal Code"
	$textboxo365zip.Text = ($UserObj).postalcode
	
	If (($UserObj).PasswordNeverExpires -eq $true)
	{
		add-logs -text "LOG: Copying Password Never Expires Flag"
		$checkboxO365PasswordNeverExpires.CheckState = 'Checked'
	}
	
	If (($UserObj).BlockCredential -eq $True)
	{
		add-logs -text "LOG: Copying Disabled Account State"
		$checkboxBlockCred.CheckState = 'Checked'
	}
	

	
	add-logs -text "LOG: Getting all licenses assinged to $CopyUser"
	$currentlicenses = ($UserObj).Licenses.accountskuid
	foreach ($currentlicense in $currentlicenses)
	{
		$TenantSku = Get-MSOLAccountSku | Where-Object { $_.AccountSkuID -match $currentlicense }
		
		If ($TenantSku.ActiveUnits -ne $TenantSku.ConsumedUnits)
		{
			$lic = $currentlicense -split ":" | Select-Object -Last 1
			#lookup skus in hashtable and convert to friendly name
			$FriendlyName = $Sku.Item("$Lic")
			If ($null -eq $FriendlyName)
			{
				add-logs -text "LOG: Copying The License: $_"
				$obj = [PSCustomObject]@{
					'Name' = $lic
				}
				$Licenses2Add.Add($obj)
			}
			Else
			{
				add-logs -text "LOG: Copying The License: $FriendlyName"
				$obj = [PSCustomObject]@{
					'Name' = $FriendlyName
				}
				
				$Licenses2Add.Add($obj)
				
			}
		}
	}
	
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	Toogle-LicenseStatus
	
	add-logs -text "LOG: Checking Mail Group Membership for $CopyUser"
	Get-MsolGroup -All | Where-Object { ($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") } | ForEach-Object {
		If (Get-MsolGroupMember -All -GroupObjectId $_.ObjectID | Where-Object { $_.EmailAddress -contains ($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:")})
		{
				If ($checkedlistboxDISTROo365groups.Items -contains $_.DisplayName)
				{
					$_.DisplayName | Out-File $CacheDistroGroupsFile -Append -Force -ErrorAction SilentlyContinue
					add-logs -text "LOG: Adding User to the Distribution Group: $($_.DisplayName)"
					$checkedlistboxDISTROo365groups.SelectedItem = $($_.DisplayName)
					$index = $checkedlistboxDISTROo365groups.SelectedIndex
					$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
				}
			}
		
		
	}
	Add-Logs -text "LOG: Getting all Security Groups $CopyUser is a Member of"
	Get-MsolGroup -All | Where-Object { $_.GroupType -eq "Security" } | ForEach-Object {
		If (Get-MsolGroupMember -All -GroupObjectId $_.ObjectID | Where-Object { $_.EmailAddress -contains ($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:") })
		{
				If ($checkedlistboxO365SecurityGroups.Items -contains $_.DisplayName)
				{
					$_.DisplayName | Out-File $CacheSecurityGroupsFile -Append -Force -ErrorAction SilentlyContinue
				add-logs -text "LOG: Adding User to the Security Group: $($_.DisplayName)"
					$checkedlistboxO365SecurityGroups.SelectedItem = $($_.DisplayName)
					$index = $checkedlistboxO365SecurityGroups.SelectedIndex
					$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
				}
			}
			
			
		}
	
	
	
	$UserObjMailbox = Get-Mailbox (($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:"))
	Add-Logs -text "Gettings GAL status for User"
	If ($UserObjMailbox.HiddenFromAddressListsEnabled -eq $true)
	{
		Add-Logs -text "Hiding User from GAL: True"
		$comboboxO365HidefromGAL.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "Hiding User from GAL: False"
		$comboboxO365HidefromGAL.SelectedItem = "False"
	}
	
	Add-Logs -text "Getting Outlook on the Web (OWA) Status for user"
	If (((Get-CASMailbox (($UserObjMailbox).GUID).Guid).OWAEnabled) -eq $True)
	{
		Add-Logs -text "Outlook on the Web (OWA): True"
		$comboboxOWA.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "Outlook on the Web (OWA): False"
		$comboboxOWA.SelectedItem = "False"
	}
	
	Add-Logs -text "Getting ActiveSync Status for user"
	If (((Get-CASMailbox (($UserObjMailbox).GUID).Guid).ActiveSync) -eq $True)
	{
		Add-Logs -text "ActiveSync: True"
		$comboboxActiveSync.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "ActiveSync: False"
		$comboboxActiveSync.SelectedItem = "False"
	}
	
	add-logs -text "LOG: Done"
	
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force | Out-Null
	
}

function License-MUCO365User
{
	$licenseforuser = @()
	#$Lookup = @()
	Add-Logs -text "LOG: Getting License selected for user"
	$Licenses = $Licenses2Add
	Add-Logs "LOG: We will be adding the licenses, $Licenses2Add"
	Add-Logs -text "LOG: Getting AccountSKU Domain"
	$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
	foreach ($License in $licenses)
	{
		Add-Logs -text "LOG: Looking up SKU for license"
		$Lookup = $Sku.keys | Where-Object { $Sku["$_"] -eq "$license" }
		Add-Logs "LOG: License lookup is $Lookup"
		If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
		{
			Add-Logs -text "LOG: No SKU found during lookup"
			$BackSKU = "$LicenseDomain$License"
			Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
			$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
			If ($CheckSku -ne $Null)
			{
				Add-Logs -text "LOG: Assigning $BackSKU to User"
				$licenseforuser += $CheckSku
			}
			Else
			{
				Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
				$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
				Add-Logs -text "WARN: Assigning $ReLic to user instead"
				$licenseforuser += (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
			}
		}
		
		Else
		{
			Add-Logs -text "LOG: Found the SKU for the license"
			$Lookup | ForEach-Object {
				Add-Logs -text "LOG: Checking License $_"
				$BackSKU = "$LicenseDomain$_"
				Add-Logs -text "LOG: Looking up $BackSKU in tenant"
				Add-Logs -text "LOG: Verifying $BackSKU in tenant"
				$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
				If ($CheckSku -ne $Null)
				{
					Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
					$licenseforuser += $CheckSku
				}
				Else
				{
					Add-Logs -text "WARN: $BackSKU was not found in tenant"
				}
			}
		}
		Add-Logs "LOG: OUTPUTTING $licenseforuser"
		$licenseforuser | Out-File "$env:TEMP\MUClicenseforuser.txt" -Force
		
	}
}

function New-MUCUser
{
		
	add-logs -text 'LOG: Converting password to SecureString'
	add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
	$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
	#Get disable account boolean
	add-logs -text 'LOG: Checking if account is disabled or enabled'
	$disabledaccount = ($checkboxAccountIsDisabled.checked)
	#If account should be disabled
	If ($disabledaccount -eq $true)
	{
		add-logs -text 'LOG: Account is disabled'
		add-logs -text 'LOG: Creating user'
		Try
		{
			New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
		}
		Catch
		{
			add-logs -text "WARN: $_"
			$InfoMessage = $_
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		$User = Get-ADUser -Filter * -Properties * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
		add-logs -text "LOG: User has been created"
		
		#Check if Account is set to expire at a specific time
		Add-Logs -text "LOG: Checking if User account expiration is set"
		If ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text "LOG: User account expiration is set"
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			Add-Logs -text "LOG: Done"
		}
		Else
		{
			Add-Logs -text "LOG: User account expiration not set"
		}
		
		$Proxys = @()
		add-logs -text "LOG: Getting user proxy addresses to set"
		$Proxys += $textboxproxyaddress.Lines
		If ($Proxys -ne $Null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text "LOG: Adding proxy addresses"
				add-logs -text "LOG: Getting user proxy addresses to set"
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
			}
		}
		Else
		{
			add-logs -text "LOG: No proxys were found to add"
		}
		add-logs -text "LOG: Done with Proxys"
		
		
		
		add-logs -text "LOG: Getting user employeeType attribute to set"
		If ($textboxemployeeType.text -ne "")
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
		}
		Else
		{
			add-logs -text "LOG: No employeeType to add"
		}
		add-logs -text "LOG: Done with employeeType"
		
		add-logs -text "LOG: Getting user employeeNumber attribute to set"
		If ($textboxemployeenumber.text -ne "")
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			Set-ADUser $User -EmployeeNumber $textboxemployeenumber.text 
		}
		Else
		{
			add-logs -text "LOG: No employeeNumber to add"
		}
		add-logs -text "LOG: Done with employeeNumber"
		
		add-logs -text "LOG: Getting user employeeID attribute to set"
		If ($textboxEmployeeID.Text -ne "")
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			Set-ADUser $User -EmployeeID $textboxEmployeeID.text
		}
		Else
		{
			add-logs -text "LOG: No employeeID to add"
		}
		add-logs -text "LOG: Done with employeeID"
		
		#Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		$groups = $checkedlistboxGroups.CheckedItems
		If ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $Group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
				Add-ADGroupMember -Identity $Group -Members $User
			}
		}
		Else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text "LOG: Done"
		
		Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
		If ($comboboxPrimaryGroup.Text -eq "Domain Users")
		{
			Add-Logs -text "LOG: Primary Group set to Domain Users"
		}
		Else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
		}
		Add-Logs -text "LOG: Done"
		
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		If ($comboboxOUTree.SelectedItem -ne $null)
		{
			
			add-logs -text 'LOG: Specific OU specified, moving user'
			$CanocicalName = $comboboxOUTree.SelectedItem
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$User | Move-ADObject -TargetPath $OUTOMove
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
	Else
	{
		add-logs -text 'LOG: Account is enabled'
		add-logs -text 'LOG: Creating user'
		Try
		{
			New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
		}
		Catch
		{
			add-logs -text "WARN: $_"
			$InfoMessage = $_
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		$User = Get-ADUser -Filter * -Properties * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
		add-logs -text "LOG: User has been created"
		
		#Check if Account is set to expire at a specific time
		Add-Logs -text "LOG: Checking if User account expiration is set"
		If ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text "LOG: User account expiration is set"
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			Add-Logs -text "LOG: Done"
		}
		Else
		{
			Add-Logs -text "LOG: User account expiration not set"
		}
		
		$Proxys = @()
		add-logs -text "LOG: Getting user proxy addresses to set"
		$Proxys += $textboxproxyaddress.Lines
		If ($Proxys -ne $Null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text "LOG: Adding proxy addresses"
				add-logs -text "LOG: Getting user proxy addresses to set"
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
			}
		}
		Else
		{
			add-logs -text "LOG: No proxys were found to add"
		}
		add-logs -text "LOG: Done with Proxys"
		
		add-logs -text "LOG: Getting user employeeType attribute to set"
		If ($textboxemployeeType.text -ne "")
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
		}
		Else
		{
			add-logs -text "LOG: No employeeType to add"
		}
		add-logs -text "LOG: Done with employeeType"
		
		add-logs -text "LOG: Getting user employeeNumber attribute to set"
		If ($textboxemployeenumber.text -ne "")
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			Set-ADUser $User -EmployeeNumber $textboxemployeenumber.text
		}
		Else
		{
			add-logs -text "LOG: No employeeNumber to add"
		}
		add-logs -text "LOG: Done with employeeNumber"
		
		add-logs -text "LOG: Getting user employeeID attribute to set"
		If ($textboxEmployeeID.Text -ne "")
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			Set-ADUser $User -EmployeeID $textboxEmployeeID.text
		}
		Else
		{
			add-logs -text "LOG: No employeeID to add"
		}
		add-logs -text "LOG: Done with employeeID"
		
		#Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		$groups = $checkedlistboxGroups.CheckedItems
		If ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $Group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
				Add-ADGroupMember -Identity $Group -Members $User
			}
		}
		Else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text "LOG: Done"
		
		Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
		If ($comboboxPrimaryGroup.Text -eq "Domain Users")
		{
			Add-Logs -text "LOG: Primary Group set to Domain Users"
		}
		Else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
		}
		Add-Logs -text "LOG: Done"
		
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		If ($comboboxOUTree.SelectedItem -ne $null)
		{
			
			add-logs -text 'LOG: Specific OU specified, moving user'
			$CanocicalName = $comboboxOUTree.SelectedItem
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$User | Move-ADObject -TargetPath $OUTOMove
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
}

function New-MUCO365User
{
	add-logs -text 'LOG: Checking DirSync option'
	#If DirSync is enabled
	If ($checkboxRunADSync.CheckState -eq 'Checked')
	{
		If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$SyncServer = $textboxADSyncServer.text
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text "LOG: Running DirSync on $SyncServer"
			add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
			Try
			{
				Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text "WARN: ADSync Server text box is empty"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
		}
	}
	#If DirSync is not enabled
	Else
	{
		add-logs -text "LOG: User is not being AD-Synced"
		
		add-logs -text 'LOG: All required parameters are valid'
		
		#Check to see if the user is being enabled upon creation or disabled
		
		#User is going to be disabled
		add-logs -text 'LOG: Checking enabled status of user'
		If ($checkboxBlockCred.Checked -eq $true)
		{
			#If user is going to be disabled
			add-logs -text 'LOG: User is Disabled'
			add-logs -text 'LOG: Creating user'
			If (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
			{
				add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
				$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				If ($Licenses2Add -ne $null)
				{
					License-MUCO365User
				}
				Try
				{
					add-logs -text 'LOG: Creating User'
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Adding Licenses'
					$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
					$licenseforuser | ForEach-Object {
						Add-Logs -text "LOG: Adding $_"
						
						Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
					}
					Add-Logs -text 'LOG: Done'
					
				}
				Catch
				{
					add-logs -text "WARN: $_"
					$InfoMessage = $_
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				
				#Find if user should be added to any Security groups
				add-logs -text 'LOG: Getting checked Security groups'
				$groups = $checkedlistboxO365SecurityGroups.CheckedItems
				If ($groups -ne $null)
				{
					add-logs -text 'LOG: Security Groups found'
					$DN = ($User).DisplayName
					foreach ($group in $groups)
					{
						add-logs -text "LOG: Adding $DN to $Group"
						$GroupGuid = ((get-msolgroup -All | where-object { $_.displayname -eq $Group }).ObjectID).GUID
						$UserGUID = (($User).ObjectID).GUID
						add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
						Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
					}
				}
				Else
				{
					add-logs -text 'LOG: No Security Groups checked'
				}
				Add-Logs -text 'LOG: Done with Security Groups'
				
				#Check user licenses, if licensed create and wait for mailbox
				Add-Logs -text 'LOG: Checking if license was applied to the user'
				If ($Licenses2Add -ne $Null)
				{
					Add-Logs -text 'LOG: License is applied to the new user'
					
					$ts = New-TimeSpan -Minutes 8
					
					$TermLoop = ((get-date) + $ts).ToString("HH:mm")
					Do
					{
						$DateNow = (Get-date).ToString("HH:mm")
						Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 20 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 10 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
						Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
					}
					Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
					
					add-logs -text 'LOG: Checking E-Mail address field for entered data'
					If ($textboxO365EmailAddress.Text -like "*@*")
					{
						add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
						If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
						{
							add-logs -text 'LOG: Email is different from UPN, proceeding.'
							
							Try
							{
								$PrimEmail = $textboxO365EmailAddress.Text
								add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
								Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
								add-logs -text "LOG: Done"
							}
							Catch
							{
								add-logs -text "WARN: $_"
								Add-Type -AssemblyName System.Windows.Forms
								[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
							}
						}
						Else
						{
							add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
						}
						
					}
					Else
					{
						add-logs -text "LOG: No E-Mail entered"
					}
					
					#Add any email aliases
					add-logs -text 'LOG: Checking Alias Addresses field for entered data'
					If ($textboxo365proxyaddresses.Text -ne $null)
					{
						add-logs -text 'LOG: Found Alias Addresses to add'
						$Proxys = $textboxo365proxyaddresses.Lines
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						$DN = $Mailbox.DisplayName
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding $Proxy for $DN"
							Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
							add-logs -text 'LOG: Done'
						}
					}
					Else
					{
						add-logs -text 'LOG: No Alias Addresses found'
					}
					add-logs -text 'LOG: Done with Alias Addresses'
					
					#Find if user should be added to any mail groups
					add-logs -text 'LOG: Getting checked mail groups'
					$groups = $checkedlistboxDISTROo365groups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Mail Groups found'
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
							If ((Get-UnifiedGroup).displayName -contains $group)
							{
								Add-Logs -text "LOG: $group is an Office 365 group"
								Add-Logs -text "LOG: Adding $DN to $Group"
								Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
								Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
								Add-Logs -text "LOG: Done"
							}
							Else
							{
								Add-Logs -text "LOG: $group is not an Office 365 group"
								
								add-logs -text "LOG: Adding $DN to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
					}
					Else
					{
						add-logs -text 'LOG: No Mail Groups checked'
					}
					Add-Logs -text 'LOG: Done with Mail Groups'
					
					#Shared Mailboxes
					Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
					$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
					#If there are shared mailboxes to add the user to (full access rights)
					If ($SharedMailboxes -ne $null)
					{
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								$Automap = $comboboxsharedmailboxautomap.Text
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
								If ($Automap -eq "False")
								{
									Add-Logs -text "LOG: AutoMapping set to False"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
								}
								Else
								{
									Add-Logs -text "LOG: AutoMapping set to True"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
						}
						ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
								Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
								Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
								Add-Logs -text "LOG: Done"
							}
							
						}
						Else
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
								Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
								Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
								Add-Logs -text 'LOG: Done'
							}
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No Shared Mailboxes selected'
					}
					Add-Logs -text 'LOG: Done with Shared Mailboxes'
					
					Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
					#Hide from GAL
					If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
					{
						Add-Logs -text 'LOG: Hide from global address list is set to True'
						Add-Logs -text 'LOG: Hiding mailbox from global address list'
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						If ($null -ne $mailbox)
						{
							Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
						}
						Else
						{
							Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
							$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
					}
					Else
					{
						Add-Logs -text 'LOG: Hide from global address list is set to False'
					}
				}
				Else
				{
					Add-Logs -text 'LOG: No license is being added for the new user'
					Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
					Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
					Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
				}
				
				#If MFA is set to TRUE then enable MFA for the user
				Add-Logs -text 'LOG: Checking MFA status for the user'
				If ($comboboxMFA.Selecteditem -eq "True")
				{
					$UserMFA = ($User).UserPrincipalName
					Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
					Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
					$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
					Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
					$Auth.RelyingParty = "*"
					Add-Logs -text 'CMD: $MFA = @($Auth)'
					$MFA = @($Auth)
					Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
					Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
					Add-Logs -text 'LOG: Done'
				}
				Else
				{
					Add-Logs -text 'LOG: MFA is set to False'
				}
				Add-Logs -text 'LOG: Done'
				
				Add-Logs -text 'LOG: Checking OWA'
				If ($comboboxOWA.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: OWA Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
					Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
				}
				Else
				{
					Add-Logs -text 'LOG: OWA Enabled'
					
				}
				
				Add-Logs -text 'LOG: Checking ActiveSync'
				If ($comboboxActiveSync.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: ActiveSync Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false'
					Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false
				}
				Else
				{
					Add-Logs -text 'LOG: ActiveSync Enabled'
					
				}
				
				Add-Logs -text 'LOG: Done'
				
			}
		}
		Else
		{
			#User is going to be enabled upon creation
			add-logs -text 'LOG: User is Enabled'
			add-logs -text 'LOG: Creating user'
			If (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
			{
				add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
				$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				If ($Licenses2Add -ne $null)
				{
					License-MUCO365User
				}
				Try
				{
					add-logs -text 'LOG: Creating User'
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Adding Licenses'
					$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
					$licenseforuser | ForEach-Object {
						Add-Logs -text "LOG: Adding $_"
						
						Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
					}
					Add-Logs -text 'LOG: Done'
				}
				Catch
				{
					add-logs -text "WARN: $_"
					$InfoMessage = $_
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				#Find if user should be added to any Security groups
				add-logs -text 'LOG: Getting checked Security groups'
				$groups = $checkedlistboxO365SecurityGroups.CheckedItems
				If ($groups -ne $null)
				{
					add-logs -text 'LOG: Security Groups found'
					$DN = ($User).DisplayName
					foreach ($group in $groups)
					{
						add-logs -text "LOG: Adding $DN to $Group"
						$GroupGuid = ((get-msolgroup -All | where-object { $_.displayname -eq $Group }).ObjectID).GUID
						$UserGUID = (($User).ObjectID).GUID
						add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
						Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
					}
				}
				Else
				{
					add-logs -text 'LOG: No Security Groups checked'
				}
				Add-Logs -text 'LOG: Done with Security Groups'
				
				#Check user licenses, if licensed create and wait for mailbox
				Add-Logs -text 'LOG: Checking if license was applied to the user'
				If ($Licenses2Add -ne $Null)
				{
					Add-Logs -text 'LOG: License is applied to the new user'
					
					$ts = New-TimeSpan -Minutes 8
					
					$TermLoop = ((get-date) + $ts).ToString("HH:mm")
					Do
					{
						$DateNow = (Get-date).ToString("HH:mm")
						Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 20 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 10 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
						Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
					}
					Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
					
					add-logs -text 'LOG: Checking E-Mail address field for entered data'
					If ($textboxO365EmailAddress.Text -like "*@*")
					{
						add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
						If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
						{
							add-logs -text 'LOG: Email is different from UPN, proceeding.'
							
							Try
							{
								$PrimEmail = $textboxO365EmailAddress.Text
								add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
								Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
								add-logs -text "LOG: Done"
							}
							Catch
							{
								add-logs -text "WARN: $_"
								Add-Type -AssemblyName System.Windows.Forms
								[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
							}
						}
						Else
						{
							add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
						}
						
					}
					Else
					{
						add-logs -text "LOG: No E-Mail entered"
					}
					
					#Add any email aliases
					add-logs -text 'LOG: Checking Alias Addresses field for entered data'
					If ($textboxo365proxyaddresses.Text -ne $null)
					{
						add-logs -text 'LOG: Found Alias Addresses to add'
						$Proxys = $textboxo365proxyaddresses.Lines
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						$DN = $Mailbox.DisplayName
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding $Proxy for $DN"
							Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
							add-logs -text 'LOG: Done'
						}
					}
					Else
					{
						add-logs -text 'LOG: No Alias Addresses found'
					}
					add-logs -text 'LOG: Done with Alias Addresses'
					
					#Find if user should be added to any mail groups
					add-logs -text 'LOG: Getting checked mail groups'
					$groups = $checkedlistboxDISTROo365groups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Mail Groups found'
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
							If ((Get-UnifiedGroup).displayName -contains $group)
							{
								Add-Logs -text "LOG: $group is an Office 365 group"
								Add-Logs -text "LOG: Adding $DN to $Group"
								Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
								Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
								Add-Logs -text "LOG: Done"
							}
							Else
							{
								Add-Logs -text "LOG: $group is not an Office 365 group"
								
								add-logs -text "LOG: Adding $DN to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
					}
					Else
					{
						add-logs -text 'LOG: No Mail Groups checked'
					}
					Add-Logs -text 'LOG: Done with Mail Groups'
					
					#Shared Mailboxes
					Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
					$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
					#If there are shared mailboxes to add the user to (full access rights)
					If ($SharedMailboxes -ne $null)
					{
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								$Automap = $comboboxsharedmailboxautomap.Text
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
								If ($Automap -eq "False")
								{
									Add-Logs -text "LOG: AutoMapping set to False"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
								}
								Else
								{
									Add-Logs -text "LOG: AutoMapping set to True"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
						}
						ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
								Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
								Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
								Add-Logs -text "LOG: Done"
							}
							
						}
						Else
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
								Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
								Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
								Add-Logs -text 'LOG: Done'
							}
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No Shared Mailboxes selected'
					}
					Add-Logs -text 'LOG: Done with Shared Mailboxes'
					
					Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
					#Hide from GAL
					If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
					{
						Add-Logs -text 'LOG: Hide from global address list is set to True'
						Add-Logs -text 'LOG: Hiding mailbox from global address list'
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						If ($null -ne $mailbox)
						{
							Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
						}
						Else
						{
							Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
							$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
					}
					Else
					{
						Add-Logs -text 'LOG: Hide from global address list is set to False'
					}
				}
				Else
				{
					Add-Logs -text 'LOG: No license is being added for the new user'
					Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
					Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
					Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
				}
				
				#If MFA is set to TRUE then enable MFA for the user
				Add-Logs -text 'LOG: Checking MFA status for the user'
				If ($comboboxMFA.Selecteditem -eq "True")
				{
					$UserMFA = ($User).UserPrincipalName
					Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
					Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
					$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
					Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
					$Auth.RelyingParty = "*"
					Add-Logs -text 'CMD: $MFA = @($Auth)'
					$MFA = @($Auth)
					Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
					Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
					Add-Logs -text 'LOG: Done'
				}
				Else
				{
					Add-Logs -text 'LOG: MFA is set to False'
				}
				Add-Logs -text 'LOG: Done'
				
				Add-Logs -text 'LOG: Checking OWA'
				If ($comboboxOWA.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: OWA Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
					Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
				}
				Else
				{
					Add-Logs -text 'LOG: OWA Enabled'
					
				}
				
				Add-Logs -text 'LOG: Checking ActiveSync'
				If ($comboboxActiveSync.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: ActiveSync Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false'
					Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false
				}
				Else
				{
					Add-Logs -text 'LOG: ActiveSync Enabled'
					
				}
				
				Add-Logs -text 'LOG: Done'
			}
		}
	}
}

function Update-O365DisplayNameTextBox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365DisplayName -ErrorAction SilentlyContinue).UserFormatO365DisplayName
		#Create an array that we will use for formatting
		$O365DisplayNameFormatString = @()
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%Firstname% %LastName%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatO365DisplayName -Value "%FirstName% %LastName%" -Force | Out-Null
		}
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$O365DisplayNameFormatString += $textboxO365FirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$O365DisplayNameFormatString += $textboxO365LastName.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$O365DisplayNameFormatString += $space
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$O365DisplayNameFormatString += $textboxUserLogonName.text
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$O365DisplayNameFormatString += $textboxO365EmailAddress.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$O365DisplayNameFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$O365DisplayNameFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "UserPrincipalNameDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			ElseIf ($_ -eq "UPNDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			Else
			{
				$O365DisplayNameFormatString += $_
			}
			$textboxO365DisplayName.Text = [String]::Join('', $O365DisplayNameFormatString)
		}
		
	}
}

function Update-O365EmailTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365Email -ErrorAction SilentlyContinue).UserFormatO365Email
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%FirstLetterFirstName%%LastName%%UserPrincipalNameDomain%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatO365Email -Value $config -Force | Out-Null
		}
		#Create an array that we will use for formatting
		$O365EmailFormatString = @()
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$O365EmailFormatString += $textboxO365FirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$O365EmailFormatString += $textboxO365LastName.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$O365EmailFormatString += $space
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$O365EmailFormatString += $textboxUserLogonName.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$O365EmailFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$O365EmailFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "UserPrincipalNameDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			ElseIf ($_ -eq "UPNDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			Else
			{
				$O365EmailFormatString += $_
			}
			$textboxO365EmailAddress.Text = [String]::Join('', $O365EmailFormatString)
		}
		
	}
}

function Update-O365UserPrincipalNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365UserPrincipalName -ErrorAction SilentlyContinue).UserFormatO365UserPrincipalName
		#Create an array that we will use for formatting
		$O365UserPrincipalNameFormatString = @()
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365FirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365LastName.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$O365UserPrincipalNameFormatString += $space
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$O365UserPrincipalNameFormatString += $textboxO365EmailAddress.text
			}
			Else
			{
				$O365UserPrincipalNameFormatString += $_
			}
			$textboxO365UPN.Text = [String]::Join('', $O365UserPrincipalNameFormatString)
		}
		
	}
}

#endregion

$MainForm_Load = {
	

	
	$MFALogin = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name MFALogin -ErrorAction SilentlyContinue).MFALogin
	If ($MFALogin -eq 1)
	{
		$radiobuttonMFALogin.Checked = $true
	}
	Else
	{
		$radiobuttonNonMFALogin.Checked = $true
	}
	

	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		#Set-LightMode
		
	}
	
	
}

$MainForm_DuringShow = {
	
	Import-Module ActiveDirectory -ErrorAction SilentlyContinue
	Import-Module ADSync -ErrorAction SilentlyContinue
	
	#DEBUG
	#$tabcontrolUserProperties.Enabled = $true
	#$groupboxNoAdSync.Enabled = $true
	
	$copyActiveDirectoryUserToolStripMenuItem.Enabled = $false
	$copyOffice365UserToolStripMenuItem.Enabled = $false
	
	$textboxADSyncServer.Enabled = $false
	
	$datetimepickerDATE.Refresh()
	
	$radiobuttonNever.Checked = $true
	$datetimepickerDATE.Enabled = $false
	$datetimepickerTIME.Enabled = $false
	
	$datetimepickerTIME.Text = "05:00 PM"
	
	$MainForm.MaximizeBox = $false
	
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1
	#DEBUG
	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $false

	#Disable the Office 365 license drop down until we connect to MSOnline
	#$comboboxO365Licenses.Enabled = $False
	$comboboxO365Licenses.Text = "Please connect to Office 365 to assign a license"
	
	#DEBUG
	$tabcontrolUserProperties.Enabled = $false
	
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	
	$comboboxO365HidefromGAL.SelectedItem = "False"
	
	$labelTimeLeft.Text = ""
	
	$global:ExternalLog = "$env:TEMP\MUC.txt"
	$labelLogFile.Text = $global:ExternalLog
	
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items "Domain Users"
	$comboboxPrimaryGroup.SelectedItem = "Domain Users"
	
	$AlwaysADCreate = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysADCreate -ErrorAction SilentlyContinue).AlwaysADCreate
	If ($AlwaysADCreate -eq 1)
	{
		$checkboxCreateAnActiveDirect.Checked = $true
	}
	
	$AlwaysO365Create = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysO365Create -ErrorAction SilentlyContinue).AlwaysO365Create
	If ($AlwaysO365Create -eq 1)
	{
		$checkboxconfigo365user.Checked = $true
	}
	
	$comboboxActiveSync.SelectedItem = "True"
}

$resetFormToolStripMenuItem_Click = {
	Reset-Form
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateAnActiveDirect.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		Try
		{
			New-MUCUser
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		Try
		{
			New-MUCO365User
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
		
		#### ACTIVE DIRECTORY USER CREATION PORTION ####
		
		add-logs -text 'LOG: Only an Active Directory user is being created'
		Try
		{
			New-MUCUser
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
		
		
		#### OFFICE 365 USER CREATION PORTION ####
		
		
		add-logs -text 'LOG: Only an Office 365 User is being created'
		Try
		{
			New-MUCO365User
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
	
	$ResetForm = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ResetForm -ErrorAction SilentlyContinue).ResetForm
	If ($ResetForm -eq 1)
	{
		Reset-Form
	}
}


$textboxDisplayName_TextChanged = {
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'White'
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'Black'
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'Firebrick'
		}
		
	}
	
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxDisplayName_ChangeFocus = {
	$ADDisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDisplayName -ErrorAction SilentlyContinue).ADDisplayName
	If ($ADDisplayName -eq 1)
	{
		$words = $textboxDisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxLastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxLastName_ChangeFocus = {
	$ADLastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADLastName -ErrorAction SilentlyContinue).ADLastName
	If ($ADLastName -eq 1)
	{
		$words = $textboxLastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxLastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxFirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
	
	
		
	
}

$textboxFirstName_ChangeFocus = {
	$ADFirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADFirstName -ErrorAction SilentlyContinue).ADFirstName
	If ($ADFirstName -eq 1)
	{
		$words = $textboxFirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxFirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxInitials_ChangeFocus = {
	$ADInitials = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADInitials -ErrorAction SilentlyContinue).ADInitials
	If ($ADInitials -eq 1)
	{
		$words = $textboxInitials.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxInitials.Text = $TextInfo.ToTitleCase($words)
	}
}


$buttonGeneratePassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword
		$textboxPasswordGen.Text = $Password
		$maskedtextboxpassword.Text = $Password
		$textboxConfirmPassword.text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxpassword.Text = $textboxPasswordGen.Text
		$textboxConfirmPassword.text = $textboxPasswordGen.Text
	}
	
}

$textboxConfirmPassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'White'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Black'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Firebrick'
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}

			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateAnActiveDirect.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = $textboxUserLogonName.text
		$comboboxO365Domains.SelectedItem = $comboboxDomains.SelectedItem
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'White'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Black'
		}
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Firebrick'
		}
		
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonNonMFALogin.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: $((Get-ChildItem -Path $($env:LOCALAPPDATA+"\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse ).FullName|?{$_ -notmatch "_none_"}|select -First 1)'
		$Modules = $((Get-ChildItem -Path $($env:LOCALAPPDATA + "\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse).FullName | Where-Object{ $_ -notmatch "_none_" } | Select-Object -First 1)
		If ($Modules -eq $Null)
		{
			add-logs -text 'WARN: MFA Module was not found'
			$InfoMessage = "Exchange Online MFA Module was not found, please make sure you have downloaded and installed it from your tenant https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/mfa-connect-to-exchange-online-powershell?view=exchange-ps"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		$EXOSession = New-ExoPSSession
		Import-PSSession $EXOSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'MediumSeaGreen'
		}
		Else
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'Green'
		}
		
		
		$Global:O365_Pre_Req++
		#Create just an AD User
		If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD nad O365 User (w/ ADSync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD And O365 User (no Sync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 User no adsync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 user with ADSync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$buttonConnectToOffice365.ForeColor = 'White'
		}
		Else
		{
			$buttonConnectToOffice365.ForeColor = 'Black'
		}
		
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		#add-logs -text 'LOG: Enabling Licenses combobox'
		#add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		#$comboboxO365Licenses.Enabled = $True
		#add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = ""
		
		#Cache licenses to use in other forms
		$LicenseArray | Out-File "$env:TEMP\MUCLicenses.txt" -Force -ErrorAction SilentlyContinue
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		#add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		#Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = "Click to select an Office 365 license"

		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup -All | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$MailGroups = (Get-MsolGroup -All | Where-Object { ($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataMailGroups = $MailGroups
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $MailGroups
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup -All | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$SecurityGroups = (Get-MsolGroup -All | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataSecurityGroups = $SecurityGroups
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $SecurityGroups
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		$comboboxO365HidefromGAL.SelectedItem = "False"
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword -O365
		$textboxo365passwordgen.Text = $Password
		$maskedtextboxo365password.Text = $Password
		$textboxo365confirmpassword.Text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
		$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
		add-logs -text 'LOG: Done'
	}

	
	
}


$checkboxRunADSync_CheckedChanged = {
	If ($checkboxRunADSync.Checked -eq $True)
	{
		$groupboxNoAdSync.Enabled = $false
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
		
		$textboxADSyncServer.Enabled = $true
		
	}
	elseif ($checkboxRunADSync.Checked -eq $false)
	{
		$groupboxNoAdSync.Enabled = $True
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
		
		$textboxADSyncServer.Enabled = $false
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$buttonExit_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged = {
	If ((($textboxO365LastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	Else
	{
		Update-O365EmailTextbox
		Update-O365DisplayNameTextBox
		Update-O365UserPrincipalNameTextbox
	}
}
$textboxO365LastName_FocusChanged = {
	$O365LastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365LastName -ErrorAction SilentlyContinue).O365LastName
	If ($O365LastName -eq 1)
	{
		$words = $textboxO365LastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365LastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365FirstName_TextChanged = {
	If ((($textboxO365FirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	Else
	{
		Update-O365EmailTextbox
		Update-O365DisplayNameTextBox
		Update-O365UserPrincipalNameTextbox
	}
	
}

$textboxO365FirstName_FocusChanged = {
	$O365FirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365FirstName -ErrorAction SilentlyContinue).O365FirstName
	If ($O365FirstName -eq 1)
	{
		$words = $textboxO365FirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365FirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365Initials_TextChanged = {
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged = {
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
	If ($Global:ExternalLog -ne $null)
	{
		$console.Text | Out-File $Global:ExternalLog
	}
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	if ($checkboxconfigo365user.CheckState -eq 'checked')
	{
		$tabpageOffice365.Enabled = $true
	}
	Else
	{
		$tabpageOffice365.Enabled = $false
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		If ($null -ne (Get-Module -ListAvailable -Name "ADSync"))
		{
			add-logs -text 'LOG: DirSync found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			$groupboxNoAdSync.Enabled = $true
			$comboboxOWA.SelectedItem = "True"
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Enabling ADSync CheckBox'
		$checkboxRunADSync.Enabled = $True
		add-logs -text 'LOG: Enabling No ADSync Groupbox'
		$groupboxNoAdSync.Enabled = $true
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateAnActiveDirect_CheckedChanged = {
	
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateAnActiveDirect.Checked -eq $true))
	{
		If ($Null -ne (Get-Module -ListAvailable -Name "ActiveDirectory"))
		{
			add-logs -text 'LOG: Enabling AD User creation'
			$tabcontrolUserProperties.Enabled = $true
			add-logs -text 'LOG: Done'
			
			Add-Logs -text "Enabling Copy AD User Menu Item"
			$copyActiveDirectoryUserToolStripMenuItem.Enabled = $true
			add-logs -text 'LOG: Done'
			
			
			add-logs -text 'LOG: Loading Organizational Unit Tree'
			add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
			$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName
			If ($null -eq $OUTree)
			{
				$InfoMessage = 'Could not load Organizational Unit structure'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxOUTree.Enabled = $false
			}
			Else
			{
				add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
				Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
				add-logs -text 'LOG: Done'
				$comboboxOUTree.Enabled = $true
			}
			
			add-logs -text 'LOG: Getting Active Directory Groups'
			add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
			$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
			$Global:OriginalData = $Groups
			If ($null -eq $Groups)
			{
				add-logs -text 'WARN: No Active Directory Groups were found'
				$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
				Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting NetBIOS Name'
			add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
			$Netbiosname = (Get-ADDomain).NetBIOSName
			If ($null -eq $Netbiosname)
			{
				add-logs -text 'WARN: No NetBIOS Name was found'
				$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$textboxUPNDomain.Text = "Not Available"
			}
			Else
			{
				$textboxUPNDomain.Text = $Netbiosname + "\"
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting UPN Suffixes'
			add-logs -text 'CMD: $Forest = Get-ADForest'
			$Forest = Get-ADForest
			If ($null -eq $Forest)
			{
				add-logs -text 'WARN: No Active Directory Forest was found'
				$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxDomains.Enabled = $false
			}
			Else
			{
				$comboboxDomains.Enabled = $true
				$UPNs = @()
				add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
				$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
				If ($extraUPNs -ne $Null)
				{
					foreach ($extraUPN in $extraUPNs)
					{
						$UPNs += "@" + $extraUPN
					}
				}
				add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
				$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
				Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
			}
			add-logs -text 'LOG: Done'
			
			$comboboxDomains.SelectedIndex = 0
		}
		Else
		{
			$InfoMessage = "Could not locate the ActiveDirectory module on $env:COMPUTERNAME. This module is required to create an Active Directory user"
			$InfoTitle = "Error"
			Show-MessageBox_psf
			$checkboxCreateAnActiveDirect.CheckState = 'Unchecked'
		}
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	
	Update-SamAccountNameTextbox
	Update-DisplayNameTextbox
	Update-EmailTextbox
	
	$textboxSamAccount.Text = $textboxUserLogonName.Text
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'White'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Black'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Firebrick'
		}
		
	}
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxUserLogonName_FocusChanged = {
	$ADUPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADUPN -ErrorAction SilentlyContinue).ADUPN
	If ($ADUPN -eq 1)
	{
		$words = $textboxUserLogonName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxUserLogonName.Text = $TextInfo.ToTitleCase($words)
	}
}




$maskedtextboxpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'White'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'LightCoral'
			
		}
		
	}
	Else
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'Black'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'Firebrick'
			
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}



$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHub_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'White'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'LightCoral'
		}
	}
	Else
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'Black'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'Firebrick'
		}
	}
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365DisplayName_FocusChanged = {
	$O365DisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365DisplayName -ErrorAction SilentlyContinue).O365DisplayName
	If ($O365DisplayName -eq 1)
	{
		$words = $textboxO365DisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365DisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365UPN_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		Update-O365EmailTextbox
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'White'
		}
		Else
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Black'
		}
		
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Firebrick'
		}
		
		
	}
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_FocusChanged = {
	$O365UPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365UPN -ErrorAction SilentlyContinue).O365UPN
	If ($O365UPN -eq 1)
	{
		$words = $textboxO365UPN.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365UPN.Text = $TextInfo.ToTitleCase($words)
	}
}


$maskedtextboxo365password_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'White'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'lightcoral'
		}
	}
	Else
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'Black'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'Firebrick'
		}
	}
	
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}

$comboboxO365Licnses_Click = {
	Show-O365LicenseSelection_psf
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	Toogle-LicenseStatus
}





$comboboxO365countrycode_SelectedIndexChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
		}
		
	}
	Else
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'White'
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
		
	}
	
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'LightCoral'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'LightCoral'
	}
	Else
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'Firebrick'
	}
	
	
}



$saveLogAsToolStripMenuItem_Click = {
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged = {
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}




$versionToolStripMenuItem_Click = {
	$InfoMessage = "
Version Number: $Version
Build Date: $Builddate
Author: Brad Wyatt
"
	$InfoTitle = "Build Information"
	Show-MessageBox_psf
	
}


$changelogToolStripMenuItem_Click = {
	Show-ChangeLog_psf
	
}

$labelChangelog_Click = {
	Show-ChangeLog_psf
	
}

$externalLogFileToolStripMenuItem_Click = {
	# Class Details:  https://msdn.microsoft.com/en-us/library/system.windows.forms.savefiledialog(v=vs.110).aspx 
	$SaveFileDialog = New-Object windows.forms.savefiledialog
	$SaveFileDialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$SaveFileDialog.title = "Log File Location"
	#$SaveFileDialog.filter = "All files (*.*)| *.*"   
	#$SaveFileDialog.filter = "PublishSettings Files|*.publishsettings|All Files|*.*" 
	$SaveFileDialog.filter = "Log Text File|*.txt"
	$SaveFileDialog.ShowHelp = $True
	$result = $SaveFileDialog.ShowDialog()
	$result
	$Global:ExternalLog = $SaveFileDialog.filename
	Write-Host $result
	If ($result -eq "Ok")
	{
		
		$labelLogFile.Text = $global:ExternalLog
		
	}
}


$radiobuttonExpireOn_CheckedChanged = {
	#Enable the Date Date / Time picker
	$datetimepickerDATE.Enabled = $true
	#Enable the Time date/time picker
	$datetimepickerTIME.Enabled = $true
	
}

$radiobuttonNever_CheckedChanged = {
	#Disable the Date Date/Time picker
	$datetimepickerDATE.Enabled = $false
	#Disable the Time Date/Time picker
	$datetimepickerTIME.Enabled = $false
	
}

$datetimepickerDATE_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$datetimepickerTIME_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$checkedlistboxGroups_SelectedIndexChanged = {

	If ($click -ne 1)
	{
		$CachedCheckedGroups = Get-Content $CacheGroups -ErrorAction SilentlyContinue
		
		$checkedlistboxGroups.CheckedItems | ForEach-Object{
			#If checked and not in file, add and append
			$CheckItem = Get-Content $CacheGroups | Select-String $_
			If ($null -eq $CheckItem)
			{				
				$_ | Out-File $CacheGroups -Force -Append
			}
		}
		
		$CachedCheckedGroups = Get-Content $CacheGroups -ErrorAction SilentlyContinue
		
		
		#Get all unchecked items
		$UncheckedItems = $checkedlistboxGroups.Items | Where-Object { $checkedlistboxGroups.CheckedItems -notcontains $_ }
		
		#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
		Compare-Object -ReferenceObject $CachedCheckedGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
			# == means that the obj is unchecked but present on the file, we need to remove from file
			If ($_.SideIndicator -eq "==")
			{
				#Remove the item that is present on the list but unchecked from the file
				$Info = $CachedCheckedGroups | select-string -pattern $_.InputObject -notmatch
				$InfoMessage = $Info
				$Info | Out-File $CacheGroups -Force -ErrorAction SilentlyContinue
			}
		}
	}
	
	
	$Items = @()
	$Items += $checkedlistboxGroups.CheckedItems
	$Items += "Domain Users"
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items $Items
	
	
}





$optionsToolStripMenuItem_Click = {
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
}

$textboxDescription_FocusChanged = {
	$ADDescription = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription
	If ($ADDescription -eq 1)
	{
		$words = $textboxDescription.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDescription.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxoffice_FocusChanged = {
	$ADOffice = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADOffice -eq 1)
	{
		$words = $textboxoffice.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxoffice.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxSamAccount_FocusChanged = {
	$ADSamAccountName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADSamAccountName -ErrorAction SilentlyContinue).ADSamAccountName
	If ($ADSamAccountName -eq 1)
	{
		$words = $textboxSamAccount.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxSamAccount.Text = $TextInfo.ToTitleCase($words)
	}
	
}



$textboxStreet_FocusChanged = {
	$ADStreet = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADStreet -ErrorAction SilentlyContinue).ADStreet
	If ($ADStreet -eq 1)
	{
		$words = $textboxstreet.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstreet.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxcity_FocusChanged = {
	$ADCity = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCity -ErrorAction SilentlyContinue).ADCity
	If ($ADCity -eq 1)
	{
		$words = $textboxcity.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxcity.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxstate_FocusChanged = {
	$ADState = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState
	If ($ADState -eq 1)
	{
		$words = $textboxstate.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstate.Text = $TextInfo.ToTitleCase($words)
	}
	
	
}

$textboxjobtitle_FocusChanged = {
	$ADJobTitle = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADJobTitle -ErrorAction SilentlyContinue).ADJobTitle
	If ($ADJobTitle -eq 1)
	{
		$words = $textboxjobtitle.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxjobtitle.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxDepartment_FocusChanged = {
	$ADDepartment = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment
	If ($ADDepartment -eq 1)
	{
		$words = $textboxDepartment.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDepartment.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxCompany_FocusChanged = {
	$ADCompany = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany
	If ($ADCompany -eq 1)
	{
		$words = $textboxCompany.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxCompany.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxSearchGroups_TextChanged = {
	
	$click = 1
	$Filter = $textboxSearchGroups.text
	$Results = $OriginalData | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxGroups -Items $Results
	
	Get-Content $CacheGroups -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxGroups.Items -contains $_)
		{
			$checkedlistboxGroups.SelectedItem = $_
			$index = $checkedlistboxGroups.SelectedIndex
			$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchGroups.Focus()
	
}


$textboxSearchO365SecurityGroups_TextChanged = {
	$click = 1
	
	
	$Filter = $textboxSearchO365SecurityGroups.text
	$Results = $OriginalDataSecurityGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $Results
	
	Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxO365SecurityGroups.Items -contains $_)
		{
			$checkedlistboxO365SecurityGroups.SelectedItem = $_
			$index = $checkedlistboxO365SecurityGroups.SelectedIndex
			$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchO365SecurityGroups.Focus()
	
}

$textboxO365MailGroups_TextChanged={
	
	$click = 1
	$Filter = $textboxO365MailGroups.text
	$Results = $OriginalDataMailGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $Results
	
	Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxDISTROo365groups.Items -contains $_)
		{
			$checkedlistboxDISTROo365groups.SelectedItem = $_
			$index = $checkedlistboxDISTROo365groups.SelectedIndex
			$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxO365MailGroups.Focus()
	
	
	
	
}

$textboxO365street_FocusChanged={
	$O365Street = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365Street -ErrorAction SilentlyContinue).O365Street
	If ($O365Street -eq 1)
	{
		$words = $textboxO365street.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365street.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxo365city_FocusChanged={
	$O365City = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City
	If ($O365City -eq 1)
	{
		$words = $textboxo365city.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365city.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxo365state_FocusChanged={
	$O365State = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State
	If ($O365State -eq 1)
	{
		$words = $textboxo365state.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365state.Text = $TextInfo.ToTitleCase($words)
	}
	
}


$textboxemployeenumber_TextChanged={
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
}

$textboxEmployeeID_TextChanged={
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
}

$textboxEmail_TextChanged={
	
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
}

$copyActiveDirectoryUserToolStripMenuItem_Click={
	
	#Set value to 1 so we dont have string settings get in the way
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 1 -Force | Out-Null
	Show-CopyFromUser_psf
	$CopyUser = $CopyFromUser_comboboxcopyuser
	$Job = $PSJob
	$UserJob = ($Job | Where-Object { $_.Name -like $CopyUser })[0]
	$UserTemplate = Get-ADUser -identity ($UserJob).ObjectGuid -properties *
	Copy-ADUserAttributes
	#Set back to 0
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 0 -Force | Out-Null
	Get-Job | Remove-Job
	
}

$textboxSamAccount_TextChanged={
	Update-EmailTextbox
	Update-DisplayNameTextbox
	Update-UserPrincipalNameTextbox
}
$textboxSamAccount_FocusChanged = {
	#Update-EmailTextbox
	Update-DisplayNameTextbox
	#Update-UserPrincipalNameTextbox
}


$clearFormToolStripMenuItem_Click={
	Reset-Form
	
}


$exitToolStripMenuItem1_Click={
	$MainForm.close()
	
}

$copyToolStripMenuItem_Click={
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
	
}

$checkedlistboxDISTROo365groups_SelectedIndexChanged = {
	$CopyO365User = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyO365User -ErrorAction SilentlyContinue).CopyO365User
	If ($CopyO365User -ne 1)
	{
		If ($click -ne 1)
		{
			$CachedCheckedDistroGroups = Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue
			
			$checkedlistboxDISTROo365groups.CheckedItems | ForEach-Object{
				#If checked and not in file, add and append
				$CheckItem = Get-Content $CacheDistroGroupsFile | Select-String $_
				If ($null -eq $CheckItem)
				{
					$_ | Out-File $CacheDistroGroupsFile -Force -Append
				}
			}
			
			$CachedCheckedDistroGroups = Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue
			
			
			#Get all unchecked items
			$UncheckedItems = $checkedlistboxDISTROo365groups.Items | Where-Object { $checkedlistboxDISTROo365groups.CheckedItems -notcontains $_ }
			
			#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
			Compare-Object -ReferenceObject $CachedCheckedDistroGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
				# == means that the obj is unchecked but present on the file, we need to remove from file
				If ($_.SideIndicator -eq "==")
				{
					#Remove the item that is present on the list but unchecked from the file
					$Info = $CachedCheckedDistroGroups | select-string -pattern $_.InputObject -notmatch
					$InfoMessage = $Info
					$Info | Out-File $CacheDistroGroupsFile -Force -ErrorAction SilentlyContinue
				}
			}
		}
	}
	
}

$checkedlistboxO365SecurityGroups_SelectedIndexChanged = {
	$CopyO365User = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyO365User -ErrorAction SilentlyContinue).CopyO365User
	If ($CopyO365User -ne 1)
	{
		If ($click -ne 1)
		{
			$CachedCheckedSecurityGroups = Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue
			
			$checkedlistboxO365SecurityGroups.CheckedItems | ForEach-Object{
				#If checked and not in file, add and append
				$CheckItem = Get-Content $CacheSecurityGroupsFile | Select-String $_
				If ($null -eq $CheckItem)
				{
					$_ | Out-File $CacheSecurityGroupsFile -Force -Append
				}
			}
			
			$CachedCheckedSecurityGroups = Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue
			
			
			#Get all unchecked items
			$UncheckedItems = $checkedlistboxO365SecurityGroups.Items | Where-Object { $checkedlistboxO365SecurityGroups.CheckedItems -notcontains $_ }
			
			#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
			Compare-Object -ReferenceObject $CachedCheckedSecurityGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
				# == means that the obj is unchecked but present on the file, we need to remove from file
				If ($_.SideIndicator -eq "==")
				{
					#Remove the item that is present on the list but unchecked from the file
					$Info = $CachedCheckedSecurityGroups | select-string -pattern $_.InputObject -notmatch
					$InfoMessage = $Info
					$Info | Out-File $CacheSecurityGroupsFile -Force -ErrorAction SilentlyContinue
				}
			}
		}
	}
	
}

$checkboxUserMustChangePasswo_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
	
}

$checkboxUserCannotChangePass_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both 'User Must Change Password at Next Logon' and User 'Cannot Change Password' for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
		
	}
	
	
}

$checkboxPasswordNeverExpires_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
	
}


$copyOffice365UserToolStripMenuItem_Click={
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force | Out-Null
	Show-CopyFromO365User_psf
	Copy-O365UserAttributes
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force | Out-Null
	
}

$MainForm_Closing=[System.Windows.Forms.FormClosingEventHandler]{
Get-PSSession | Remove-PSSession -ErrorAction SilentlyContinue
	
}



$comboboxO365Domains_SelectedIndexChanged={
	Update-O365EmailTextbox
}


$comboboxDomains_SelectedIndexChanged={
	Update-EmailTextbox
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>