<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load = {
	
	$datetimepickerDATE.Refresh()
	
	$radiobuttonNever.Checked = $true
	$datetimepickerDATE.Enabled = $false
	$datetimepickerTIME.Enabled = $false
	
	$datetimepickerTIME.Text = "05:00 PM"
	
	$MainForm.MaximizeBox = $false
	
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$comboboxO365countrycode.SelectedItem = "US"
	
	$comboboxO365HidefromGAL.SelectedItem = "False"
	
	$labelTimeLeft.Text = ""
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateAnActiveDirect.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunADSyncAfterUserCr.CheckState -eq 'Checked')
		{
			If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$SyncServer = $textboxADSyncServer.text
				add-logs -text 'LOG: DirSync Enabled'
				add-logs -text "LOG: Running DirSync on $SyncServer"
				add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
				Try
				{
					Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
				}
				Catch
				{
					add-logs -text "WARN: $_"
					Add-Type -AssemblyName System.Windows.Forms
					[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
				}
				add-logs -text 'LOG: Done'
			}
			Else
			{
				add-logs -text "WARN: ADSync Server text box is empty"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
			}
		}
		#If DirSync is not enabled
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				
				#User is going to be disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop) )
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
		
		#### ACTIVE DIRECTORY USER CREATION PORTION ####
		
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
		
		
		
		#### OFFICE 365 USER CREATION PORTION ####
		
		
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunADSyncAfterUserCr.CheckState -eq 'Checked')
		{
			If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$SyncServer = $textboxADSyncServer.text
				add-logs -text 'LOG: DirSync Enabled'
				add-logs -text "LOG: Running DirSync on $SyncServer"
				add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
				Try
				{
					Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
				}
				Catch
				{
					add-logs -text "WARN: $_"
					Add-Type -AssemblyName System.Windows.Forms
					[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
				}
				add-logs -text 'LOG: Done'
			}
			Else
			{
				add-logs -text "WARN: ADSync Server text box is empty"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
			}
		}
		#If DirSync is not enabled
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				
				#User is going to be disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}


$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}


$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateAnActiveDirect.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = $textboxUserLogonName.text
		$comboboxO365Domains.SelectedItem = $comboboxDomains.SelectedItem
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		If ($Modules -eq $Null)
		{
			add-logs -text 'WARN: MFA Module was not found'
			$InfoMessage = "Exchange Online MFA Module was not found, please make sure you have downloaded and installed it from your tenant https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/mfa-connect-to-exchange-online-powershell?view=exchange-ps"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		
		$labelconnectionstatus.Text = "Connected"
		$labelconnectionstatus.ForeColor = 'Green'
		
		$Global:O365_Pre_Req++
		#Create just an AD User
		If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD nad O365 User (w/ ADSync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD And O365 User (no Sync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 User no adsync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 user with ADSync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		$comboboxO365HidefromGAL.SelectedItem = "False"
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunADSyncAfterUserCr_CheckedChanged = {
	If ($checkboxRunADSyncAfterUserCr.Checked -eq $True)
	{
		$groupboxNoAdSync.Enabled = $false
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
		
	}
	elseif ($checkboxRunADSyncAfterUserCr.Checked -eq $false)
	{
		$groupboxNoAdSync.Enabled = $True
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged= {
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
		
	If ($Global:ExternalLog -ne $null)
	{
		$console.Text | Out-File $Global:ExternalLog 
	}
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found on local system'
			$checkboxRunADSyncAfterUserCr.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found on local system'
			$checkboxRunADSyncAfterUserCr.Enabled = $True
			$groupboxADSync.Enabled = $true
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Enabling ADSync CheckBox'
		$checkboxRunADSyncAfterUserCr.Enabled = $True
		add-logs -text 'LOG: Enabling No ADSync Groupbox'
		$groupboxNoAdSync.Enabled = $true
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateAnActiveDirect_CheckedChanged = {
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Organizational Unit Tree'
		add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
		$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName
		If ($null -eq $OUTree)
		{
			$InfoMessage = 'Could not load Organizational Unit structure'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$comboboxOUTree.Enabled = $false
		}
		Else
		{
			add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
			Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
			add-logs -text 'LOG: Done'
			$comboboxOUTree.Enabled = $true
		}
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$textboxUPNDomain.Text ="Not Available"
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$comboboxDomains.Enabled = $false
		}
		Else
		{
			$comboboxDomains.Enabled = $true
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {

		$textboxSamAccount.Text = $textboxUserLogonName.Text
	
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
		
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
		
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	$comboboxOUTree.SelectedText = ""
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunADSyncAfterUserCr.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	$comboboxMFA.SelectedItem = "False"
	$comboboxO365countrycode.SelectedItem = "US"
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""
	$textboxo365city.Text = ""
	$textboxo365state.Text = ""
	$textboxo365zip.Text = ""
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHub_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$Global:O365_Pre_Req--
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	$labelconnectionstatus.Text = "Not Connected"
	$labelconnectionstatus.ForeColor = 'Firebrick'
	
}



$saveLogAsToolStripMenuItem_Click={
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged={
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}




$versionToolStripMenuItem_Click={
	$InfoMessage = "
Version Number: $Version
Build Date: $Builddate
Author: Brad Wyatt
"
	$InfoTitle = "Build Information"
	Show-MessageBox_psf
	
}


$changelogToolStripMenuItem_Click={
	Show-ChangeLog_psf
	
}

$labelChangelog_Click={
	Show-ChangeLog_psf
	
}

$externalLogFileToolStripMenuItem_Click={
	# Class Details:  https://msdn.microsoft.com/en-us/library/system.windows.forms.savefiledialog(v=vs.110).aspx 
	$SaveFileDialog = New-Object windows.forms.savefiledialog
	$SaveFileDialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$SaveFileDialog.title = "Log File Location"
	#$SaveFileDialog.filter = "All files (*.*)| *.*"   
	#$SaveFileDialog.filter = "PublishSettings Files|*.publishsettings|All Files|*.*" 
	$SaveFileDialog.filter = "Log Text File|*.txt"
	$SaveFileDialog.ShowHelp = $True
	$result = $SaveFileDialog.ShowDialog()
	$result
	$Global:ExternalLog = $SaveFileDialog.filename
	
	$labelLogFile.Text = $global:ExternalLog
	
}


$radiobuttonExpireOn_CheckedChanged = {
	#Enable the Date Date / Time picker
	$datetimepickerDATE.Enabled = $true
	#Enable the Time date/time picker
	$datetimepickerTIME.Enabled = $true
	
}

$radiobuttonNever_CheckedChanged = {
	#Disable the Date Date/Time picker
	$datetimepickerDATE.Enabled = $false
	#Disable the Time Date/Time picker
	$datetimepickerTIME.Enabled = $false
	
}

$datetimepickerDATE_ValueChanged={	
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$datetimepickerTIME_ValueChanged={
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>