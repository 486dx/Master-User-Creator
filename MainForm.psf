<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Get-DictionaryPassword
{
	param
	(
		
		[switch]$O365
	)
	$Dictionary = @(
		"Honda";
		"Staple";
		"Battery";
		"Civic";
		"Chicago";
		"Winter";
		"Cubs";
		"Bears";
		"Snow";
		"Train";
		"Shoes";
		"Blue";
		"Bike";
		"Ring";
		"Watch";
		"Computer";
		"Neck";
		"Laptop";
		"Monitor";
		"Toilet";
		"Baseball";
		"Football";
		"Soccer";
		"Phone";
		"Carbondale";
		"Saluki";
		"Swim";
		"Lake";
		"Puppy";
		"Watch";
		"Royals";
		"Basketball";
		"Letter";
		"Paper";
		"Sticker";
		"Kitten";
		"Marker";
		"Highway";
		"Wire";
		"Keyboard";
		"Frisbee";
		"Disc";
		"Hawk";
		"West";
		"North";
		"East";
		"South";
		"Water";
		"Ice";
		"Dirt";
		"Taco";
		"Mouse";
		"Deer";
		"Speaker";
		"Hand";
		"Green";
		"Purple";
		"Pink";
		"Boat";
		"Toilet";
		"Sting";
		"Fish";
		"Bee";
		"White";
		"Grey";
		"Shoes";
		"Carpet";
		"Bed";
		"Pillow";
		"Sears";
		"Mustard";
		"Relish";
		"Ketchup";
		"Milk";
		"Apple";
		"Orange";
		"Flower";
		"Lotion";
		"Plane";
		"Desert";
		"Sand";
		"Beach";
		"Clouds";
		"Wagon";
		"Hair";
		"Internet";
		"Track";
		"Golf";
		"Sledding";
		"Market";
		"Window";
		"Door";
		"Deck";
		"Cards";
		"Shelf";
		"Santa";
		"Tack";
		"Building";
		"Tennis";
		"Power";
		"Sox";
		"Wrigley";
		"Tea";
		"Juice";
		"Plant";
		"Geneva";
		"City";
		"Kansas";
		"Missouri";
		"Midwest";
		"Great";
		"Box";
		"Crane";
		"Michigan";
		"Illinois";
		"Garbage";
		"Cougars";
		"Route";
		"Bridge";
		"Mountain";
		"Message";
		"Fire";
		"Taxi";
		"Bus";
		"Color";
		"Sharpie";
		"Ball";
		"Square";
		"River";
		"Navy";
		"Pier";
		"Grant";
		"Park";
		"Lincoln";
		"President";
		"Wrigley";
		"Soldier";
		"Forest";
		"Bulldog";
		"Police";
		"Taco";
		"Deep";
		"Dish";
		"Pizza";
		"Fire";
		"Ice";
		"Lion";
		"World";
		"Shoe";
		"Ant";
		"Bug";
		"Hair";
		"Beard";
		"Light";
		"Wave";
		"Field";
		"Toll";
		"Tax";
		"Money";
		"Bill";
		"Pot";
		"Pan"
	)
	If ($O365 -eq $True)
	{
		$word1 = (Get-Random $Dictionary)
		$Num = Get-random -Maximum 99 -Minimum 0
		$WChar = @(
			"!"
			"@"
			"$"
			"%"
			"&"
			"?"
			"#"
		)
		$Wildchar = Get-random $WChar
		
		$Word1 + "-" + $Num + $WildChar
	}
	Else
	{
		$word1 = (Get-Random $Dictionary)
		
		$word2 = (Get-Random $Dictionary | Where-Object { $_ -ne $word1 })
		
		$Word3 = (Get-Random $Dictionary | Where-Object { ($_ -ne $word1) -and ($_ -ne $word2) })
		
		$Num = Get-random -Maximum 99 -Minimum 0
		
		$Word1 + "-" + $word2 + "-" + $word3 + $Num
	}
	
	
}

function Reset-Form
{
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	$comboboxOUTree.SelectedText = ""
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	$textboxEmployeeID.Text = ""
	$textboxemployeenumber.Text = ""
	$textboxemployeeType.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunADSync.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	$comboboxMFA.SelectedItem = "False"
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""
	$textboxo365city.Text = ""
	$textboxo365state.Text = ""
	$textboxo365zip.Text = ""
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

function Update-DisplayNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatDisplayName -ErrorAction SilentlyContinue).UserFormatDisplayName
		#Create an array that we will use for formatting
		$DisplayNameFormatString = @()
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%Firstname% %LastName%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatDisplayName -Value "%FirstName% %LastName%" -Force | Out-Null
		}
		
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text
			}
			ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
			{
				$DisplayNameFormatString += $textboxInitials.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$DisplayNameFormatString += $space
			}
			ElseIf ($_ -eq "EmployeeID")
			{
				$DisplayNameFormatString += $textboxEmployeeID.text
			}
			ElseIf ($_ -eq "EmployeeNumber")
			{
				$DisplayNameFormatString += $textboxemployeenumber.text
			}
			ELseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.text
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$DisplayNameFormatString += $textboxUserLogonName.text
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$DisplayNameFormatString += $textboxEmail.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.Text
			}
			Else
			{
				$DisplayNameFormatString += $_
			}
			
			$textboxDisplayName.Text = [String]::Join('', $DisplayNameFormatString)
			
		}
		
		
	}
}

function Update-EmailTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatEmail -ErrorAction SilentlyContinue).UserFormatEmail
		#Create an array that we will use for formatting
		$EmailFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$EmailFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$EmailFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$EmailFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$EmailFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$EmailFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$EmailFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$EmailFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$EmailFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$EmailFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$EmailFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$EmailFormatString += $_
				}
				
			}
			$textboxEmail.Text = [String]::Join('', $EmailFormatString)
		}
	}
}

function Update-SamAccountNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatSamAccountName -ErrorAction SilentlyContinue).UserFormatSamAccountName
		#Create an array that we will use for formatting
		$SamAccountNameFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$SamAccountNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$SamAccountNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$SamAccountNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$SamAccountNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$SamAccountNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$SamAccountNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$SamAccountNameFormatString += $_
				}
				
			}
			$textboxSamAccount.Text = [String]::Join('', $SamAccountNameFormatString)
		}
	}
}

function Update-UserPrincipalNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatUserPrincipalName -ErrorAction SilentlyContinue).UserFormatUserPrincipalName
		#Create an array that we will use for formatting
		$UserPrincipalNameFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$UserPrincipalNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$UserPrincipalNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$UserPrincipalNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$UserPrincipalNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$UserPrincipalNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$UserPrincipalNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$UserPrincipalNameFormatString += $_
				}
				
			}
			$textboxUserLogonName.Text = [String]::Join('', $UserPrincipalNameFormatString)
		}
	}
}

function Set-DarkMode
{
	$labelCountryCode.ForeColor = 'White'
	$contextmenustrip1.BackColor = "44,44,44"
	$contextmenustrip1.ForeColor = 'White'
	$MainForm.BackColor = "44,44,44"
	$MainForm.ForeColor = 'White'
	
	$labelLogFile.BackColor = "44,44,44"
	$labelLogFile.ForeColor = 'White'
	
	$labelconnectionstatus.ForeColor = 'LightCoral'
	
	
	$richtextboxregistry.ForeColor = 'White'
	$richtextboxregistry.BackColor = "44,44,44"
	
	$groupboxStatus.ForeColor = 'White'
	
	
	$tabpageSettings.BackColor = "44,44,44"
	$tabpageSettings.ForeColor = 'White'
	$groupboxADGroups.ForeColor = 'White'
	
	$menustrip1.BackColor = "44,44,44"
	$menustrip1.ForeColor = 'White'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "44,44,44"
					$_.ForeColor = 'White'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'White'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "44,44,44"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'White'
	$copyOffice365UserToolStripMenuItem.BackColor = "44,44,44"
	
	
	$groupboxInformation.ForeColor = 'White'
	$linklabelBradWyatt.LinkColor = 'DeepSkyBlue'
	$linklabelGitHub.LinkColor = 'DeepSkyBlue'
	$labelChangelog.ForeColor = 'DeepSkyBlue'
	
	$console.BackColor = "35,35,35"
	$console.ForeColor = 'White'
	
	$buttonExit.ForeColor = "white"
	$buttonExit.BackColor = "35,35,35"
	
	$buttonCreateUser.ForeColor = "white"
	$buttonCreateUser.BackColor = "35,35,35"
	
	$groupboxADUser.ForeColor = 'White'
	$groupboxADUser.BackColor = "44,44,44"
	
	$groupbox2FA.ForeColor = 'White'
	$groupboxOffice365User.ForeColor = 'White'
	
	$tabcontrolUserProperties.ForeColor = 'White'
	$tabcontrolUserProperties.BackColor = "44,44,44"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
		

	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
	}
	
	#GENERAL PAGE
	$panel1.BackColor = "35,35,35"
	$labelDisplayName.ForeColor = 'LightCoral'
	$labelPassword.ForeColor = 'LightCoral'
	$labelConfirmPassword.ForeColor = 'LightCoral'

	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
				$_.BackColor = "35,35,35"
				$_.ForeColor = 'White'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'White'
	$buttonGeneratePassword.BackColor = '44,44,44'
	$buttonClear.ForeColor = 'White'
	$buttonClear.BackColor = '44,44,44'
	
	$textboxPasswordGen.ForeColor = 'White'
	$textboxPasswordGen.BackColor = '35,35,35'
	$maskedtextboxpassword.ForeColor = 'White'
	$maskedtextboxpassword.BackColor = '44,44,44'
	$textboxConfirmPassword.BackColor = '44,44,44'
	$textboxConfirmPassword.ForeColor = 'White'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Flat'
	$comboboxDomains.ForeColor = 'White'
	$comboboxDomains.BackColor = "35,35,35"
	
	$comboboxOUTree.FlatStyle = 'Flat'
	$comboboxOUTree.ForeColor = 'White'
	$comboboxOUTree.BackColor = "35,35,35"
	
	$panel2.ForeColor = 'White'
	$Panel2.BackColor = "35,35,35"
	
	$datetimepickerDATE.ForeColor = 'White'
	$datetimepickerDATE.CalendarMonthBackground = "35,35,35"
	
	$datetimepickerTIME.ForeColor = 'White'
	$datetimepickerTIME.BackColor = "35,35,35"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "44,44,44"
	
	$groupboxaccountexpires.ForeColor = 'White'
	$labelUserLogonNameUPN.ForeColor = 'LightCoral'
	$labelUserLogonNamepreWind.ForeColor = 'White'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'White'
	$checkedlistboxGroups.BackColor = "35,35,35"
	$textboxPOSIX.ForeColor = 'White'
	$textboxPOSIX.BackColor = "44,44,44"
	
	$textboxSearchGroups.ForeColor = 'White'
	$textboxSearchGroups.BackColor = "35,35,35"
	
	$comboboxPrimaryGroup.FlatStyle = 'Flat'
	$comboboxPrimaryGroup.ForeColor = 'White'
	$comboboxPrimaryGroup.BackColor = "35,35,35"
	
	$groupboxPrimaryGroup.ForeColor = 'White'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'White'
	$groupboxHomeFolder.ForeColor = 'White'
	$comboboxDriveLetter.FlatStyle = 'Flat'
	$comboboxDriveLetter.ForeColor = 'White'
	$comboboxDriveLetter.BackColor = "35,35,35"
	$textboxhomedirectory.ForeColor = 'White'
	$textboxhomedirectory.BackColor = "35,35,35"
	$textboxprofilepath.ForeColor = 'White'
	$textboxprofilepath.BackColor = "35,35,35"
	$textboxlogonscript.ForeColor = 'White'
	$textboxlogonscript.BackColor = "35,35,35"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "44,44,44"
	$tabcontrolO365.ForeColor = 'White'
	$textboxADSyncServer.ForeColor = 'White'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365userpassword.ForeColor = 'LightCoral'
	$labelO365userconfirmpassword.ForeColor = 'LightCoral'
	$labelO365DisplayName.ForeColor = 'LightCoral'
	$tabpageO365General.BackColor = "44,44,44"
	$groupboxADSync.ForeColor = 'White'
	$textboxADSyncServer.BackColor = "35,35,35"
	$groupboxNoAdSync.ForeColor = 'White'
	$comboboxO365Licenses.FlatStyle = 'Flat'
	$comboboxO365Licenses.BackColor = "35,35,35"
	$comboboxO365Licenses.ForeColor = 'White'
	$panel3.ForeColor = 'White'
	$panel3.BackColor = "35,35,35"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$textboxo365passwordgen.BackColor = "44,44,44"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Lightcoral'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'White'
	$tabpageO365Account.BackColor = "44,44,44"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'LightCoral'
	$panel4.ForeColor = 'White'
	$panel4.BackColor = "35,35,35"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{

			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.BackColor = "44,44,44"
	$tabpageO365Address.ForeColor = 'White'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'White'
	$tabpageO365Groups.BackColor = "44,44,44"
	$labelO365Groups.ForeColor = 'White'
	$labelO365Groups.BackColor = "44,44,44"
	$checkedlistboxDISTROo365groups.ForeColor = 'White'
	$checkedlistboxDISTROo365groups.BackColor = "35,35,35"
	$labelSearch.ForeColor = 'White'
	$textboxO365MailGroups.ForeColor = 'White'
	$textboxO365MailGroups.BackColor = "35,35,35"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'White'
	$labelSecurityGroups.BackColor = "44,44,44"
	$checkedlistboxO365SecurityGroups.ForeColor = 'White'
	$checkedlistboxO365SecurityGroups.BackColor = "35,35,35"
	$labelSearchGroups2.ForeColor = 'White'
	$labelSearchGroups2.BackColor = "44,44,44"
	$textboxSearchO365SecurityGroups.ForeColor = 'White'
	$textboxSearchO365SecurityGroups.BackColor = "35,35,35"
	$tabpagesecurityGroups.BackColor = "44,44,44"
	$tabpagesecurityGroups.ForeColor = 'White'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'White'
	$labelsharedmailboxes.BackColor = "44,44,44"
	$tabpageo365shared.ForeColor = 'White'
	$tabpageo365shared.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.ForeColor = 'White'
	$groupboxSettingsSharedMailbox.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'White'
	$checkedlistboxsharedmailboxes.BackColor = "35,35,35"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "White"
	$tabpageO365Attributes.BackColor = "44,44,44"
	$comboboxO365HidefromGAL.FlatStyle = 'Flat'
	$comboboxO365HidefromGAL.ForeColor = 'White'
	$comboboxO365HidefromGAL.BackColor = "35,35,35"
	
	
	
}

function Set-LightMode
{
	$labelCountryCode.ForeColor = 'Black'
	$contextmenustrip1.BackColor = "WhiteSmoke"
	$contextmenustrip1.ForeColor = 'Black'
	$MainForm.BackColor = "WhiteSmoke"
	$MainForm.ForeColor = 'Black'
	
	$labelLogFile.BackColor = "White"
	$labelLogFile.ForeColor = 'Black'
	
	$labelconnectionstatus.ForeColor = 'FireBrick'
	
	$richtextboxregistry.ForeColor = 'Black'
	$richtextboxregistry.BackColor = "White"
	
	$groupboxStatus.ForeColor = 'Black'
	
	
	$tabpageSettings.BackColor = "White"
	$tabpageSettings.ForeColor = 'Black'
	$groupboxADGroups.ForeColor = 'Black'
	
	$menustrip1.BackColor = "White"
	$menustrip1.ForeColor = 'Black'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "White"
					$_.ForeColor = 'Black'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'Black'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "White"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'Black'
	$copyOffice365UserToolStripMenuItem.BackColor = "White"
	
	
	$groupboxInformation.ForeColor = 'Black'
	$linklabelBradWyatt.LinkColor = '0, 0, 255'
	$linklabelGitHub.LinkColor = '0, 0, 255'
	$labelChangelog.ForeColor = '0, 0, 255'
	
	$console.BackColor = "White"
	$console.ForeColor = 'Black'
	
	$buttonExit.ForeColor = "Black"
	$buttonExit.BackColor = "White"
	
	$buttonCreateUser.ForeColor = "Black"
	$buttonCreateUser.BackColor = "White"
	
	$groupboxADUser.ForeColor = 'Black'
	$groupboxADUser.BackColor = "White"
	
	$groupbox2FA.ForeColor = 'Black'
	$groupboxOffice365User.ForeColor = 'Black'
	
	$tabcontrolUserProperties.ForeColor = 'Black'
	$tabcontrolUserProperties.BackColor = "White"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
		
		
	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
	}
	
	#GENERAL PAGE
	$panel1.BackColor = "MenuBar"
	$labelDisplayName.ForeColor = 'FireBrick'
	$labelPassword.ForeColor = 'FireBrick'
	$labelConfirmPassword.ForeColor = 'FireBrick'
	
	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'Black'
	$buttonGeneratePassword.BackColor = 'White'
	$buttonClear.ForeColor = 'Black'
	$buttonClear.BackColor = 'White'
	
	$textboxPasswordGen.ForeColor = 'Black'
	$textboxPasswordGen.BackColor = 'White'
	$maskedtextboxpassword.ForeColor = 'Black'
	$maskedtextboxpassword.BackColor = 'White'
	$textboxConfirmPassword.BackColor = 'White'
	$textboxConfirmPassword.ForeColor = 'Black'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Standard'
	$comboboxDomains.ForeColor = 'Black'
	$comboboxDomains.BackColor = "Window"
	
	$comboboxOUTree.FlatStyle = 'Standard'
	$comboboxOUTree.ForeColor = 'Black'
	$comboboxOUTree.BackColor = "Window"
	
	$panel2.ForeColor = 'Black'
	$Panel2.BackColor = "MenuBar"
	
	$datetimepickerDATE.ForeColor = 'Black'
	$datetimepickerDATE.CalendarMonthBackground = "White"
	
	$datetimepickerTIME.ForeColor = 'Black'
	$datetimepickerTIME.BackColor = "White"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "White"
	
	$groupboxaccountexpires.ForeColor = 'Black'
	$labelUserLogonNameUPN.ForeColor = 'FireBrick'
	$labelUserLogonNamepreWind.ForeColor = 'Black'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'Black'
	$checkedlistboxGroups.BackColor = "White"
	$textboxPOSIX.ForeColor = 'Black'
	$textboxPOSIX.BackColor = "White"
	
	$textboxSearchGroups.ForeColor = 'Black'
	$textboxSearchGroups.BackColor = "White"
	
	$comboboxPrimaryGroup.FlatStyle = 'Standard'
	$comboboxPrimaryGroup.ForeColor = 'Black'
	$comboboxPrimaryGroup.BackColor = "Window"
	
	$groupboxPrimaryGroup.ForeColor = 'Black'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'Black'
	$groupboxHomeFolder.ForeColor = 'Black'
	$comboboxDriveLetter.FlatStyle = 'Standard'
	$comboboxDriveLetter.ForeColor = 'Black'
	$comboboxDriveLetter.BackColor = "Window"
	$textboxhomedirectory.ForeColor = 'Black'
	$textboxhomedirectory.BackColor = "White"
	$textboxprofilepath.ForeColor = 'Black'
	$textboxprofilepath.BackColor = "White"
	$textboxlogonscript.ForeColor = 'Black'
	$textboxlogonscript.BackColor = "White"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "White"
	$tabcontrolO365.ForeColor = 'Black'
	$textboxADSyncServer.ForeColor = 'Black'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365userpassword.ForeColor = 'FireBrick'
	$labelO365userconfirmpassword.ForeColor = 'FireBrick'
	$labelO365DisplayName.ForeColor = 'FireBrick'
	$tabpageO365General.BackColor = "White"
	$groupboxADSync.ForeColor = 'Black'
	$textboxADSyncServer.BackColor = "White"
	$groupboxNoAdSync.ForeColor = 'Black'
	$comboboxO365Licenses.FlatStyle = 'Standard'
	$comboboxO365Licenses.BackColor = "Window"
	$comboboxO365Licenses.ForeColor = 'Black'
	$panel3.ForeColor = 'Black'
	$panel3.BackColor = "MenuBar"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$textboxo365passwordgen.BackColor = "White"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'Black'
	$tabpageO365Account.BackColor = "White"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'FireBrick'
	$panel4.ForeColor = 'Black'
	$panel4.BackColor = "MenuBar"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.BackColor = "White"
	$tabpageO365Address.ForeColor = 'Black'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'Black'
	$tabpageO365Groups.BackColor = "White"
	$labelO365Groups.ForeColor = 'Black'
	$labelO365Groups.BackColor = "White"
	$checkedlistboxDISTROo365groups.ForeColor = 'Black'
	$checkedlistboxDISTROo365groups.BackColor = "White"
	$labelSearch.ForeColor = 'Black'
	$textboxO365MailGroups.ForeColor = 'Black'
	$textboxO365MailGroups.BackColor = "White"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'Black'
	$labelSecurityGroups.BackColor = "White"
	$checkedlistboxO365SecurityGroups.ForeColor = 'Black'
	$checkedlistboxO365SecurityGroups.BackColor = "White"
	$labelSearchGroups2.ForeColor = 'Black'
	$labelSearchGroups2.BackColor = "White"
	$textboxSearchO365SecurityGroups.ForeColor = 'Black'
	$textboxSearchO365SecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.ForeColor = 'Black'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'Black'
	$labelsharedmailboxes.BackColor = "White"
	$tabpageo365shared.ForeColor = 'Black'
	$tabpageo365shared.BackColor = "White"
	$groupboxSettingsSharedMailbox.ForeColor = 'Black'
	$groupboxSettingsSharedMailbox.BackColor = "White"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'Black'
	$checkedlistboxsharedmailboxes.BackColor = "White"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "Black"
	$tabpageO365Attributes.BackColor = "White"
	$comboboxO365HidefromGAL.FlatStyle = 'Standard'
	$comboboxO365HidefromGAL.ForeColor = 'Black'
	$comboboxO365HidefromGAL.BackColor = "Window"
	
}

function Copy-ADUserAttributes
{
	
	$textboxDescription.Text = $UserTemplate.Description
	$textboxoffice.Text = $UserTemplate.Office
	$textboxTelephone.Text = $UserTemplate.OfficePhone
	$textboxEmail.Text = $UserTemplate.EmailAddress
	$textboxWebPage.Text = $UserTemplate.HomePage
	
	$comboboxOUTree.SelectedItem = (($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)"))
	
	If ($UserTemplate.PasswordNeverExpires -eq $true)
	{
		$checkboxPasswordNeverExpires.CheckState = 'Checked'
	}
	
	If ($UserTemplate.CannotChangePassword -eq $True)
	{
		$checkboxUserCannotChangePass.CheckState -eq 'Checked'
	}
	
	If ($UserTemplate.PasswordExpired -eq $True)
	{
		$checkboxUserMustChangePasswo.CheckState -eq 'Checked'
	}
	$textboxStreet.Text = $UserTemplate.StreetAddress
	$textboxPOBox.Text = $UserTemplate.POBox
	$textboxcity.Text = $UserTemplate.City
	$textboxstate.Text = $UserTemplate.State
	$textboxzipcode.Text = $UserTemplate.PostalCode
	$checkedlistboxGroups.CheckedItems = $null
	($UserTemplate).MemberOf | ForEach-Object {
		$GName = (Get-ADGroup $_).name
		
		
		$checkedlistboxGroups.SelectedItem = $GName
		$index = $checkedlistboxGroups.SelectedIndex
		$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
	}
	$textboxjobtitle.text = $UserTemplate.Title
	$textboxDepartment.Text = $UserTemplate.Department
	$textboxCompany.Text = $UserTemplate.Company
	$textboxprofilepath.Text = $UserTemplate.ProfilePath
	$textboxlogonscript.Text = $UserTemplate.ScriptPath
	$comboboxDriveLetter.SelectedItem = $UserTemplate.HomeDrive
	$textboxhomedirectory.Text = $UserTemplate.HomeDirectory
	$textboxemployeeType.Text = $UserTemplate.EmployeeType
	
	
}

function License-MUCO365User
{
	$licenseforuser = @()
	#$Lookup = @()
	Add-Logs -text "LOG: Getting License selected for user"
	$Licenses = $Licenses2Add
	Add-Logs "LOG: We will be adding the licenses, $Licenses2Add"
	Add-Logs -text "LOG: Getting AccountSKU Domain"
	$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
	foreach ($License in $licenses)
	{
		Add-Logs -text "LOG: Looking up SKU for license"
		$Lookup = $Sku.keys | Where-Object { $Sku["$_"] -eq "$license" }
		Add-Logs "LOG: License lookup is $Lookup"
		If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
		{
			Add-Logs -text "LOG: No SKU found during lookup"
			$BackSKU = "$LicenseDomain$License"
			Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
			$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
			If ($CheckSku -ne $Null)
			{
				Add-Logs -text "LOG: Assigning $BackSKU to User"
				$licenseforuser += $CheckSku
			}
			Else
			{
				Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
				$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
				Add-Logs -text "WARN: Assigning $ReLic to user instead"
				$licenseforuser += (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
			}
		}
		
		Else
		{
			Add-Logs -text "LOG: Found the SKU for the license"
			$Lookup | ForEach-Object {
				Add-Logs -text "LOG: Checking License $_"
				$BackSKU = "$LicenseDomain$_"
				Add-Logs -text "LOG: Looking up $BackSKU in tenant"
				Add-Logs -text "LOG: Verifying $BackSKU in tenant"
				$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
				If ($CheckSku -ne $Null)
				{
					Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
					$licenseforuser += $CheckSku
				}
				Else
				{
					Add-Logs -text "WARN: $BackSKU was not found in tenant"
				}
			}
		}
		Add-Logs "LOG: OUTPUTTING $licenseforuser"
		$licenseforuser | Out-File "$env:TEMP\MUClicenseforuser.txt" -Force
		
	}
}

function New-MUCUser
{
		
	add-logs -text 'LOG: Converting password to SecureString'
	add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
	$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
	#Get disable account boolean
	add-logs -text 'LOG: Checking if account is disabled or enabled'
	$disabledaccount = ($checkboxAccountIsDisabled.checked)
	#If account should be disabled
	If ($disabledaccount -eq $true)
	{
		add-logs -text 'LOG: Account is disabled'
		add-logs -text 'LOG: Creating user'
		Try
		{
			New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
		}
		Catch
		{
			add-logs -text "WARN: $_"
			$InfoMessage = $_
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		$User = Get-ADUser -Filter * -Properties * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
		add-logs -text "LOG: User has been created"
		
		#Check if Account is set to expire at a specific time
		Add-Logs -text "LOG: Checking if User account expiration is set"
		If ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text "LOG: User account expiration is set"
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			Add-Logs -text "LOG: Done"
		}
		Else
		{
			Add-Logs -text "LOG: User account expiration not set"
		}
		
		$Proxys = @()
		add-logs -text "LOG: Getting user proxy addresses to set"
		$Proxys += $textboxproxyaddress.Lines
		If ($Proxys -ne $Null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text "LOG: Adding proxy addresses"
				add-logs -text "LOG: Getting user proxy addresses to set"
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
			}
		}
		Else
		{
			add-logs -text "LOG: No proxys were found to add"
		}
		add-logs -text "LOG: Done with Proxys"
		
		
		
		add-logs -text "LOG: Getting user employeeType attribute to set"
		If ($textboxemployeeType.text -ne "")
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
		}
		Else
		{
			add-logs -text "LOG: No employeeType to add"
		}
		add-logs -text "LOG: Done with employeeType"
		
		add-logs -text "LOG: Getting user employeeNumber attribute to set"
		If ($textboxemployeenumber.text -ne "")
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			Set-ADUser $User -EmployeeNumber $textboxemployeenumber.text 
		}
		Else
		{
			add-logs -text "LOG: No employeeNumber to add"
		}
		add-logs -text "LOG: Done with employeeNumber"
		
		add-logs -text "LOG: Getting user employeeID attribute to set"
		If ($textboxEmployeeID.Text -ne "")
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			Set-ADUser $User -EmployeeID $textboxEmployeeID.text
		}
		Else
		{
			add-logs -text "LOG: No employeeID to add"
		}
		add-logs -text "LOG: Done with employeeID"
		
		#Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		$groups = $checkedlistboxGroups.CheckedItems
		If ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $Group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
				Add-ADGroupMember -Identity $Group -Members $User
			}
		}
		Else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text "LOG: Done"
		
		Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
		If ($comboboxPrimaryGroup.Text -eq "Domain Users")
		{
			Add-Logs -text "LOG: Primary Group set to Domain Users"
		}
		Else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
		}
		Add-Logs -text "LOG: Done"
		
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		If ($comboboxOUTree.SelectedItem -ne $null)
		{
			
			add-logs -text 'LOG: Specific OU specified, moving user'
			$CanocicalName = $comboboxOUTree.SelectedItem
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$User | Move-ADObject -TargetPath $OUTOMove
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
	Else
	{
		add-logs -text 'LOG: Account is enabled'
		add-logs -text 'LOG: Creating user'
		Try
		{
			New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
		}
		Catch
		{
			add-logs -text "WARN: $_"
			$InfoMessage = $_
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		$User = Get-ADUser -Filter * -Properties * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
		add-logs -text "LOG: User has been created"
		
		#Check if Account is set to expire at a specific time
		Add-Logs -text "LOG: Checking if User account expiration is set"
		If ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text "LOG: User account expiration is set"
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			Add-Logs -text "LOG: Done"
		}
		Else
		{
			Add-Logs -text "LOG: User account expiration not set"
		}
		
		$Proxys = @()
		add-logs -text "LOG: Getting user proxy addresses to set"
		$Proxys += $textboxproxyaddress.Lines
		If ($Proxys -ne $Null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text "LOG: Adding proxy addresses"
				add-logs -text "LOG: Getting user proxy addresses to set"
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
			}
		}
		Else
		{
			add-logs -text "LOG: No proxys were found to add"
		}
		add-logs -text "LOG: Done with Proxys"
		
		add-logs -text "LOG: Getting user employeeType attribute to set"
		If ($textboxemployeeType.text -ne "")
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
		}
		Else
		{
			add-logs -text "LOG: No employeeType to add"
		}
		add-logs -text "LOG: Done with employeeType"
		
		add-logs -text "LOG: Getting user employeeNumber attribute to set"
		If ($textboxemployeenumber.text -ne "")
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			Set-ADUser $User -EmployeeNumber $textboxemployeenumber.text
		}
		Else
		{
			add-logs -text "LOG: No employeeNumber to add"
		}
		add-logs -text "LOG: Done with employeeNumber"
		
		add-logs -text "LOG: Getting user employeeID attribute to set"
		If ($textboxEmployeeID.Text -ne "")
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			Set-ADUser $User -EmployeeID $textboxEmployeeID.text
		}
		Else
		{
			add-logs -text "LOG: No employeeID to add"
		}
		add-logs -text "LOG: Done with employeeID"
		
		#Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		$groups = $checkedlistboxGroups.CheckedItems
		If ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $Group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
				Add-ADGroupMember -Identity $Group -Members $User
			}
		}
		Else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text "LOG: Done"
		
		Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
		If ($comboboxPrimaryGroup.Text -eq "Domain Users")
		{
			Add-Logs -text "LOG: Primary Group set to Domain Users"
		}
		Else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
		}
		Add-Logs -text "LOG: Done"
		
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		If ($comboboxOUTree.SelectedItem -ne $null)
		{
			
			add-logs -text 'LOG: Specific OU specified, moving user'
			$CanocicalName = $comboboxOUTree.SelectedItem
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$User | Move-ADObject -TargetPath $OUTOMove
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
}

function New-MUCO365User
{
	add-logs -text 'LOG: Checking DirSync option'
	#If DirSync is enabled
	If ($checkboxRunADSync.CheckState -eq 'Checked')
	{
		If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$SyncServer = $textboxADSyncServer.text
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text "LOG: Running DirSync on $SyncServer"
			add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
			Try
			{
				Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text "WARN: ADSync Server text box is empty"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
		}
	}
	#If DirSync is not enabled
	Else
	{
		add-logs -text "LOG: User is not being AD-Synced"
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($Licenses2Add) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			
			#Check to see if the user is being enabled upon creation or disabled
			
			#User is going to be disabled
			add-logs -text 'LOG: Checking enabled status of user'
			If ($checkboxBlockCred.Checked -eq $true)
			{
				#If user is going to be disabled
				add-logs -text 'LOG: User is Disabled'
				add-logs -text 'LOG: Creating user'
				If (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
				{
					add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
					$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				Else
				{
					If ($Licenses2Add -ne $null)
					{
						License-MUCO365User
					}
					Try
					{
						add-logs -text 'LOG: Creating User'
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						add-logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Adding Licenses'
						$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
						$licenseforuser | ForEach-Object {
							Add-Logs -text "LOG: Adding $_"
							
							Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
						}
						Add-Logs -text 'LOG: Done'
						
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					
					#Find if user should be added to any Security groups
					add-logs -text 'LOG: Getting checked Security groups'
					$groups = $checkedlistboxO365SecurityGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Security Groups found'
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $DN to $Group"
							$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
							$UserGUID = (($User).ObjectID).GUID
							add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
							Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
						}
					}
					Else
					{
						add-logs -text 'LOG: No Security Groups checked'
					}
					Add-Logs -text 'LOG: Done with Security Groups'
					
					#Check user licenses, if licensed create and wait for mailbox
					Add-Logs -text 'LOG: Checking if license was applied to the user'
					If ($Licenses2Add -ne $Null)
					{
						Add-Logs -text 'LOG: License is applied to the new user'
						
						$ts = New-TimeSpan -Minutes 8
						
						$TermLoop = ((get-date) + $ts).ToString("HH:mm")
						Do
						{
							$DateNow = (Get-date).ToString("HH:mm")
							Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: 20 seconds remaining'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: 10 seconds remaining'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: Done'
							
							Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
						}
						Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
						
						add-logs -text 'LOG: Checking E-Mail address field for entered data'
						If ($textboxO365EmailAddress.Text -like "*@*")
						{
							add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
							If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
							{
								add-logs -text 'LOG: Email is different from UPN, proceeding.'
								
								Try
								{
									$PrimEmail = $textboxO365EmailAddress.Text
									add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
									$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
									$DN = $Mailbox.DisplayName
									add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
									Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
									add-logs -text "LOG: Done"
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
							Else
							{
								add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
							}
							
						}
						Else
						{
							add-logs -text "LOG: No E-Mail entered"
						}
						
						#Add any email aliases
						add-logs -text 'LOG: Checking Alias Addresses field for entered data'
						If ($textboxo365proxyaddresses.Text -ne $null)
						{
							add-logs -text 'LOG: Found Alias Addresses to add'
							$Proxys = $textboxo365proxyaddresses.Lines
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							$DN = $Mailbox.DisplayName
							foreach ($Proxy in $Proxys)
							{
								add-logs -text "LOG: Adding $Proxy for $DN"
								Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
								add-logs -text 'LOG: Done'
							}
						}
						Else
						{
							add-logs -text 'LOG: No Alias Addresses found'
						}
						add-logs -text 'LOG: Done with Alias Addresses'
						
						#Find if user should be added to any mail groups
						add-logs -text 'LOG: Getting checked mail groups'
						$groups = $checkedlistboxDISTROo365groups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Mail Groups found'
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
								If ((Get-UnifiedGroup).displayName -contains $group)
								{
									Add-Logs -text "LOG: $group is an Office 365 group"
									Add-Logs -text "LOG: Adding $DN to $Group"
									Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
									Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
									Add-Logs -text "LOG: Done"
								}
								Else
								{
									Add-Logs -text "LOG: $group is not an Office 365 group"
									
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
						}
						Else
						{
							add-logs -text 'LOG: No Mail Groups checked'
						}
						Add-Logs -text 'LOG: Done with Mail Groups'
						
						#Shared Mailboxes
						Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
						$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
						#If there are shared mailboxes to add the user to (full access rights)
						If ($SharedMailboxes -ne $null)
						{
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									$Automap = $comboboxsharedmailboxautomap.Text
									Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
									If ($Automap -eq "False")
									{
										Add-Logs -text "LOG: AutoMapping set to False"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
									}
									Else
									{
										Add-Logs -text "LOG: AutoMapping set to True"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
									}
								}
							}
							ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
									Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
									Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
									Add-Logs -text "LOG: Done"
								}
								
							}
							Else
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
									Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
									Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
									Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
									Add-Logs -text 'LOG: Done'
								}
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No Shared Mailboxes selected'
						}
						Add-Logs -text 'LOG: Done with Shared Mailboxes'
						
						Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
						#Hide from GAL
						If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
						{
							Add-Logs -text 'LOG: Hide from global address list is set to True'
							Add-Logs -text 'LOG: Hiding mailbox from global address list'
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							If ($null -ne $mailbox)
							{
								Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
							}
							Else
							{
								Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
								$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
								$InfoTitle = "Warning"
								Show-MessageBox_psf
							}
						}
						Else
						{
							Add-Logs -text 'LOG: Hide from global address list is set to False'
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No license is being added for the new user'
						Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
						Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
						Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
					}
					
					#If MFA is set to TRUE then enable MFA for the user
					Add-Logs -text 'LOG: Checking MFA status for the user'
					If ($comboboxMFA.Selecteditem -eq "True")
					{
						$UserMFA = ($User).UserPrincipalName
						Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
						Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
						$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
						Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
						$Auth.RelyingParty = "*"
						Add-Logs -text 'CMD: $MFA = @($Auth)'
						$MFA = @($Auth)
						Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
						Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
						Add-Logs -text 'LOG: Done'
					}
					Else
					{
						Add-Logs -text 'LOG: MFA is set to False'
					}
					Add-Logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Checking OWA'
					If ($comboboxOWA.SelectedItem -eq 'False')
					{
						Add-Logs -text 'LOG: OWA Disabled'
						Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
						Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
					}
					Else
					{
						Add-Logs -text 'LOG: OWA Enabled'
						
					}
					Add-Logs -text 'LOG: Done'
					
				}
			}
			Else
			{
				#User is going to be enabled upon creation
				add-logs -text 'LOG: User is Enabled'
				add-logs -text 'LOG: Creating user'
				If (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
				{
					add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
					$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				Else
				{
					If ($Licenses2Add -ne $null)
					{
						License-MUCO365User
					}
					Try
					{
						add-logs -text 'LOG: Creating User'
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						add-logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Adding Licenses'
						$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
						$licenseforuser | ForEach-Object {
							Add-Logs -text "LOG: Adding $_"
							
							Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
						}
						Add-Logs -text 'LOG: Done'
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					#Find if user should be added to any Security groups
					add-logs -text 'LOG: Getting checked Security groups'
					$groups = $checkedlistboxO365SecurityGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Security Groups found'
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $DN to $Group"
							$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
							$UserGUID = (($User).ObjectID).GUID
							add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
							Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
						}
					}
					Else
					{
						add-logs -text 'LOG: No Security Groups checked'
					}
					Add-Logs -text 'LOG: Done with Security Groups'
					
					#Check user licenses, if licensed create and wait for mailbox
					Add-Logs -text 'LOG: Checking if license was applied to the user'
					If ($Licenses2Add -ne $Null)
					{
						Add-Logs -text 'LOG: License is applied to the new user'
						
						$ts = New-TimeSpan -Minutes 8
						
						$TermLoop = ((get-date) + $ts).ToString("HH:mm")
						Do
						{
							$DateNow = (Get-date).ToString("HH:mm")
							Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: 20 seconds remaining'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: 10 seconds remaining'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: Done'
							
							Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
						}
						Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
						
						add-logs -text 'LOG: Checking E-Mail address field for entered data'
						If ($textboxO365EmailAddress.Text -like "*@*")
						{
							add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
							If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
							{
								add-logs -text 'LOG: Email is different from UPN, proceeding.'
								
								Try
								{
									$PrimEmail = $textboxO365EmailAddress.Text
									add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
									$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
									$DN = $Mailbox.DisplayName
									add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
									Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
									add-logs -text "LOG: Done"
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
							Else
							{
								add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
							}
							
						}
						Else
						{
							add-logs -text "LOG: No E-Mail entered"
						}
						
						#Add any email aliases
						add-logs -text 'LOG: Checking Alias Addresses field for entered data'
						If ($textboxo365proxyaddresses.Text -ne $null)
						{
							add-logs -text 'LOG: Found Alias Addresses to add'
							$Proxys = $textboxo365proxyaddresses.Lines
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							$DN = $Mailbox.DisplayName
							foreach ($Proxy in $Proxys)
							{
								add-logs -text "LOG: Adding $Proxy for $DN"
								Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
								add-logs -text 'LOG: Done'
							}
						}
						Else
						{
							add-logs -text 'LOG: No Alias Addresses found'
						}
						add-logs -text 'LOG: Done with Alias Addresses'
						
						#Find if user should be added to any mail groups
						add-logs -text 'LOG: Getting checked mail groups'
						$groups = $checkedlistboxDISTROo365groups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Mail Groups found'
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
								If ((Get-UnifiedGroup).displayName -contains $group)
								{
									Add-Logs -text "LOG: $group is an Office 365 group"
									Add-Logs -text "LOG: Adding $DN to $Group"
									Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
									Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
									Add-Logs -text "LOG: Done"
								}
								Else
								{
									Add-Logs -text "LOG: $group is not an Office 365 group"
									
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
						}
						Else
						{
							add-logs -text 'LOG: No Mail Groups checked'
						}
						Add-Logs -text 'LOG: Done with Mail Groups'
						
						#Shared Mailboxes
						Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
						$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
						#If there are shared mailboxes to add the user to (full access rights)
						If ($SharedMailboxes -ne $null)
						{
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									$Automap = $comboboxsharedmailboxautomap.Text
									Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
									If ($Automap -eq "False")
									{
										Add-Logs -text "LOG: AutoMapping set to False"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
									}
									Else
									{
										Add-Logs -text "LOG: AutoMapping set to True"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
									}
								}
							}
							ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
									Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
									Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
									Add-Logs -text "LOG: Done"
								}
								
							}
							Else
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
									Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
									Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
									Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
									Add-Logs -text 'LOG: Done'
								}
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No Shared Mailboxes selected'
						}
						Add-Logs -text 'LOG: Done with Shared Mailboxes'
						
						Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
						#Hide from GAL
						If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
						{
							Add-Logs -text 'LOG: Hide from global address list is set to True'
							Add-Logs -text 'LOG: Hiding mailbox from global address list'
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							If ($null -ne $mailbox)
							{
								Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
							}
							Else
							{
								Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
								$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
								$InfoTitle = "Warning"
								Show-MessageBox_psf
							}
						}
						Else
						{
							Add-Logs -text 'LOG: Hide from global address list is set to False'
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No license is being added for the new user'
						Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
						Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
						Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
					}
					
					#If MFA is set to TRUE then enable MFA for the user
					Add-Logs -text 'LOG: Checking MFA status for the user'
					If ($comboboxMFA.Selecteditem -eq "True")
					{
						$UserMFA = ($User).UserPrincipalName
						Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
						Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
						$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
						Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
						$Auth.RelyingParty = "*"
						Add-Logs -text 'CMD: $MFA = @($Auth)'
						$MFA = @($Auth)
						Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
						Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
						Add-Logs -text 'LOG: Done'
					}
					Else
					{
						Add-Logs -text 'LOG: MFA is set to False'
					}
					Add-Logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Checking OWA'
					If ($comboboxOWA.SelectedItem -eq 'False')
					{
						Add-Logs -text 'LOG: OWA Disabled'
						Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
						Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
					}
					Else
					{
						Add-Logs -text 'LOG: OWA Enabled'
						
					}
					Add-Logs -text 'LOG: Done'
				}
			}
		}
	}
}

#endregion

$MainForm_Load = {
	
	
	
	$MFALogin = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name MFALogin -ErrorAction SilentlyContinue).MFALogin
	If ($MFALogin -eq 1)
	{
		$radiobuttonMFALogin.Checked = $true
	}
	Else
	{
		$radiobuttonNonMFALogin.Checked = $true
	}
	

	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		#Set-LightMode
		
	}
	
	
}

$MainForm_DuringShow = {
	
	Import-Module ActiveDirectory -ErrorAction SilentlyContinue
	Import-Module ADSync -ErrorAction SilentlyContinue
	
	#DEBUG
	#$tabcontrolUserProperties.Enabled = $true
	#$groupboxNoAdSync.Enabled = $true
	
	$copyActiveDirectoryUserToolStripMenuItem.Enabled = $false
	
	$textboxADSyncServer.Enabled = $false
	
	$datetimepickerDATE.Refresh()
	
	$radiobuttonNever.Checked = $true
	$datetimepickerDATE.Enabled = $false
	$datetimepickerTIME.Enabled = $false
	
	$datetimepickerTIME.Text = "05:00 PM"
	
	$MainForm.MaximizeBox = $false
	
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1
	#DEBUG
	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	#$comboboxO365Licenses.Enabled = $False
	$comboboxO365Licenses.Text = "Please connect to Office 365 to assign a license"
	
	#DEBUG
	$tabcontrolUserProperties.Enabled = $false
	
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	
	$comboboxO365HidefromGAL.SelectedItem = "False"
	
	$labelTimeLeft.Text = ""
	
	$global:ExternalLog = "$env:TEMP\MUC.txt"
	$labelLogFile.Text = $global:ExternalLog
	
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items "Domain Users"
	$comboboxPrimaryGroup.SelectedItem = "Domain Users"
	
	$AlwaysADCreate = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysADCreate -ErrorAction SilentlyContinue).AlwaysADCreate
	If ($AlwaysADCreate -eq 1)
	{
		$checkboxCreateAnActiveDirect.Checked = $true
	}
	
	$AlwaysO365Create = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysO365Create -ErrorAction SilentlyContinue).AlwaysO365Create
	If ($AlwaysO365Create -eq 1)
	{
		$checkboxconfigo365user.Checked = $true
	}
}

$resetFormToolStripMenuItem_Click = {
	Reset-Form
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateAnActiveDirect.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		Try
		{
			New-MUCUser
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		Try
		{
			New-MUCO365User
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
		
		#### ACTIVE DIRECTORY USER CREATION PORTION ####
		
		add-logs -text 'LOG: Only an Active Directory user is being created'
		Try
		{
			New-MUCUser
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
		
		
		#### OFFICE 365 USER CREATION PORTION ####
		
		
		add-logs -text 'LOG: Only an Office 365 User is being created'
		Try
		{
			New-MUCO365User
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
	
	$ResetForm = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ResetForm -ErrorAction SilentlyContinue).ResetForm
	If ($ResetForm -eq 1)
	{
		Reset-Form
	}
}


$textboxDisplayName_TextChanged = {
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'White'
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'Black'
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'Firebrick'
		}
		
	}
	
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxDisplayName_ChangeFocus = {
	$ADDisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDisplayName -ErrorAction SilentlyContinue).ADDisplayName
	If ($ADDisplayName -eq 1)
	{
		$words = $textboxDisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxLastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxLastName_ChangeFocus = {
	$ADLastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADLastName -ErrorAction SilentlyContinue).ADLastName
	If ($ADLastName -eq 1)
	{
		$words = $textboxLastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxLastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxFirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
	
	
		
	
}

$textboxFirstName_ChangeFocus = {
	$ADFirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADFirstName -ErrorAction SilentlyContinue).ADFirstName
	If ($ADFirstName -eq 1)
	{
		$words = $textboxFirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxFirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxInitials_ChangeFocus = {
	$ADInitials = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADInitials -ErrorAction SilentlyContinue).ADInitials
	If ($ADInitials -eq 1)
	{
		$words = $textboxInitials.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxInitials.Text = $TextInfo.ToTitleCase($words)
	}
}


$buttonGeneratePassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword
		$textboxPasswordGen.Text = $Password
		$maskedtextboxpassword.Text = $Password
		$textboxConfirmPassword.text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxpassword.Text = $textboxPasswordGen.Text
		$textboxConfirmPassword.text = $textboxPasswordGen.Text
	}
	
}

$textboxConfirmPassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'White'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Black'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Firebrick'
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}

			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateAnActiveDirect.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = $textboxUserLogonName.text
		$comboboxO365Domains.SelectedItem = $comboboxDomains.SelectedItem
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'White'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Black'
		}
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Firebrick'
		}
		
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonNonMFALogin.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: $((Get-ChildItem -Path $($env:LOCALAPPDATA+"\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse ).FullName|?{$_ -notmatch "_none_"}|select -First 1)'
		$Modules = $((Get-ChildItem -Path $($env:LOCALAPPDATA + "\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse).FullName | Where-Object{ $_ -notmatch "_none_" } | Select-Object -First 1)
		If ($Modules -eq $Null)
		{
			add-logs -text 'WARN: MFA Module was not found'
			$InfoMessage = "Exchange Online MFA Module was not found, please make sure you have downloaded and installed it from your tenant https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/mfa-connect-to-exchange-online-powershell?view=exchange-ps"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		$EXOSession = New-ExoPSSession
		Import-PSSession $EXOSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'MediumSeaGreen'
		}
		Else
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'Green'
		}
		
		
		$Global:O365_Pre_Req++
		#Create just an AD User
		If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD nad O365 User (w/ ADSync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD And O365 User (no Sync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 User no adsync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 user with ADSync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$buttonConnectToOffice365.ForeColor = 'White'
		}
		Else
		{
			$buttonConnectToOffice365.ForeColor = 'Black'
		}
		
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		#add-logs -text 'LOG: Enabling Licenses combobox'
		#add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		#$comboboxO365Licenses.Enabled = $True
		#add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = ""
		
		#Cache licenses to use in other forms
		$LicenseArray | Out-File "$env:TEMP\MUCLicenses.txt" -Force -ErrorAction SilentlyContinue
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		#add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		#Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = "Click to select an Office 365 license"

		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$MailGroups = (Get-MsolGroup | Where-Object { ($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataMailGroups = $MailGroups
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $MailGroups
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$SecurityGroups = (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataSecurityGroups = $SecurityGroups
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $SecurityGroups
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		$comboboxO365HidefromGAL.SelectedItem = "False"
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword -O365
		$textboxo365passwordgen.Text = $Password
		$maskedtextboxo365password.Text = $Password
		$textboxo365confirmpassword.Text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
		$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
		add-logs -text 'LOG: Done'
	}

	
	
}


$checkboxRunADSync_CheckedChanged = {
	If ($checkboxRunADSync.Checked -eq $True)
	{
		$groupboxNoAdSync.Enabled = $false
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
		
		$textboxADSyncServer.Enabled = $true
		
	}
	elseif ($checkboxRunADSync.Checked -eq $false)
	{
		$groupboxNoAdSync.Enabled = $True
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
		
		$textboxADSyncServer.Enabled = $false
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$buttonExit_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged = {
	If ((($textboxO365LastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	ElseIf ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}
$textboxO365LastName_FocusChanged = {
	$O365LastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365LastName -ErrorAction SilentlyContinue).O365LastName
	If ($O365LastName -eq 1)
	{
		$words = $textboxO365LastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365LastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365FirstName_TextChanged = {
	If ((($textboxO365FirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	ElseIf ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365FirstName_FocusChanged = {
	$O365FirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365FirstName -ErrorAction SilentlyContinue).O365FirstName
	If ($O365FirstName -eq 1)
	{
		$words = $textboxO365FirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365FirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365Initials_TextChanged = {
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged = {
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
	If ($Global:ExternalLog -ne $null)
	{
		$console.Text | Out-File $Global:ExternalLog
	}
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		If ($null -ne (Get-Module -ListAvailable -Name "ADSync"))
		{
			add-logs -text 'LOG: DirSync found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			$groupboxNoAdSync.Enabled = $true
			$comboboxOWA.SelectedItem = "True"
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Enabling ADSync CheckBox'
		$checkboxRunADSync.Enabled = $True
		add-logs -text 'LOG: Enabling No ADSync Groupbox'
		$groupboxNoAdSync.Enabled = $true
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateAnActiveDirect_CheckedChanged = {
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateAnActiveDirect.Checked -eq $true))
	{
		If ($Null -ne (Get-Module -ListAvailable -Name "ActiveDirectory"))
		{
			add-logs -text 'LOG: Enabling AD User creation'
			$tabcontrolUserProperties.Enabled = $true
			add-logs -text 'LOG: Done'
			
			Add-Logs -text "Enabling Copy AD User Menu Item"
			$copyActiveDirectoryUserToolStripMenuItem.Enabled = $true
			add-logs -text 'LOG: Done'
			
			
			add-logs -text 'LOG: Loading Organizational Unit Tree'
			add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
			$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName
			If ($null -eq $OUTree)
			{
				$InfoMessage = 'Could not load Organizational Unit structure'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxOUTree.Enabled = $false
			}
			Else
			{
				add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
				Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
				add-logs -text 'LOG: Done'
				$comboboxOUTree.Enabled = $true
			}
			
			add-logs -text 'LOG: Getting Active Directory Groups'
			add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
			$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
			$Global:OriginalData = $Groups
			If ($null -eq $Groups)
			{
				add-logs -text 'WARN: No Active Directory Groups were found'
				$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
				Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting NetBIOS Name'
			add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
			$Netbiosname = (Get-ADDomain).NetBIOSName
			If ($null -eq $Netbiosname)
			{
				add-logs -text 'WARN: No NetBIOS Name was found'
				$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$textboxUPNDomain.Text = "Not Available"
			}
			Else
			{
				$textboxUPNDomain.Text = $Netbiosname + "\"
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting UPN Suffixes'
			add-logs -text 'CMD: $Forest = Get-ADForest'
			$Forest = Get-ADForest
			If ($null -eq $Forest)
			{
				add-logs -text 'WARN: No Active Directory Forest was found'
				$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxDomains.Enabled = $false
			}
			Else
			{
				$comboboxDomains.Enabled = $true
				$UPNs = @()
				add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
				$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
				If ($extraUPNs -ne $Null)
				{
					foreach ($extraUPN in $extraUPNs)
					{
						$UPNs += "@" + $extraUPN
					}
				}
				add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
				$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
				Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
			}
			add-logs -text 'LOG: Done'
			
			$comboboxDomains.SelectedIndex = 0
		}
		Else
		{
			$InfoMessage = "Could not locate the ActiveDirectory module on $env:COMPUTERNAME. This module is required to create an Active Directory user"
			$InfoTitle = "Error"
			Show-MessageBox_psf
			$checkboxCreateAnActiveDirect.CheckState = 'Unchecked'
		}
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	
	Update-SamAccountNameTextbox
	Update-DisplayNameTextbox
	Update-EmailTextbox
	
	$textboxSamAccount.Text = $textboxUserLogonName.Text
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'White'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Black'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Firebrick'
		}
		
	}
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxUserLogonName_FocusChanged = {
	$ADUPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADUPN -ErrorAction SilentlyContinue).ADUPN
	If ($ADUPN -eq 1)
	{
		$words = $textboxUserLogonName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxUserLogonName.Text = $TextInfo.ToTitleCase($words)
	}
}




$maskedtextboxpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'White'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'LightCoral'
			
		}
		
	}
	Else
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'Black'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'Firebrick'
			
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}



$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHub_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'White'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'LightCoral'
		}
	}
	Else
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'Black'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'Firebrick'
		}
	}
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365DisplayName_FocusChanged = {
	$O365DisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365DisplayName -ErrorAction SilentlyContinue).O365DisplayName
	If ($O365DisplayName -eq 1)
	{
		$words = $textboxO365DisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365DisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365UPN_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'White'
		}
		Else
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Black'
		}
		
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'LightCoral'}
		Else
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Firebrick'
		}
		
		
	}
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_FocusChanged = {
	$O365UPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365UPN -ErrorAction SilentlyContinue).O365UPN
	If ($O365UPN -eq 1)
	{
		$words = $textboxO365UPN.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365UPN.Text = $TextInfo.ToTitleCase($words)
	}
}


$maskedtextboxo365password_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'White'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'lightcoral'
		}
	}
	Else
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'Black'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'Firebrick'
		}
	}
	
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}

$comboboxO365Licnses_Click = {
	Show-O365LicenseSelection_psf
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ($null -eq $Licenses2Add)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
#If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
#If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($Licenses2Add.Count -ge 1))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($Licenses2Add.Count -ge 1))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
}



$comboboxO365Licenses_SelectedIndexChanged = {
	
	
	
}


$comboboxO365countrycode_SelectedIndexChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
		}
		
	}
	Else
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'White'
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
		
	}
	
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'LightCoral'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'LightCoral'
	}
	Else
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'Firebrick'
	}
	
	
}



$saveLogAsToolStripMenuItem_Click = {
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged = {
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}




$versionToolStripMenuItem_Click = {
	$InfoMessage = "
Version Number: $Version
Build Date: $Builddate
Author: Brad Wyatt
"
	$InfoTitle = "Build Information"
	Show-MessageBox_psf
	
}


$changelogToolStripMenuItem_Click = {
	Show-ChangeLog_psf
	
}

$labelChangelog_Click = {
	Show-ChangeLog_psf
	
}

$externalLogFileToolStripMenuItem_Click = {
	# Class Details:  https://msdn.microsoft.com/en-us/library/system.windows.forms.savefiledialog(v=vs.110).aspx 
	$SaveFileDialog = New-Object windows.forms.savefiledialog
	$SaveFileDialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$SaveFileDialog.title = "Log File Location"
	#$SaveFileDialog.filter = "All files (*.*)| *.*"   
	#$SaveFileDialog.filter = "PublishSettings Files|*.publishsettings|All Files|*.*" 
	$SaveFileDialog.filter = "Log Text File|*.txt"
	$SaveFileDialog.ShowHelp = $True
	$result = $SaveFileDialog.ShowDialog()
	$result
	$Global:ExternalLog = $SaveFileDialog.filename
	Write-Host $result
	If ($result -eq "Ok")
	{
		
		$labelLogFile.Text = $global:ExternalLog
		
	}
}


$radiobuttonExpireOn_CheckedChanged = {
	#Enable the Date Date / Time picker
	$datetimepickerDATE.Enabled = $true
	#Enable the Time date/time picker
	$datetimepickerTIME.Enabled = $true
	
}

$radiobuttonNever_CheckedChanged = {
	#Disable the Date Date/Time picker
	$datetimepickerDATE.Enabled = $false
	#Disable the Time Date/Time picker
	$datetimepickerTIME.Enabled = $false
	
}

$datetimepickerDATE_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$datetimepickerTIME_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$checkedlistboxGroups_SelectedIndexChanged = {

	If ($click -ne 1)
	{
		$CachedCheckedGroups = Get-Content $CacheGroups -ErrorAction SilentlyContinue
		
		$checkedlistboxGroups.CheckedItems | ForEach-Object{
			#If checked and not in file, add and append
			$CheckItem = Get-Content $CacheGroups | Select-String $_
			If ($null -eq $CheckItem)
			{				
				$_ | Out-File $CacheGroups -Force -Append
			}
		}
		
		$CachedCheckedGroups = Get-Content $CacheGroups -ErrorAction SilentlyContinue
		
		
		#Get all unchecked items
		$UncheckedItems = $checkedlistboxGroups.Items | Where-Object { $checkedlistboxGroups.CheckedItems -notcontains $_ }
		
		#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
		Compare-Object -ReferenceObject $CachedCheckedGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
			# == means that the obj is unchecked but present on the file, we need to remove from file
			If ($_.SideIndicator -eq "==")
			{
				#Remove the item that is present on the list but unchecked from the file
				$Info = $CachedCheckedGroups | select-string -pattern $_.InputObject -notmatch
				$InfoMessage = $Info
				$Info | Out-File $CacheGroups -Force -ErrorAction SilentlyContinue
			}
		}
	}
	
	
	$Items = @()
	$Items += $checkedlistboxGroups.CheckedItems
	$Items += "Domain Users"
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items $Items
	
	
}





$optionsToolStripMenuItem_Click = {
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
}

$textboxDescription_FocusChanged = {
	$ADDescription = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription
	If ($ADDescription -eq 1)
	{
		$words = $textboxDescription.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDescription.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxoffice_FocusChanged = {
	$ADOffice = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADOffice -eq 1)
	{
		$words = $textboxoffice.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxoffice.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxSamAccount_FocusChanged = {
	$ADSamAccountName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADSamAccountName -ErrorAction SilentlyContinue).ADSamAccountName
	If ($ADSamAccountName -eq 1)
	{
		$words = $textboxSamAccount.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxSamAccount.Text = $TextInfo.ToTitleCase($words)
	}
	
}



$textboxStreet_FocusChanged = {
	$ADStreet = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADStreet -ErrorAction SilentlyContinue).ADStreet
	If ($ADStreet -eq 1)
	{
		$words = $textboxstreet.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstreet.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxcity_FocusChanged = {
	$ADCity = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCity -ErrorAction SilentlyContinue).ADCity
	If ($ADCity -eq 1)
	{
		$words = $textboxcity.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxcity.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxstate_FocusChanged = {
	$ADState = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState
	If ($ADState -eq 1)
	{
		$words = $textboxstate.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstate.Text = $TextInfo.ToTitleCase($words)
	}
	
	
}

$textboxjobtitle_FocusChanged = {
	$ADJobTitle = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADJobTitle -ErrorAction SilentlyContinue).ADJobTitle
	If ($ADJobTitle -eq 1)
	{
		$words = $textboxjobtitle.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxjobtitle.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxDepartment_FocusChanged = {
	$ADDepartment = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment
	If ($ADDepartment -eq 1)
	{
		$words = $textboxDepartment.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDepartment.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxCompany_FocusChanged = {
	$ADCompany = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany
	If ($ADCompany -eq 1)
	{
		$words = $textboxCompany.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxCompany.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$debugToolStripMenuItem_Click = {
	#Set value to 1 so we dont have string settings get in the way
	#Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 1 -Force | Out-Null
	
	#$textboxFirstName.Text = "TIM"
	#$textboxLastName.Text = "Loser"
	#$textboxEmail.text= "Tim.loser@loser.com"
	#Set back to 0
	#Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 0 -Force | Out-Null
	Add-Logs $checkedlistboxGroups.CheckedItems
	
	
}

$textboxSearchGroups_TextChanged = {
	
	$click = 1
	$Filter = $textboxSearchGroups.text
	$Results = $OriginalData | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxGroups -Items $Results
	
	Get-Content $CacheGroups -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxGroups.Items -contains $_)
		{
			$checkedlistboxGroups.SelectedItem = $_
			$index = $checkedlistboxGroups.SelectedIndex
			$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchGroups.Focus()
	
}


$textboxSearchO365SecurityGroups_TextChanged = {
	$click = 1
	
	
	$Filter = $textboxSearchO365SecurityGroups.text
	$Results = $OriginalDataSecurityGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $Results
	
	Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxO365SecurityGroups.Items -contains $_)
		{
			$checkedlistboxO365SecurityGroups.SelectedItem = $_
			$index = $checkedlistboxO365SecurityGroups.SelectedIndex
			$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchO365SecurityGroups.Focus()
	
}

$textboxO365MailGroups_TextChanged={
	
	$click = 1
	$Filter = $textboxO365MailGroups.text
	$Results = $OriginalDataMailGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $Results
	
	Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxDISTROo365groups.Items -contains $_)
		{
			$checkedlistboxDISTROo365groups.SelectedItem = $_
			$index = $checkedlistboxDISTROo365groups.SelectedIndex
			$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxO365MailGroups.Focus()
	
	
	
	
}

$textboxO365street_FocusChanged={
	$O365Street = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365Street -ErrorAction SilentlyContinue).O365Street
	If ($O365Street -eq 1)
	{
		$words = $textboxO365street.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365street.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxo365city_FocusChanged={
	$O365City = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City
	If ($O365City -eq 1)
	{
		$words = $textboxo365city.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365city.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxo365state_FocusChanged={
	$O365State = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State
	If ($O365State -eq 1)
	{
		$words = $textboxo365state.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365state.Text = $TextInfo.ToTitleCase($words)
	}
	
}


$textboxemployeenumber_TextChanged={
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
}

$textboxEmployeeID_TextChanged={
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
}

$textboxEmail_TextChanged={
	
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
}

$copyActiveDirectoryUserToolStripMenuItem_Click={
	
	#Set value to 1 so we dont have string settings get in the way
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 1 -Force | Out-Null
	Show-CopyFromUser_psf
	$CopyUser = $CopyFromUser_comboboxcopyuser
	$Job = $PSJob
	$UserJob = ($Job | Where-Object { $_.Name -like $CopyUser })[0]
	$UserTemplate = Get-ADUser -identity ($UserJob).ObjectGuid -properties *
	Copy-ADUserAttributes
	#Set back to 0
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 0 -Force | Out-Null
	Get-Job | Remove-Job
	
}

$textboxSamAccount_TextChanged={
	Update-EmailTextbox
	Update-DisplayNameTextbox
	Update-UserPrincipalNameTextbox
}
$textboxSamAccount_FocusChanged = {
	#Update-EmailTextbox
	Update-DisplayNameTextbox
	#Update-UserPrincipalNameTextbox
}


$clearFormToolStripMenuItem_Click={
	Reset-Form
	
}


$exitToolStripMenuItem1_Click={
	$MainForm.close()
	
}

$copyToolStripMenuItem_Click={
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
	
}

$checkedlistboxDISTROo365groups_SelectedIndexChanged={
	If ($click -ne 1)
	{
		$CachedCheckedDistroGroups = Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue
		
		$checkedlistboxDISTROo365groups.CheckedItems | ForEach-Object{
			#If checked and not in file, add and append
			$CheckItem = Get-Content $CacheDistroGroupsFile | Select-String $_
			If ($null -eq $CheckItem)
			{
				$_ | Out-File $CacheDistroGroupsFile -Force -Append
			}
		}
		
		$CachedCheckedDistroGroups = Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue
		
		
		#Get all unchecked items
		$UncheckedItems = $checkedlistboxDISTROo365groups.Items | Where-Object { $checkedlistboxDISTROo365groups.CheckedItems -notcontains $_ }
		
		#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
		Compare-Object -ReferenceObject $CachedCheckedDistroGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
			# == means that the obj is unchecked but present on the file, we need to remove from file
			If ($_.SideIndicator -eq "==")
			{
				#Remove the item that is present on the list but unchecked from the file
				$Info = $CachedCheckedDistroGroups | select-string -pattern $_.InputObject -notmatch
				$InfoMessage = $Info
				$Info | Out-File $CacheDistroGroupsFile -Force -ErrorAction SilentlyContinue
			}
		}
	}
}

$checkedlistboxO365SecurityGroups_SelectedIndexChanged={
	If ($click -ne 1)
	{
		$CachedCheckedSecurityGroups = Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue
		
		$checkedlistboxO365SecurityGroups.CheckedItems | ForEach-Object{
			#If checked and not in file, add and append
			$CheckItem = Get-Content $CacheSecurityGroupsFile | Select-String $_
			If ($null -eq $CheckItem)
			{
				$_ | Out-File $CacheSecurityGroupsFile -Force -Append
			}
		}
		
		$CachedCheckedSecurityGroups = Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue
		
		
		#Get all unchecked items
		$UncheckedItems = $checkedlistboxO365SecurityGroups.Items | Where-Object { $checkedlistboxO365SecurityGroups.CheckedItems -notcontains $_ }
		
		#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
		Compare-Object -ReferenceObject $CachedCheckedSecurityGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
			# == means that the obj is unchecked but present on the file, we need to remove from file
			If ($_.SideIndicator -eq "==")
			{
				#Remove the item that is present on the list but unchecked from the file
				$Info = $CachedCheckedSecurityGroups | select-string -pattern $_.InputObject -notmatch
				$InfoMessage = $Info
				$Info | Out-File $CacheSecurityGroupsFile -Force -ErrorAction SilentlyContinue
			}
		}
	}
	
	
}

$checkboxUserMustChangePasswo_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
	
}

$checkboxUserCannotChangePass_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both 'User Must Change Password at Next Logon' and User 'Cannot Change Password' for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
		
	}
	
	
}

$checkboxPasswordNeverExpires_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
	
}

]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>