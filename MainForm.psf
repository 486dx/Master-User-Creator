<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
RU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Toogle-LicenseStatus
{
	If ($null -eq $Licenses2Add)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
#If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
#If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($Licenses2Add.Count -ge 1))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($Licenses2Add.Count -ge 1))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Get-DictionaryPassword
{
	param
	(
		
		[switch]$O365
	)
	$Dictionary = @(
		"Honda";
		"Staple";
		"Battery";
		"Civic";
		"Chicago";
		"Winter";
		"Cubs";
		"Bears";
		"Snow";
		"Train";
		"Shoes";
		"Blue";
		"Bike";
		"Ring";
		"Watch";
		"Computer";
		"Neck";
		"Laptop";
		"Monitor";
		"Toilet";
		"Baseball";
		"Football";
		"Soccer";
		"Phone";
		"Carbondale";
		"Saluki";
		"Swim";
		"Lake";
		"Puppy";
		"Watch";
		"Royals";
		"Basketball";
		"Letter";
		"Paper";
		"Sticker";
		"Kitten";
		"Marker";
		"Highway";
		"Wire";
		"Keyboard";
		"Frisbee";
		"Disc";
		"Hawk";
		"West";
		"North";
		"East";
		"South";
		"Water";
		"Ice";
		"Dirt";
		"Taco";
		"Mouse";
		"Deer";
		"Speaker";
		"Hand";
		"Green";
		"Purple";
		"Pink";
		"Boat";
		"Toilet";
		"Sting";
		"Fish";
		"Bee";
		"White";
		"Grey";
		"Shoes";
		"Carpet";
		"Bed";
		"Pillow";
		"Sears";
		"Mustard";
		"Relish";
		"Ketchup";
		"Milk";
		"Apple";
		"Orange";
		"Flower";
		"Lotion";
		"Plane";
		"Desert";
		"Sand";
		"Beach";
		"Clouds";
		"Wagon";
		"Hair";
		"Internet";
		"Track";
		"Golf";
		"Sledding";
		"Market";
		"Window";
		"Door";
		"Deck";
		"Cards";
		"Shelf";
		"Santa";
		"Tack";
		"Building";
		"Tennis";
		"Power";
		"Sox";
		"Wrigley";
		"Tea";
		"Juice";
		"Plant";
		"Geneva";
		"City";
		"Kansas";
		"Missouri";
		"Midwest";
		"Great";
		"Box";
		"Crane";
		"Michigan";
		"Illinois";
		"Garbage";
		"Cougars";
		"Route";
		"Bridge";
		"Mountain";
		"Message";
		"Fire";
		"Taxi";
		"Bus";
		"Color";
		"Sharpie";
		"Ball";
		"Square";
		"River";
		"Navy";
		"Pier";
		"Grant";
		"Park";
		"Lincoln";
		"President";
		"Wrigley";
		"Soldier";
		"Forest";
		"Bulldog";
		"Police";
		"Taco";
		"Deep";
		"Dish";
		"Pizza";
		"Fire";
		"Ice";
		"Lion";
		"World";
		"Shoe";
		"Ant";
		"Bug";
		"Hair";
		"Beard";
		"Light";
		"Wave";
		"Field";
		"Toll";
		"Tax";
		"Money";
		"Bill";
		"Pot";
		"Pan"
	)
	If ($O365 -eq $True)
	{
		$word1 = (Get-Random $Dictionary)
		$Num = Get-random -Maximum 99 -Minimum 0
		$WChar = @(
			"!"
			"@"
			"$"
			"%"
			"&"
			"?"
			"#"
		)
		$Wildchar = Get-random $WChar
		
		$Word1 + "-" + $Num + $WildChar
	}
	Else
	{
		$word1 = (Get-Random $Dictionary)
		
		$word2 = (Get-Random $Dictionary | Where-Object { $_ -ne $word1 })
		
		$Word3 = (Get-Random $Dictionary | Where-Object { ($_ -ne $word1) -and ($_ -ne $word2) })
		
		$Num = Get-random -Maximum 99 -Minimum 0
		
		$Word1 + "-" + $word2 + "-" + $word3 + $Num
	}
	
	
}

function Reset-Form
{
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	$comboboxOUTree.SelectedText = ""
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	$textboxEmployeeID.Text = ""
	$textboxemployeenumber.Text = ""
	$textboxemployeeType.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunADSync.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	$comboboxMFA.SelectedItem = "False"
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""
	$textboxo365city.Text = ""
	$textboxo365state.Text = ""
	$textboxo365zip.Text = ""
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

function Update-DisplayNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatDisplayName -ErrorAction SilentlyContinue).UserFormatDisplayName
		#Create an array that we will use for formatting
		$DisplayNameFormatString = @()
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%Firstname% %LastName%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatDisplayName -Value "%FirstName% %LastName%" -Force | Out-Null
		}
		
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text
			}
			ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
			{
				$DisplayNameFormatString += $textboxInitials.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$DisplayNameFormatString += $space
			}
			ElseIf ($_ -eq "EmployeeID")
			{
				$DisplayNameFormatString += $textboxEmployeeID.text
			}
			ElseIf ($_ -eq "EmployeeNumber")
			{
				$DisplayNameFormatString += $textboxemployeenumber.text
			}
			ELseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.text
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$DisplayNameFormatString += $textboxUserLogonName.text
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$DisplayNameFormatString += $textboxEmail.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.Text
			}
			Else
			{
				$DisplayNameFormatString += $_
			}
			
			$textboxDisplayName.Text = [String]::Join('', $DisplayNameFormatString)
			
		}
		
		
	}
}

function Update-EmailTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatEmail -ErrorAction SilentlyContinue).UserFormatEmail
		#Create an array that we will use for formatting
		$EmailFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$EmailFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$EmailFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$EmailFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$EmailFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$EmailFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$EmailFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$EmailFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$EmailFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$EmailFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$EmailFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$EmailFormatString += $_
				}
				
			}
			$textboxEmail.Text = [String]::Join('', $EmailFormatString)
		}
	}
}

function Update-SamAccountNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatSamAccountName -ErrorAction SilentlyContinue).UserFormatSamAccountName
		#Create an array that we will use for formatting
		$SamAccountNameFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$SamAccountNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$SamAccountNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$SamAccountNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$SamAccountNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$SamAccountNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$SamAccountNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$SamAccountNameFormatString += $_
				}
				
			}
			$textboxSamAccount.Text = [String]::Join('', $SamAccountNameFormatString)
		}
	}
}

function Update-UserPrincipalNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatUserPrincipalName -ErrorAction SilentlyContinue).UserFormatUserPrincipalName
		#Create an array that we will use for formatting
		$UserPrincipalNameFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$UserPrincipalNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$UserPrincipalNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$UserPrincipalNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$UserPrincipalNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$UserPrincipalNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$UserPrincipalNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$UserPrincipalNameFormatString += $_
				}
				
			}
			$textboxUserLogonName.Text = [String]::Join('', $UserPrincipalNameFormatString)
		}
	}
}

function Set-DarkMode
{
	$labelCountryCode.ForeColor = 'White'
	$contextmenustrip1.BackColor = "44,44,44"
	$contextmenustrip1.ForeColor = 'White'
	$MainForm.BackColor = "44,44,44"
	$MainForm.ForeColor = 'White'
	
	$labelLogFile.BackColor = "44,44,44"
	$labelLogFile.ForeColor = 'White'
	
	$labelconnectionstatus.ForeColor = 'LightCoral'
	
	
	$richtextboxregistry.ForeColor = 'White'
	$richtextboxregistry.BackColor = "44,44,44"
	
	$groupboxStatus.ForeColor = 'White'
	
	
	$tabpageSettings.BackColor = "44,44,44"
	$tabpageSettings.ForeColor = 'White'
	$groupboxADGroups.ForeColor = 'White'
	
	$menustrip1.BackColor = "44,44,44"
	$menustrip1.ForeColor = 'White'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "44,44,44"
					$_.ForeColor = 'White'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'White'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "44,44,44"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'White'
	$copyOffice365UserToolStripMenuItem.BackColor = "44,44,44"
	
	
	$groupboxInformation.ForeColor = 'White'
	$linklabelBradWyatt.LinkColor = 'DeepSkyBlue'
	$linklabelGitHub.LinkColor = 'DeepSkyBlue'
	$labelChangelog.ForeColor = 'DeepSkyBlue'
	
	$console.BackColor = "35,35,35"
	$console.ForeColor = 'White'
	
	$buttonExit.ForeColor = "white"
	$buttonExit.BackColor = "35,35,35"
	
	$buttonCreateUser.ForeColor = "white"
	$buttonCreateUser.BackColor = "35,35,35"
	
	$groupboxADUser.ForeColor = 'White'
	$groupboxADUser.BackColor = "44,44,44"
	
	$groupbox2FA.ForeColor = 'White'
	$groupboxOffice365User.ForeColor = 'White'
	
	$tabcontrolUserProperties.ForeColor = 'White'
	$tabcontrolUserProperties.BackColor = "44,44,44"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
		

	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
	}
	
	#GENERAL PAGE
	$panel1.BackColor = "35,35,35"
	$labelDisplayName.ForeColor = 'LightCoral'
	$labelPassword.ForeColor = 'LightCoral'
	$labelConfirmPassword.ForeColor = 'LightCoral'

	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
				$_.BackColor = "35,35,35"
				$_.ForeColor = 'White'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'White'
	$buttonGeneratePassword.BackColor = '44,44,44'
	$buttonClear.ForeColor = 'White'
	$buttonClear.BackColor = '44,44,44'
	
	$textboxPasswordGen.ForeColor = 'White'
	$textboxPasswordGen.BackColor = '35,35,35'
	$maskedtextboxpassword.ForeColor = 'White'
	$maskedtextboxpassword.BackColor = '44,44,44'
	$textboxConfirmPassword.BackColor = '44,44,44'
	$textboxConfirmPassword.ForeColor = 'White'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Flat'
	$comboboxDomains.ForeColor = 'White'
	$comboboxDomains.BackColor = "35,35,35"
	
	$comboboxOUTree.FlatStyle = 'Flat'
	$comboboxOUTree.ForeColor = 'White'
	$comboboxOUTree.BackColor = "35,35,35"
	
	$panel2.ForeColor = 'White'
	$Panel2.BackColor = "35,35,35"
	
	$datetimepickerDATE.ForeColor = 'White'
	$datetimepickerDATE.CalendarMonthBackground = "35,35,35"
	
	$datetimepickerTIME.ForeColor = 'White'
	$datetimepickerTIME.BackColor = "35,35,35"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "44,44,44"
	
	$groupboxaccountexpires.ForeColor = 'White'
	$labelUserLogonNameUPN.ForeColor = 'LightCoral'
	$labelUserLogonNamepreWind.ForeColor = 'White'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'White'
	$checkedlistboxGroups.BackColor = "35,35,35"
	$textboxPOSIX.ForeColor = 'White'
	$textboxPOSIX.BackColor = "44,44,44"
	
	$textboxSearchGroups.ForeColor = 'White'
	$textboxSearchGroups.BackColor = "35,35,35"
	
	$comboboxPrimaryGroup.FlatStyle = 'Flat'
	$comboboxPrimaryGroup.ForeColor = 'White'
	$comboboxPrimaryGroup.BackColor = "35,35,35"
	
	$groupboxPrimaryGroup.ForeColor = 'White'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'White'
	$groupboxHomeFolder.ForeColor = 'White'
	$comboboxDriveLetter.FlatStyle = 'Flat'
	$comboboxDriveLetter.ForeColor = 'White'
	$comboboxDriveLetter.BackColor = "35,35,35"
	$textboxhomedirectory.ForeColor = 'White'
	$textboxhomedirectory.BackColor = "35,35,35"
	$textboxprofilepath.ForeColor = 'White'
	$textboxprofilepath.BackColor = "35,35,35"
	$textboxlogonscript.ForeColor = 'White'
	$textboxlogonscript.BackColor = "35,35,35"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "44,44,44"
	$tabcontrolO365.ForeColor = 'White'
	$textboxADSyncServer.ForeColor = 'White'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365userpassword.ForeColor = 'LightCoral'
	$labelO365userconfirmpassword.ForeColor = 'LightCoral'
	$labelO365DisplayName.ForeColor = 'LightCoral'
	$tabpageO365General.BackColor = "44,44,44"
	$groupboxADSync.ForeColor = 'White'
	$textboxADSyncServer.BackColor = "35,35,35"
	$groupboxNoAdSync.ForeColor = 'White'
	$comboboxO365Licenses.FlatStyle = 'Flat'
	$comboboxO365Licenses.BackColor = "35,35,35"
	$comboboxO365Licenses.ForeColor = 'White'
	$panel3.ForeColor = 'White'
	$panel3.BackColor = "35,35,35"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$textboxo365passwordgen.BackColor = "44,44,44"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Lightcoral'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'White'
	$tabpageO365Account.BackColor = "44,44,44"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'LightCoral'
	$panel4.ForeColor = 'White'
	$panel4.BackColor = "35,35,35"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{

			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.BackColor = "44,44,44"
	$tabpageO365Address.ForeColor = 'White'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'White'
	$tabpageO365Groups.BackColor = "44,44,44"
	$labelO365Groups.ForeColor = 'White'
	$labelO365Groups.BackColor = "44,44,44"
	$checkedlistboxDISTROo365groups.ForeColor = 'White'
	$checkedlistboxDISTROo365groups.BackColor = "35,35,35"
	$labelSearch.ForeColor = 'White'
	$textboxO365MailGroups.ForeColor = 'White'
	$textboxO365MailGroups.BackColor = "35,35,35"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'White'
	$labelSecurityGroups.BackColor = "44,44,44"
	$checkedlistboxO365SecurityGroups.ForeColor = 'White'
	$checkedlistboxO365SecurityGroups.BackColor = "35,35,35"
	$labelSearchGroups2.ForeColor = 'White'
	$labelSearchGroups2.BackColor = "44,44,44"
	$textboxSearchO365SecurityGroups.ForeColor = 'White'
	$textboxSearchO365SecurityGroups.BackColor = "35,35,35"
	$tabpagesecurityGroups.BackColor = "44,44,44"
	$tabpagesecurityGroups.ForeColor = 'White'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'White'
	$labelsharedmailboxes.BackColor = "44,44,44"
	$tabpageo365shared.ForeColor = 'White'
	$tabpageo365shared.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.ForeColor = 'White'
	$groupboxSettingsSharedMailbox.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'White'
	$checkedlistboxsharedmailboxes.BackColor = "35,35,35"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "White"
	$tabpageO365Attributes.BackColor = "44,44,44"
	$comboboxO365HidefromGAL.FlatStyle = 'Flat'
	$comboboxO365HidefromGAL.ForeColor = 'White'
	$comboboxO365HidefromGAL.BackColor = "35,35,35"
	
	
	
}

function Set-LightMode
{
	$labelCountryCode.ForeColor = 'Black'
	$contextmenustrip1.BackColor = "WhiteSmoke"
	$contextmenustrip1.ForeColor = 'Black'
	$MainForm.BackColor = "WhiteSmoke"
	$MainForm.ForeColor = 'Black'
	
	$labelLogFile.BackColor = "White"
	$labelLogFile.ForeColor = 'Black'
	
	$labelconnectionstatus.ForeColor = 'FireBrick'
	
	$richtextboxregistry.ForeColor = 'Black'
	$richtextboxregistry.BackColor = "White"
	
	$groupboxStatus.ForeColor = 'Black'
	
	
	$tabpageSettings.BackColor = "White"
	$tabpageSettings.ForeColor = 'Black'
	$groupboxADGroups.ForeColor = 'Black'
	
	$menustrip1.BackColor = "White"
	$menustrip1.ForeColor = 'Black'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "White"
					$_.ForeColor = 'Black'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'Black'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "White"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'Black'
	$copyOffice365UserToolStripMenuItem.BackColor = "White"
	
	
	$groupboxInformation.ForeColor = 'Black'
	$linklabelBradWyatt.LinkColor = '0, 0, 255'
	$linklabelGitHub.LinkColor = '0, 0, 255'
	$labelChangelog.ForeColor = '0, 0, 255'
	
	$console.BackColor = "White"
	$console.ForeColor = 'Black'
	
	$buttonExit.ForeColor = "Black"
	$buttonExit.BackColor = "White"
	
	$buttonCreateUser.ForeColor = "Black"
	$buttonCreateUser.BackColor = "White"
	
	$groupboxADUser.ForeColor = 'Black'
	$groupboxADUser.BackColor = "White"
	
	$groupbox2FA.ForeColor = 'Black'
	$groupboxOffice365User.ForeColor = 'Black'
	
	$tabcontrolUserProperties.ForeColor = 'Black'
	$tabcontrolUserProperties.BackColor = "White"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
		
		
	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
	}
	
	#GENERAL PAGE
	$panel1.BackColor = "MenuBar"
	$labelDisplayName.ForeColor = 'FireBrick'
	$labelPassword.ForeColor = 'FireBrick'
	$labelConfirmPassword.ForeColor = 'FireBrick'
	
	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'Black'
	$buttonGeneratePassword.BackColor = 'White'
	$buttonClear.ForeColor = 'Black'
	$buttonClear.BackColor = 'White'
	
	$textboxPasswordGen.ForeColor = 'Black'
	$textboxPasswordGen.BackColor = 'White'
	$maskedtextboxpassword.ForeColor = 'Black'
	$maskedtextboxpassword.BackColor = 'White'
	$textboxConfirmPassword.BackColor = 'White'
	$textboxConfirmPassword.ForeColor = 'Black'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Standard'
	$comboboxDomains.ForeColor = 'Black'
	$comboboxDomains.BackColor = "Window"
	
	$comboboxOUTree.FlatStyle = 'Standard'
	$comboboxOUTree.ForeColor = 'Black'
	$comboboxOUTree.BackColor = "Window"
	
	$panel2.ForeColor = 'Black'
	$Panel2.BackColor = "MenuBar"
	
	$datetimepickerDATE.ForeColor = 'Black'
	$datetimepickerDATE.CalendarMonthBackground = "White"
	
	$datetimepickerTIME.ForeColor = 'Black'
	$datetimepickerTIME.BackColor = "White"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "White"
	
	$groupboxaccountexpires.ForeColor = 'Black'
	$labelUserLogonNameUPN.ForeColor = 'FireBrick'
	$labelUserLogonNamepreWind.ForeColor = 'Black'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'Black'
	$checkedlistboxGroups.BackColor = "White"
	$textboxPOSIX.ForeColor = 'Black'
	$textboxPOSIX.BackColor = "White"
	
	$textboxSearchGroups.ForeColor = 'Black'
	$textboxSearchGroups.BackColor = "White"
	
	$comboboxPrimaryGroup.FlatStyle = 'Standard'
	$comboboxPrimaryGroup.ForeColor = 'Black'
	$comboboxPrimaryGroup.BackColor = "Window"
	
	$groupboxPrimaryGroup.ForeColor = 'Black'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'Black'
	$groupboxHomeFolder.ForeColor = 'Black'
	$comboboxDriveLetter.FlatStyle = 'Standard'
	$comboboxDriveLetter.ForeColor = 'Black'
	$comboboxDriveLetter.BackColor = "Window"
	$textboxhomedirectory.ForeColor = 'Black'
	$textboxhomedirectory.BackColor = "White"
	$textboxprofilepath.ForeColor = 'Black'
	$textboxprofilepath.BackColor = "White"
	$textboxlogonscript.ForeColor = 'Black'
	$textboxlogonscript.BackColor = "White"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "White"
	$tabcontrolO365.ForeColor = 'Black'
	$textboxADSyncServer.ForeColor = 'Black'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365userpassword.ForeColor = 'FireBrick'
	$labelO365userconfirmpassword.ForeColor = 'FireBrick'
	$labelO365DisplayName.ForeColor = 'FireBrick'
	$tabpageO365General.BackColor = "White"
	$groupboxADSync.ForeColor = 'Black'
	$textboxADSyncServer.BackColor = "White"
	$groupboxNoAdSync.ForeColor = 'Black'
	$comboboxO365Licenses.FlatStyle = 'Standard'
	$comboboxO365Licenses.BackColor = "Window"
	$comboboxO365Licenses.ForeColor = 'Black'
	$panel3.ForeColor = 'Black'
	$panel3.BackColor = "MenuBar"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$textboxo365passwordgen.BackColor = "White"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'Black'
	$tabpageO365Account.BackColor = "White"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'FireBrick'
	$panel4.ForeColor = 'Black'
	$panel4.BackColor = "MenuBar"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.BackColor = "White"
	$tabpageO365Address.ForeColor = 'Black'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'Black'
	$tabpageO365Groups.BackColor = "White"
	$labelO365Groups.ForeColor = 'Black'
	$labelO365Groups.BackColor = "White"
	$checkedlistboxDISTROo365groups.ForeColor = 'Black'
	$checkedlistboxDISTROo365groups.BackColor = "White"
	$labelSearch.ForeColor = 'Black'
	$textboxO365MailGroups.ForeColor = 'Black'
	$textboxO365MailGroups.BackColor = "White"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'Black'
	$labelSecurityGroups.BackColor = "White"
	$checkedlistboxO365SecurityGroups.ForeColor = 'Black'
	$checkedlistboxO365SecurityGroups.BackColor = "White"
	$labelSearchGroups2.ForeColor = 'Black'
	$labelSearchGroups2.BackColor = "White"
	$textboxSearchO365SecurityGroups.ForeColor = 'Black'
	$textboxSearchO365SecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.ForeColor = 'Black'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'Black'
	$labelsharedmailboxes.BackColor = "White"
	$tabpageo365shared.ForeColor = 'Black'
	$tabpageo365shared.BackColor = "White"
	$groupboxSettingsSharedMailbox.ForeColor = 'Black'
	$groupboxSettingsSharedMailbox.BackColor = "White"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'Black'
	$checkedlistboxsharedmailboxes.BackColor = "White"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "Black"
	$tabpageO365Attributes.BackColor = "White"
	$comboboxO365HidefromGAL.FlatStyle = 'Standard'
	$comboboxO365HidefromGAL.ForeColor = 'Black'
	$comboboxO365HidefromGAL.BackColor = "Window"
	
}

function Copy-ADUserAttributes
{
	Add-Logs -text "Setting Description"
	$textboxDescription.Text = $UserTemplate.Description
	Add-Logs -text "Setting Office"
	$textboxoffice.Text = $UserTemplate.Office
	Add-Logs -text "Setting Office Phone"
	$textboxTelephone.Text = $UserTemplate.OfficePhone
	Add-Logs -text "Setting Email Address"
	$textboxEmail.Text = $UserTemplate.EmailAddress
	Add-Logs -text "Setting Home Page"
	$textboxWebPage.Text = $UserTemplate.HomePage
	
	Add-Logs -text "Changing the OU for the user to $((($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)")))"
	$comboboxOUTree.SelectedItem = (($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)"))
	
	Add-Logs -text "Checking Password Never Expires status"
	If ($UserTemplate.PasswordNeverExpires -eq $true)
	{
		Add-Logs -text "Setting Password Never Expires to True"
		$checkboxPasswordNeverExpires.CheckState = 'Checked'
	}
	Else
	{
		Add-Logs -text "Setting Password Never Expires to False"
		$checkboxPasswordNeverExpires.CheckState = 'UnChecked'
	}
	
	Add-Logs -text "Checking Password Change Ability"
	If ($UserTemplate.CannotChangePassword -eq $True)
	{
		Add-Logs -text "Setting User Cannot Change Password to True"
		$checkboxUserCannotChangePass.CheckState -eq 'Checked'
	}
	Else
	{
		Add-Logs -text "Setting User Cannot Change Password to False"
		$checkboxUserCannotChangePass.CheckState -eq 'UnChecked'
	}
	
	Add-Logs -text "Checking Password Change statue"
	If ($UserTemplate.PasswordExpired -eq $True)
	{
		Add-Logs -text "Setting User Must Change Password to True"
		$checkboxUserMustChangePasswo.CheckState -eq 'Checked'
	}
	Else
	{
		Add-Logs -text "Setting User Must Change Password to False"
		$checkboxUserMustChangePasswo.CheckState -eq 'UnChecked'
	}
	Add-Logs -text "Setting Street Address"
	$textboxStreet.Text = $UserTemplate.StreetAddress
	Add-Logs -text "Setting PO Box"
	$textboxPOBox.Text = $UserTemplate.POBox
	Add-Logs -text "Setting City"
	$textboxcity.Text = $UserTemplate.City
	Add-Logs -text "Setting State"
	$textboxstate.Text = $UserTemplate.State
	Add-Logs -text "Setting Postal Code"
	$textboxzipcode.Text = $UserTemplate.PostalCode
	Add-Logs -text "Checking Group Memberships"
	$checkedlistboxGroups.CheckedItems = $null
	($UserTemplate).MemberOf | ForEach-Object {
		$GName = (Get-ADGroup $_).name
		Add-Logs -text "Adding User to the Group: $GName"
		
		$checkedlistboxGroups.SelectedItem = $GName
		$index = $checkedlistboxGroups.SelectedIndex
		$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
	}
	Add-Logs -text "Setting Job Title"
	$textboxjobtitle.text = $UserTemplate.Title
	Add-Logs -text "Setting Department"
	$textboxDepartment.Text = $UserTemplate.Department
	Add-Logs -text "Setting Company"
	$textboxCompany.Text = $UserTemplate.Company
	Add-Logs -text "Setting Profile Path"
	$textboxprofilepath.Text = $UserTemplate.ProfilePath
	Add-Logs -text "Setting Script Path"
	$textboxlogonscript.Text = $UserTemplate.ScriptPath
	Add-Logs -text "Setting Home Drive"
	$comboboxDriveLetter.SelectedItem = $UserTemplate.HomeDrive
	Add-Logs -text "Setting Home Directory"
	$textboxhomedirectory.Text = $UserTemplate.HomeDirectory
	Add-Logs -text "Setting Employee Type"
	$textboxemployeeType.Text = $UserTemplate.EmployeeType
	
	
}

function Copy-O365UserAttributes
{
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force | Out-Null
	
	If ($Licenses2Add.count -gt 0)
	{
		$Global:Licenses2Add = New-Object 'System.Collections.Generic.List[System.Object]'
	}
	
	$CopyUser = $CopyFromO365User_comboboxcopyuser
	add-logs -text "LOG: Copying attributes from $CopyUser"
	
	$UserObj = (Get-Msoluser -All | Where-Object { $_.DisplayName -eq $CopyUser }) | Select-Object -First 1
	
	add-logs -text "LOG: Getting the UPN Domain of $CopyUser"
	$UPNDomain = ($UserObj.userprincipalname).split('@') | Select-Object -Last 1
	add-logs -text "LOG: Setting the UPN Domain to $UPNDomain"
	$comboboxO365Domains.SelectedItem = "@"+$UPNDomain
	
	add-logs -text "LOG: Copying Country Code"
	$comboboxO365countrycode.SelectedText = ($UserObj).CountryCode
	add-logs -text "LOG: Checking MFA status of $CopyUser"
	If ($null -eq $UserObj.StrongAuthenticationRequirements.State)
	{
		add-logs -text "LOG: Setting MFA to False"
		$comboboxMFA.SelectedItem = "False"
	}
	Else
	{
		add-logs -text "LOG: Setting MFA to True"
		$comboboxMFA.SelectedItem = "True"
	}
	add-logs -text "LOG: Copying City"
	$textboxo365city.Text = ($UserObj).city
	add-logs -text "LOG: Copying State"
	$textboxo365state.Text = ($UserObj).state
	add-logs -text "LOG: Copying Street Address"
	$textboxO365street.Text = ($UserObj).streetaddress
	add-logs -text "LOG: Copying Postal Code"
	$textboxo365zip.Text = ($UserObj).postalcode
	
	If (($UserObj).PasswordNeverExpires -eq $true)
	{
		add-logs -text "LOG: Copying Password Never Expires Flag"
		$checkboxO365PasswordNeverExpires.CheckState = 'Checked'
	}
	
	If (($UserObj).BlockCredential -eq $True)
	{
		add-logs -text "LOG: Copying Disabled Account State"
		$checkboxBlockCred.CheckState = 'Checked'
	}
	

	
	add-logs -text "LOG: Getting all licenses assinged to $CopyUser"
	$currentlicenses = ($UserObj).Licenses.accountskuid
	foreach ($currentlicense in $currentlicenses)
	{
		$TenantSku = Get-MSOLAccountSku | Where-Object { $_.AccountSkuID -match $currentlicense }
		
		If ($TenantSku.ActiveUnits -ne $TenantSku.ConsumedUnits)
		{
			$lic = $currentlicense -split ":" | Select-Object -Last 1
			#lookup skus in hashtable and convert to friendly name
			$FriendlyName = $Sku.Item("$Lic")
			If ($null -eq $FriendlyName)
			{
				add-logs -text "LOG: Copying The License: $_"
				$obj = [PSCustomObject]@{
					'Name' = $lic
				}
				$Licenses2Add.Add($obj)
			}
			Else
			{
				add-logs -text "LOG: Copying The License: $FriendlyName"
				$obj = [PSCustomObject]@{
					'Name' = $FriendlyName
				}
				
				$Licenses2Add.Add($obj)
				
			}
		}
	}
	
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	Toogle-LicenseStatus
	
	add-logs -text "LOG: Checking Mail Group Membership for $CopyUser"
	Get-MsolGroup -All | Where-Object { ($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") } | ForEach-Object {
		If (Get-MsolGroupMember -All -GroupObjectId $_.ObjectID | Where-Object { $_.EmailAddress -contains ($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:")})
		{
				If ($checkedlistboxDISTROo365groups.Items -contains $_.DisplayName)
				{
					$_.DisplayName | Out-File $CacheDistroGroupsFile -Append -Force -ErrorAction SilentlyContinue
					add-logs -text "LOG: Adding User to the Distribution Group: $($_.DisplayName)"
					$checkedlistboxDISTROo365groups.SelectedItem = $($_.DisplayName)
					$index = $checkedlistboxDISTROo365groups.SelectedIndex
					$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
				}
			}
		
		
	}
	Add-Logs -text "LOG: Getting all Security Groups $CopyUser is a Member of"
	Get-MsolGroup -All | Where-Object { $_.GroupType -eq "Security" } | ForEach-Object {
		If (Get-MsolGroupMember -All -GroupObjectId $_.ObjectID | Where-Object { $_.EmailAddress -contains ($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:") })
		{
				If ($checkedlistboxO365SecurityGroups.Items -contains $_.DisplayName)
				{
					$_.DisplayName | Out-File $CacheSecurityGroupsFile -Append -Force -ErrorAction SilentlyContinue
				add-logs -text "LOG: Adding User to the Security Group: $($_.DisplayName)"
					$checkedlistboxO365SecurityGroups.SelectedItem = $($_.DisplayName)
					$index = $checkedlistboxO365SecurityGroups.SelectedIndex
					$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
				}
			}
			
			
		}
	
	
	
	$UserObjMailbox = Get-Mailbox (($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:"))
	Add-Logs -text "Gettings GAL status for User"
	If ($UserObjMailbox.HiddenFromAddressListsEnabled -eq $true)
	{
		Add-Logs -text "Hiding User from GAL: True"
		$comboboxO365HidefromGAL.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "Hiding User from GAL: False"
		$comboboxO365HidefromGAL.SelectedItem = "False"
	}
	
	Add-Logs -text "Getting Outlook on the Web (OWA) Status for user"
	If (((Get-CASMailbox (($UserObjMailbox).GUID).Guid).OWAEnabled) -eq $True)
	{
		Add-Logs -text "Outlook on the Web (OWA): True"
		$comboboxOWA.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "Outlook on the Web (OWA): False"
		$comboboxOWA.SelectedItem = "False"
	}
	
	Add-Logs -text "Getting ActiveSync Status for user"
	If (((Get-CASMailbox (($UserObjMailbox).GUID).Guid).ActiveSync) -eq $True)
	{
		Add-Logs -text "ActiveSync: True"
		$comboboxActiveSync.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "ActiveSync: False"
		$comboboxActiveSync.SelectedItem = "False"
	}
	
	add-logs -text "LOG: Done"
	
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force | Out-Null
	
}

function License-MUCO365User
{
	$licenseforuser = @()
	#$Lookup = @()
	Add-Logs -text "LOG: Getting License selected for user"
	$Licenses = $Licenses2Add
	Add-Logs "LOG: We will be adding the licenses, $Licenses2Add"
	Add-Logs -text "LOG: Getting AccountSKU Domain"
	$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
	foreach ($License in $licenses)
	{
		Add-Logs -text "LOG: Looking up SKU for license"
		$Lookup = $Sku.keys | Where-Object { $Sku["$_"] -eq "$license" }
		Add-Logs "LOG: License lookup is $Lookup"
		If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
		{
			Add-Logs -text "LOG: No SKU found during lookup"
			$BackSKU = "$LicenseDomain$License"
			Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
			$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
			If ($CheckSku -ne $Null)
			{
				Add-Logs -text "LOG: Assigning $BackSKU to User"
				$licenseforuser += $CheckSku
			}
			Else
			{
				Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
				$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
				Add-Logs -text "WARN: Assigning $ReLic to user instead"
				$licenseforuser += (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
			}
		}
		
		Else
		{
			Add-Logs -text "LOG: Found the SKU for the license"
			$Lookup | ForEach-Object {
				Add-Logs -text "LOG: Checking License $_"
				$BackSKU = "$LicenseDomain$_"
				Add-Logs -text "LOG: Looking up $BackSKU in tenant"
				Add-Logs -text "LOG: Verifying $BackSKU in tenant"
				$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
				If ($CheckSku -ne $Null)
				{
					Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
					$licenseforuser += $CheckSku
				}
				Else
				{
					Add-Logs -text "WARN: $BackSKU was not found in tenant"
				}
			}
		}
		Add-Logs "LOG: OUTPUTTING $licenseforuser"
		$licenseforuser | Out-File "$env:TEMP\MUClicenseforuser.txt" -Force
		
	}
}

function New-MUCUser
{
		
	add-logs -text 'LOG: Converting password to SecureString'
	add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
	$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
	#Get disable account boolean
	add-logs -text 'LOG: Checking if account is disabled or enabled'
	$disabledaccount = ($checkboxAccountIsDisabled.checked)
	#If account should be disabled
	If ($disabledaccount -eq $true)
	{
		add-logs -text 'LOG: Account is disabled'
		add-logs -text 'LOG: Creating user'
		Try
		{
			New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
		}
		Catch
		{
			add-logs -text "WARN: $_"
			$InfoMessage = $_
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		$User = Get-ADUser -Filter * -Properties * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
		add-logs -text "LOG: User has been created"
		
		#Check if Account is set to expire at a specific time
		Add-Logs -text "LOG: Checking if User account expiration is set"
		If ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text "LOG: User account expiration is set"
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			Add-Logs -text "LOG: Done"
		}
		Else
		{
			Add-Logs -text "LOG: User account expiration not set"
		}
		
		$Proxys = @()
		add-logs -text "LOG: Getting user proxy addresses to set"
		$Proxys += $textboxproxyaddress.Lines
		If ($Proxys -ne $Null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text "LOG: Adding proxy addresses"
				add-logs -text "LOG: Getting user proxy addresses to set"
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
			}
		}
		Else
		{
			add-logs -text "LOG: No proxys were found to add"
		}
		add-logs -text "LOG: Done with Proxys"
		
		
		
		add-logs -text "LOG: Getting user employeeType attribute to set"
		If ($textboxemployeeType.text -ne "")
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
		}
		Else
		{
			add-logs -text "LOG: No employeeType to add"
		}
		add-logs -text "LOG: Done with employeeType"
		
		add-logs -text "LOG: Getting user employeeNumber attribute to set"
		If ($textboxemployeenumber.text -ne "")
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			Set-ADUser $User -EmployeeNumber $textboxemployeenumber.text 
		}
		Else
		{
			add-logs -text "LOG: No employeeNumber to add"
		}
		add-logs -text "LOG: Done with employeeNumber"
		
		add-logs -text "LOG: Getting user employeeID attribute to set"
		If ($textboxEmployeeID.Text -ne "")
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			Set-ADUser $User -EmployeeID $textboxEmployeeID.text
		}
		Else
		{
			add-logs -text "LOG: No employeeID to add"
		}
		add-logs -text "LOG: Done with employeeID"
		
		#Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		$groups = $checkedlistboxGroups.CheckedItems
		If ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $Group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
				Add-ADGroupMember -Identity $Group -Members $User
			}
		}
		Else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text "LOG: Done"
		
		Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
		If ($comboboxPrimaryGroup.Text -eq "Domain Users")
		{
			Add-Logs -text "LOG: Primary Group set to Domain Users"
		}
		Else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
		}
		Add-Logs -text "LOG: Done"
		
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		If ($comboboxOUTree.SelectedItem -ne $null)
		{
			
			add-logs -text 'LOG: Specific OU specified, moving user'
			$CanocicalName = $comboboxOUTree.SelectedItem
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$User | Move-ADObject -TargetPath $OUTOMove
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
	Else
	{
		add-logs -text 'LOG: Account is enabled'
		add-logs -text 'LOG: Creating user'
		Try
		{
			New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
		}
		Catch
		{
			add-logs -text "WARN: $_"
			$InfoMessage = $_
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		$User = Get-ADUser -Filter * -Properties * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
		add-logs -text "LOG: User has been created"
		
		#Check if Account is set to expire at a specific time
		Add-Logs -text "LOG: Checking if User account expiration is set"
		If ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text "LOG: User account expiration is set"
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			Add-Logs -text "LOG: Done"
		}
		Else
		{
			Add-Logs -text "LOG: User account expiration not set"
		}
		
		$Proxys = @()
		add-logs -text "LOG: Getting user proxy addresses to set"
		$Proxys += $textboxproxyaddress.Lines
		If ($Proxys -ne $Null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text "LOG: Adding proxy addresses"
				add-logs -text "LOG: Getting user proxy addresses to set"
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
			}
		}
		Else
		{
			add-logs -text "LOG: No proxys were found to add"
		}
		add-logs -text "LOG: Done with Proxys"
		
		add-logs -text "LOG: Getting user employeeType attribute to set"
		If ($textboxemployeeType.text -ne "")
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
		}
		Else
		{
			add-logs -text "LOG: No employeeType to add"
		}
		add-logs -text "LOG: Done with employeeType"
		
		add-logs -text "LOG: Getting user employeeNumber attribute to set"
		If ($textboxemployeenumber.text -ne "")
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			Set-ADUser $User -EmployeeNumber $textboxemployeenumber.text
		}
		Else
		{
			add-logs -text "LOG: No employeeNumber to add"
		}
		add-logs -text "LOG: Done with employeeNumber"
		
		add-logs -text "LOG: Getting user employeeID attribute to set"
		If ($textboxEmployeeID.Text -ne "")
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			Set-ADUser $User -EmployeeID $textboxEmployeeID.text
		}
		Else
		{
			add-logs -text "LOG: No employeeID to add"
		}
		add-logs -text "LOG: Done with employeeID"
		
		#Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		$groups = $checkedlistboxGroups.CheckedItems
		If ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $Group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
				Add-ADGroupMember -Identity $Group -Members $User
			}
		}
		Else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text "LOG: Done"
		
		Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
		If ($comboboxPrimaryGroup.Text -eq "Domain Users")
		{
			Add-Logs -text "LOG: Primary Group set to Domain Users"
		}
		Else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
		}
		Add-Logs -text "LOG: Done"
		
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		If ($comboboxOUTree.SelectedItem -ne $null)
		{
			
			add-logs -text 'LOG: Specific OU specified, moving user'
			$CanocicalName = $comboboxOUTree.SelectedItem
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$User | Move-ADObject -TargetPath $OUTOMove
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
}

function New-MUCO365User
{
	add-logs -text 'LOG: Checking DirSync option'
	#If DirSync is enabled
	If ($checkboxRunADSync.CheckState -eq 'Checked')
	{
		If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$SyncServer = $textboxADSyncServer.text
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text "LOG: Running DirSync on $SyncServer"
			add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
			Try
			{
				Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text "WARN: ADSync Server text box is empty"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
		}
	}
	#If DirSync is not enabled
	Else
	{
		add-logs -text "LOG: User is not being AD-Synced"
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($Licenses2Add) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			
			#Check to see if the user is being enabled upon creation or disabled
			
			#User is going to be disabled
			add-logs -text 'LOG: Checking enabled status of user'
			If ($checkboxBlockCred.Checked -eq $true)
			{
				#If user is going to be disabled
				add-logs -text 'LOG: User is Disabled'
				add-logs -text 'LOG: Creating user'
				If (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
				{
					add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
					$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				Else
				{
					If ($Licenses2Add -ne $null)
					{
						License-MUCO365User
					}
					Try
					{
						add-logs -text 'LOG: Creating User'
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						add-logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Adding Licenses'
						$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
						$licenseforuser | ForEach-Object {
							Add-Logs -text "LOG: Adding $_"
							
							Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
						}
						Add-Logs -text 'LOG: Done'
						
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					
					#Find if user should be added to any Security groups
					add-logs -text 'LOG: Getting checked Security groups'
					$groups = $checkedlistboxO365SecurityGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Security Groups found'
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $DN to $Group"
							$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
							$UserGUID = (($User).ObjectID).GUID
							add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
							Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
						}
					}
					Else
					{
						add-logs -text 'LOG: No Security Groups checked'
					}
					Add-Logs -text 'LOG: Done with Security Groups'
					
					#Check user licenses, if licensed create and wait for mailbox
					Add-Logs -text 'LOG: Checking if license was applied to the user'
					If ($Licenses2Add -ne $Null)
					{
						Add-Logs -text 'LOG: License is applied to the new user'
						
						$ts = New-TimeSpan -Minutes 8
						
						$TermLoop = ((get-date) + $ts).ToString("HH:mm")
						Do
						{
							$DateNow = (Get-date).ToString("HH:mm")
							Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: 20 seconds remaining'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: 10 seconds remaining'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: Done'
							
							Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
						}
						Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
						
						add-logs -text 'LOG: Checking E-Mail address field for entered data'
						If ($textboxO365EmailAddress.Text -like "*@*")
						{
							add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
							If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
							{
								add-logs -text 'LOG: Email is different from UPN, proceeding.'
								
								Try
								{
									$PrimEmail = $textboxO365EmailAddress.Text
									add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
									$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
									$DN = $Mailbox.DisplayName
									add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
									Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
									add-logs -text "LOG: Done"
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
							Else
							{
								add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
							}
							
						}
						Else
						{
							add-logs -text "LOG: No E-Mail entered"
						}
						
						#Add any email aliases
						add-logs -text 'LOG: Checking Alias Addresses field for entered data'
						If ($textboxo365proxyaddresses.Text -ne $null)
						{
							add-logs -text 'LOG: Found Alias Addresses to add'
							$Proxys = $textboxo365proxyaddresses.Lines
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							$DN = $Mailbox.DisplayName
							foreach ($Proxy in $Proxys)
							{
								add-logs -text "LOG: Adding $Proxy for $DN"
								Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
								add-logs -text 'LOG: Done'
							}
						}
						Else
						{
							add-logs -text 'LOG: No Alias Addresses found'
						}
						add-logs -text 'LOG: Done with Alias Addresses'
						
						#Find if user should be added to any mail groups
						add-logs -text 'LOG: Getting checked mail groups'
						$groups = $checkedlistboxDISTROo365groups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Mail Groups found'
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
								If ((Get-UnifiedGroup).displayName -contains $group)
								{
									Add-Logs -text "LOG: $group is an Office 365 group"
									Add-Logs -text "LOG: Adding $DN to $Group"
									Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
									Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
									Add-Logs -text "LOG: Done"
								}
								Else
								{
									Add-Logs -text "LOG: $group is not an Office 365 group"
									
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
						}
						Else
						{
							add-logs -text 'LOG: No Mail Groups checked'
						}
						Add-Logs -text 'LOG: Done with Mail Groups'
						
						#Shared Mailboxes
						Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
						$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
						#If there are shared mailboxes to add the user to (full access rights)
						If ($SharedMailboxes -ne $null)
						{
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									$Automap = $comboboxsharedmailboxautomap.Text
									Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
									If ($Automap -eq "False")
									{
										Add-Logs -text "LOG: AutoMapping set to False"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
									}
									Else
									{
										Add-Logs -text "LOG: AutoMapping set to True"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
									}
								}
							}
							ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
									Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
									Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
									Add-Logs -text "LOG: Done"
								}
								
							}
							Else
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
									Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
									Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
									Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
									Add-Logs -text 'LOG: Done'
								}
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No Shared Mailboxes selected'
						}
						Add-Logs -text 'LOG: Done with Shared Mailboxes'
						
						Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
						#Hide from GAL
						If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
						{
							Add-Logs -text 'LOG: Hide from global address list is set to True'
							Add-Logs -text 'LOG: Hiding mailbox from global address list'
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							If ($null -ne $mailbox)
							{
								Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
							}
							Else
							{
								Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
								$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
								$InfoTitle = "Warning"
								Show-MessageBox_psf
							}
						}
						Else
						{
							Add-Logs -text 'LOG: Hide from global address list is set to False'
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No license is being added for the new user'
						Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
						Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
						Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
					}
					
					#If MFA is set to TRUE then enable MFA for the user
					Add-Logs -text 'LOG: Checking MFA status for the user'
					If ($comboboxMFA.Selecteditem -eq "True")
					{
						$UserMFA = ($User).UserPrincipalName
						Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
						Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
						$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
						Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
						$Auth.RelyingParty = "*"
						Add-Logs -text 'CMD: $MFA = @($Auth)'
						$MFA = @($Auth)
						Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
						Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
						Add-Logs -text 'LOG: Done'
					}
					Else
					{
						Add-Logs -text 'LOG: MFA is set to False'
					}
					Add-Logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Checking OWA'
					If ($comboboxOWA.SelectedItem -eq 'False')
					{
						Add-Logs -text 'LOG: OWA Disabled'
						Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
						Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
					}
					Else
					{
						Add-Logs -text 'LOG: OWA Enabled'
						
					}
					
					Add-Logs -text 'LOG: Checking ActiveSync'
					If ($comboboxActiveSync.SelectedItem -eq 'False')
					{
						Add-Logs -text 'LOG: ActiveSync Disabled'
						Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false'
						Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false
					}
					Else
					{
						Add-Logs -text 'LOG: ActiveSync Enabled'
						
					}
					
					Add-Logs -text 'LOG: Done'
					
				}
			}
			Else
			{
				#User is going to be enabled upon creation
				add-logs -text 'LOG: User is Enabled'
				add-logs -text 'LOG: Creating user'
				If (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
				{
					add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
					$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				Else
				{
					If ($Licenses2Add -ne $null)
					{
						License-MUCO365User
					}
					Try
					{
						add-logs -text 'LOG: Creating User'
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						add-logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Adding Licenses'
						$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
						$licenseforuser | ForEach-Object {
							Add-Logs -text "LOG: Adding $_"
							
							Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
						}
						Add-Logs -text 'LOG: Done'
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					#Find if user should be added to any Security groups
					add-logs -text 'LOG: Getting checked Security groups'
					$groups = $checkedlistboxO365SecurityGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Security Groups found'
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $DN to $Group"
							$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
							$UserGUID = (($User).ObjectID).GUID
							add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
							Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
						}
					}
					Else
					{
						add-logs -text 'LOG: No Security Groups checked'
					}
					Add-Logs -text 'LOG: Done with Security Groups'
					
					#Check user licenses, if licensed create and wait for mailbox
					Add-Logs -text 'LOG: Checking if license was applied to the user'
					If ($Licenses2Add -ne $Null)
					{
						Add-Logs -text 'LOG: License is applied to the new user'
						
						$ts = New-TimeSpan -Minutes 8
						
						$TermLoop = ((get-date) + $ts).ToString("HH:mm")
						Do
						{
							$DateNow = (Get-date).ToString("HH:mm")
							Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: 20 seconds remaining'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: 10 seconds remaining'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: Done'
							
							Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
						}
						Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
						
						add-logs -text 'LOG: Checking E-Mail address field for entered data'
						If ($textboxO365EmailAddress.Text -like "*@*")
						{
							add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
							If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
							{
								add-logs -text 'LOG: Email is different from UPN, proceeding.'
								
								Try
								{
									$PrimEmail = $textboxO365EmailAddress.Text
									add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
									$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
									$DN = $Mailbox.DisplayName
									add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
									Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
									add-logs -text "LOG: Done"
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
							Else
							{
								add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
							}
							
						}
						Else
						{
							add-logs -text "LOG: No E-Mail entered"
						}
						
						#Add any email aliases
						add-logs -text 'LOG: Checking Alias Addresses field for entered data'
						If ($textboxo365proxyaddresses.Text -ne $null)
						{
							add-logs -text 'LOG: Found Alias Addresses to add'
							$Proxys = $textboxo365proxyaddresses.Lines
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							$DN = $Mailbox.DisplayName
							foreach ($Proxy in $Proxys)
							{
								add-logs -text "LOG: Adding $Proxy for $DN"
								Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
								add-logs -text 'LOG: Done'
							}
						}
						Else
						{
							add-logs -text 'LOG: No Alias Addresses found'
						}
						add-logs -text 'LOG: Done with Alias Addresses'
						
						#Find if user should be added to any mail groups
						add-logs -text 'LOG: Getting checked mail groups'
						$groups = $checkedlistboxDISTROo365groups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Mail Groups found'
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
								If ((Get-UnifiedGroup).displayName -contains $group)
								{
									Add-Logs -text "LOG: $group is an Office 365 group"
									Add-Logs -text "LOG: Adding $DN to $Group"
									Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
									Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
									Add-Logs -text "LOG: Done"
								}
								Else
								{
									Add-Logs -text "LOG: $group is not an Office 365 group"
									
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
						}
						Else
						{
							add-logs -text 'LOG: No Mail Groups checked'
						}
						Add-Logs -text 'LOG: Done with Mail Groups'
						
						#Shared Mailboxes
						Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
						$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
						#If there are shared mailboxes to add the user to (full access rights)
						If ($SharedMailboxes -ne $null)
						{
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									$Automap = $comboboxsharedmailboxautomap.Text
									Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
									If ($Automap -eq "False")
									{
										Add-Logs -text "LOG: AutoMapping set to False"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
									}
									Else
									{
										Add-Logs -text "LOG: AutoMapping set to True"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
									}
								}
							}
							ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
									Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
									Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
									Add-Logs -text "LOG: Done"
								}
								
							}
							Else
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
									Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
									Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
									Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
									Add-Logs -text 'LOG: Done'
								}
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No Shared Mailboxes selected'
						}
						Add-Logs -text 'LOG: Done with Shared Mailboxes'
						
						Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
						#Hide from GAL
						If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
						{
							Add-Logs -text 'LOG: Hide from global address list is set to True'
							Add-Logs -text 'LOG: Hiding mailbox from global address list'
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							If ($null -ne $mailbox)
							{
								Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
							}
							Else
							{
								Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
								$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
								$InfoTitle = "Warning"
								Show-MessageBox_psf
							}
						}
						Else
						{
							Add-Logs -text 'LOG: Hide from global address list is set to False'
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No license is being added for the new user'
						Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
						Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
						Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
					}
					
					#If MFA is set to TRUE then enable MFA for the user
					Add-Logs -text 'LOG: Checking MFA status for the user'
					If ($comboboxMFA.Selecteditem -eq "True")
					{
						$UserMFA = ($User).UserPrincipalName
						Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
						Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
						$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
						Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
						$Auth.RelyingParty = "*"
						Add-Logs -text 'CMD: $MFA = @($Auth)'
						$MFA = @($Auth)
						Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
						Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
						Add-Logs -text 'LOG: Done'
					}
					Else
					{
						Add-Logs -text 'LOG: MFA is set to False'
					}
					Add-Logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Checking OWA'
					If ($comboboxOWA.SelectedItem -eq 'False')
					{
						Add-Logs -text 'LOG: OWA Disabled'
						Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
						Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
					}
					Else
					{
						Add-Logs -text 'LOG: OWA Enabled'
						
					}
					
					Add-Logs -text 'LOG: Checking ActiveSync'
					If ($comboboxActiveSync.SelectedItem -eq 'False')
					{
						Add-Logs -text 'LOG: ActiveSync Disabled'
						Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false'
						Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false
					}
					Else
					{
						Add-Logs -text 'LOG: ActiveSync Enabled'
						
					}
					
					Add-Logs -text 'LOG: Done'
				}
			}
		}
	}
}

#endregion

$MainForm_Load = {
	
	
	
	$MFALogin = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name MFALogin -ErrorAction SilentlyContinue).MFALogin
	If ($MFALogin -eq 1)
	{
		$radiobuttonMFALogin.Checked = $true
	}
	Else
	{
		$radiobuttonNonMFALogin.Checked = $true
	}
	

	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		#Set-LightMode
		
	}
	
	
}

$MainForm_DuringShow = {
	
	Import-Module ActiveDirectory -ErrorAction SilentlyContinue
	Import-Module ADSync -ErrorAction SilentlyContinue
	
	#DEBUG
	#$tabcontrolUserProperties.Enabled = $true
	#$groupboxNoAdSync.Enabled = $true
	
	$copyActiveDirectoryUserToolStripMenuItem.Enabled = $false
	
	$textboxADSyncServer.Enabled = $false
	
	$datetimepickerDATE.Refresh()
	
	$radiobuttonNever.Checked = $true
	$datetimepickerDATE.Enabled = $false
	$datetimepickerTIME.Enabled = $false
	
	$datetimepickerTIME.Text = "05:00 PM"
	
	$MainForm.MaximizeBox = $false
	
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1
	#DEBUG
	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	#$comboboxO365Licenses.Enabled = $False
	$comboboxO365Licenses.Text = "Please connect to Office 365 to assign a license"
	
	#DEBUG
	$tabcontrolUserProperties.Enabled = $false
	
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	
	$comboboxO365HidefromGAL.SelectedItem = "False"
	
	$labelTimeLeft.Text = ""
	
	$global:ExternalLog = "$env:TEMP\MUC.txt"
	$labelLogFile.Text = $global:ExternalLog
	
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items "Domain Users"
	$comboboxPrimaryGroup.SelectedItem = "Domain Users"
	
	$AlwaysADCreate = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysADCreate -ErrorAction SilentlyContinue).AlwaysADCreate
	If ($AlwaysADCreate -eq 1)
	{
		$checkboxCreateAnActiveDirect.Checked = $true
	}
	
	$AlwaysO365Create = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysO365Create -ErrorAction SilentlyContinue).AlwaysO365Create
	If ($AlwaysO365Create -eq 1)
	{
		$checkboxconfigo365user.Checked = $true
	}
	
	$comboboxActiveSync.SelectedItem = "True"
}

$resetFormToolStripMenuItem_Click = {
	Reset-Form
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateAnActiveDirect.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		Try
		{
			New-MUCUser
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		Try
		{
			New-MUCO365User
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
		
		#### ACTIVE DIRECTORY USER CREATION PORTION ####
		
		add-logs -text 'LOG: Only an Active Directory user is being created'
		Try
		{
			New-MUCUser
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
		
		
		#### OFFICE 365 USER CREATION PORTION ####
		
		
		add-logs -text 'LOG: Only an Office 365 User is being created'
		Try
		{
			New-MUCO365User
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
	
	$ResetForm = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ResetForm -ErrorAction SilentlyContinue).ResetForm
	If ($ResetForm -eq 1)
	{
		Reset-Form
	}
}


$textboxDisplayName_TextChanged = {
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'White'
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'Black'
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'Firebrick'
		}
		
	}
	
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxDisplayName_ChangeFocus = {
	$ADDisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDisplayName -ErrorAction SilentlyContinue).ADDisplayName
	If ($ADDisplayName -eq 1)
	{
		$words = $textboxDisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxLastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxLastName_ChangeFocus = {
	$ADLastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADLastName -ErrorAction SilentlyContinue).ADLastName
	If ($ADLastName -eq 1)
	{
		$words = $textboxLastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxLastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxFirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
	
	
		
	
}

$textboxFirstName_ChangeFocus = {
	$ADFirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADFirstName -ErrorAction SilentlyContinue).ADFirstName
	If ($ADFirstName -eq 1)
	{
		$words = $textboxFirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxFirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxInitials_ChangeFocus = {
	$ADInitials = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADInitials -ErrorAction SilentlyContinue).ADInitials
	If ($ADInitials -eq 1)
	{
		$words = $textboxInitials.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxInitials.Text = $TextInfo.ToTitleCase($words)
	}
}


$buttonGeneratePassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword
		$textboxPasswordGen.Text = $Password
		$maskedtextboxpassword.Text = $Password
		$textboxConfirmPassword.text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxpassword.Text = $textboxPasswordGen.Text
		$textboxConfirmPassword.text = $textboxPasswordGen.Text
	}
	
}

$textboxConfirmPassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'White'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Black'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Firebrick'
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}

			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateAnActiveDirect.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = $textboxUserLogonName.text
		$comboboxO365Domains.SelectedItem = $comboboxDomains.SelectedItem
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'White'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Black'
		}
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Firebrick'
		}
		
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonNonMFALogin.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: $((Get-ChildItem -Path $($env:LOCALAPPDATA+"\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse ).FullName|?{$_ -notmatch "_none_"}|select -First 1)'
		$Modules = $((Get-ChildItem -Path $($env:LOCALAPPDATA + "\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse).FullName | Where-Object{ $_ -notmatch "_none_" } | Select-Object -First 1)
		If ($Modules -eq $Null)
		{
			add-logs -text 'WARN: MFA Module was not found'
			$InfoMessage = "Exchange Online MFA Module was not found, please make sure you have downloaded and installed it from your tenant https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/mfa-connect-to-exchange-online-powershell?view=exchange-ps"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		$EXOSession = New-ExoPSSession
		Import-PSSession $EXOSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'MediumSeaGreen'
		}
		Else
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'Green'
		}
		
		
		$Global:O365_Pre_Req++
		#Create just an AD User
		If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD nad O365 User (w/ ADSync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD And O365 User (no Sync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 User no adsync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 user with ADSync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$buttonConnectToOffice365.ForeColor = 'White'
		}
		Else
		{
			$buttonConnectToOffice365.ForeColor = 'Black'
		}
		
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		#add-logs -text 'LOG: Enabling Licenses combobox'
		#add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		#$comboboxO365Licenses.Enabled = $True
		#add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = ""
		
		#Cache licenses to use in other forms
		$LicenseArray | Out-File "$env:TEMP\MUCLicenses.txt" -Force -ErrorAction SilentlyContinue
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		#add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		#Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = "Click to select an Office 365 license"

		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$MailGroups = (Get-MsolGroup | Where-Object { ($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataMailGroups = $MailGroups
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $MailGroups
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$SecurityGroups = (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataSecurityGroups = $SecurityGroups
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $SecurityGroups
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		$comboboxO365HidefromGAL.SelectedItem = "False"
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword -O365
		$textboxo365passwordgen.Text = $Password
		$maskedtextboxo365password.Text = $Password
		$textboxo365confirmpassword.Text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
		$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
		add-logs -text 'LOG: Done'
	}

	
	
}


$checkboxRunADSync_CheckedChanged = {
	If ($checkboxRunADSync.Checked -eq $True)
	{
		$groupboxNoAdSync.Enabled = $false
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
		
		$textboxADSyncServer.Enabled = $true
		
	}
	elseif ($checkboxRunADSync.Checked -eq $false)
	{
		$groupboxNoAdSync.Enabled = $True
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
		
		$textboxADSyncServer.Enabled = $false
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$buttonExit_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged = {
	If ((($textboxO365LastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	ElseIf ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}
$textboxO365LastName_FocusChanged = {
	$O365LastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365LastName -ErrorAction SilentlyContinue).O365LastName
	If ($O365LastName -eq 1)
	{
		$words = $textboxO365LastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365LastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365FirstName_TextChanged = {
	If ((($textboxO365FirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	ElseIf ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365FirstName_FocusChanged = {
	$O365FirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365FirstName -ErrorAction SilentlyContinue).O365FirstName
	If ($O365FirstName -eq 1)
	{
		$words = $textboxO365FirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365FirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365Initials_TextChanged = {
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged = {
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
	If ($Global:ExternalLog -ne $null)
	{
		$console.Text | Out-File $Global:ExternalLog
	}
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		If ($null -ne (Get-Module -ListAvailable -Name "ADSync"))
		{
			add-logs -text 'LOG: DirSync found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			$groupboxNoAdSync.Enabled = $true
			$comboboxOWA.SelectedItem = "True"
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Enabling ADSync CheckBox'
		$checkboxRunADSync.Enabled = $True
		add-logs -text 'LOG: Enabling No ADSync Groupbox'
		$groupboxNoAdSync.Enabled = $true
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateAnActiveDirect_CheckedChanged = {
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateAnActiveDirect.Checked -eq $true))
	{
		If ($Null -ne (Get-Module -ListAvailable -Name "ActiveDirectory"))
		{
			add-logs -text 'LOG: Enabling AD User creation'
			$tabcontrolUserProperties.Enabled = $true
			add-logs -text 'LOG: Done'
			
			Add-Logs -text "Enabling Copy AD User Menu Item"
			$copyActiveDirectoryUserToolStripMenuItem.Enabled = $true
			add-logs -text 'LOG: Done'
			
			
			add-logs -text 'LOG: Loading Organizational Unit Tree'
			add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
			$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName
			If ($null -eq $OUTree)
			{
				$InfoMessage = 'Could not load Organizational Unit structure'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxOUTree.Enabled = $false
			}
			Else
			{
				add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
				Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
				add-logs -text 'LOG: Done'
				$comboboxOUTree.Enabled = $true
			}
			
			add-logs -text 'LOG: Getting Active Directory Groups'
			add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
			$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
			$Global:OriginalData = $Groups
			If ($null -eq $Groups)
			{
				add-logs -text 'WARN: No Active Directory Groups were found'
				$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
				Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting NetBIOS Name'
			add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
			$Netbiosname = (Get-ADDomain).NetBIOSName
			If ($null -eq $Netbiosname)
			{
				add-logs -text 'WARN: No NetBIOS Name was found'
				$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$textboxUPNDomain.Text = "Not Available"
			}
			Else
			{
				$textboxUPNDomain.Text = $Netbiosname + "\"
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting UPN Suffixes'
			add-logs -text 'CMD: $Forest = Get-ADForest'
			$Forest = Get-ADForest
			If ($null -eq $Forest)
			{
				add-logs -text 'WARN: No Active Directory Forest was found'
				$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxDomains.Enabled = $false
			}
			Else
			{
				$comboboxDomains.Enabled = $true
				$UPNs = @()
				add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
				$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
				If ($extraUPNs -ne $Null)
				{
					foreach ($extraUPN in $extraUPNs)
					{
						$UPNs += "@" + $extraUPN
					}
				}
				add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
				$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
				Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
			}
			add-logs -text 'LOG: Done'
			
			$comboboxDomains.SelectedIndex = 0
		}
		Else
		{
			$InfoMessage = "Could not locate the ActiveDirectory module on $env:COMPUTERNAME. This module is required to create an Active Directory user"
			$InfoTitle = "Error"
			Show-MessageBox_psf
			$checkboxCreateAnActiveDirect.CheckState = 'Unchecked'
		}
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	
	Update-SamAccountNameTextbox
	Update-DisplayNameTextbox
	Update-EmailTextbox
	
	$textboxSamAccount.Text = $textboxUserLogonName.Text
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'White'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Black'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Firebrick'
		}
		
	}
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxUserLogonName_FocusChanged = {
	$ADUPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADUPN -ErrorAction SilentlyContinue).ADUPN
	If ($ADUPN -eq 1)
	{
		$words = $textboxUserLogonName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxUserLogonName.Text = $TextInfo.ToTitleCase($words)
	}
}




$maskedtextboxpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'White'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'LightCoral'
			
		}
		
	}
	Else
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'Black'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'Firebrick'
			
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}



$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHub_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'White'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'LightCoral'
		}
	}
	Else
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'Black'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'Firebrick'
		}
	}
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365DisplayName_FocusChanged = {
	$O365DisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365DisplayName -ErrorAction SilentlyContinue).O365DisplayName
	If ($O365DisplayName -eq 1)
	{
		$words = $textboxO365DisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365DisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365UPN_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'White'
		}
		Else
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Black'
		}
		
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'LightCoral'}
		Else
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Firebrick'
		}
		
		
	}
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_FocusChanged = {
	$O365UPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365UPN -ErrorAction SilentlyContinue).O365UPN
	If ($O365UPN -eq 1)
	{
		$words = $textboxO365UPN.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365UPN.Text = $TextInfo.ToTitleCase($words)
	}
}


$maskedtextboxo365password_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'White'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'lightcoral'
		}
	}
	Else
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'Black'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'Firebrick'
		}
	}
	
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}

$comboboxO365Licnses_Click = {
	Show-O365LicenseSelection_psf
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	Toogle-LicenseStatus
}





$comboboxO365countrycode_SelectedIndexChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
		}
		
	}
	Else
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'White'
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
		
	}
	
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'LightCoral'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'LightCoral'
	}
	Else
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'Firebrick'
	}
	
	
}



$saveLogAsToolStripMenuItem_Click = {
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged = {
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}




$versionToolStripMenuItem_Click = {
	$InfoMessage = "
Version Number: $Version
Build Date: $Builddate
Author: Brad Wyatt
"
	$InfoTitle = "Build Information"
	Show-MessageBox_psf
	
}


$changelogToolStripMenuItem_Click = {
	Show-ChangeLog_psf
	
}

$labelChangelog_Click = {
	Show-ChangeLog_psf
	
}

$externalLogFileToolStripMenuItem_Click = {
	# Class Details:  https://msdn.microsoft.com/en-us/library/system.windows.forms.savefiledialog(v=vs.110).aspx 
	$SaveFileDialog = New-Object windows.forms.savefiledialog
	$SaveFileDialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$SaveFileDialog.title = "Log File Location"
	#$SaveFileDialog.filter = "All files (*.*)| *.*"   
	#$SaveFileDialog.filter = "PublishSettings Files|*.publishsettings|All Files|*.*" 
	$SaveFileDialog.filter = "Log Text File|*.txt"
	$SaveFileDialog.ShowHelp = $True
	$result = $SaveFileDialog.ShowDialog()
	$result
	$Global:ExternalLog = $SaveFileDialog.filename
	Write-Host $result
	If ($result -eq "Ok")
	{
		
		$labelLogFile.Text = $global:ExternalLog
		
	}
}


$radiobuttonExpireOn_CheckedChanged = {
	#Enable the Date Date / Time picker
	$datetimepickerDATE.Enabled = $true
	#Enable the Time date/time picker
	$datetimepickerTIME.Enabled = $true
	
}

$radiobuttonNever_CheckedChanged = {
	#Disable the Date Date/Time picker
	$datetimepickerDATE.Enabled = $false
	#Disable the Time Date/Time picker
	$datetimepickerTIME.Enabled = $false
	
}

$datetimepickerDATE_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$datetimepickerTIME_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$checkedlistboxGroups_SelectedIndexChanged = {

	If ($click -ne 1)
	{
		$CachedCheckedGroups = Get-Content $CacheGroups -ErrorAction SilentlyContinue
		
		$checkedlistboxGroups.CheckedItems | ForEach-Object{
			#If checked and not in file, add and append
			$CheckItem = Get-Content $CacheGroups | Select-String $_
			If ($null -eq $CheckItem)
			{				
				$_ | Out-File $CacheGroups -Force -Append
			}
		}
		
		$CachedCheckedGroups = Get-Content $CacheGroups -ErrorAction SilentlyContinue
		
		
		#Get all unchecked items
		$UncheckedItems = $checkedlistboxGroups.Items | Where-Object { $checkedlistboxGroups.CheckedItems -notcontains $_ }
		
		#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
		Compare-Object -ReferenceObject $CachedCheckedGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
			# == means that the obj is unchecked but present on the file, we need to remove from file
			If ($_.SideIndicator -eq "==")
			{
				#Remove the item that is present on the list but unchecked from the file
				$Info = $CachedCheckedGroups | select-string -pattern $_.InputObject -notmatch
				$InfoMessage = $Info
				$Info | Out-File $CacheGroups -Force -ErrorAction SilentlyContinue
			}
		}
	}
	
	
	$Items = @()
	$Items += $checkedlistboxGroups.CheckedItems
	$Items += "Domain Users"
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items $Items
	
	
}





$optionsToolStripMenuItem_Click = {
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
}

$textboxDescription_FocusChanged = {
	$ADDescription = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription
	If ($ADDescription -eq 1)
	{
		$words = $textboxDescription.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDescription.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxoffice_FocusChanged = {
	$ADOffice = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADOffice -eq 1)
	{
		$words = $textboxoffice.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxoffice.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxSamAccount_FocusChanged = {
	$ADSamAccountName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADSamAccountName -ErrorAction SilentlyContinue).ADSamAccountName
	If ($ADSamAccountName -eq 1)
	{
		$words = $textboxSamAccount.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxSamAccount.Text = $TextInfo.ToTitleCase($words)
	}
	
}



$textboxStreet_FocusChanged = {
	$ADStreet = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADStreet -ErrorAction SilentlyContinue).ADStreet
	If ($ADStreet -eq 1)
	{
		$words = $textboxstreet.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstreet.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxcity_FocusChanged = {
	$ADCity = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCity -ErrorAction SilentlyContinue).ADCity
	If ($ADCity -eq 1)
	{
		$words = $textboxcity.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxcity.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxstate_FocusChanged = {
	$ADState = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState
	If ($ADState -eq 1)
	{
		$words = $textboxstate.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstate.Text = $TextInfo.ToTitleCase($words)
	}
	
	
}

$textboxjobtitle_FocusChanged = {
	$ADJobTitle = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADJobTitle -ErrorAction SilentlyContinue).ADJobTitle
	If ($ADJobTitle -eq 1)
	{
		$words = $textboxjobtitle.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxjobtitle.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxDepartment_FocusChanged = {
	$ADDepartment = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment
	If ($ADDepartment -eq 1)
	{
		$words = $textboxDepartment.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDepartment.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxCompany_FocusChanged = {
	$ADCompany = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany
	If ($ADCompany -eq 1)
	{
		$words = $textboxCompany.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxCompany.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$debugToolStripMenuItem_Click = {
	#Set value to 1 so we dont have string settings get in the way
	#Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 1 -Force | Out-Null
	
	#$textboxFirstName.Text = "TIM"
	#$textboxLastName.Text = "Loser"
	#$textboxEmail.text= "Tim.loser@loser.com"
	#Set back to 0
	#Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 0 -Force | Out-Null
	Add-Logs $checkedlistboxGroups.CheckedItems
	
	
}

$textboxSearchGroups_TextChanged = {
	
	$click = 1
	$Filter = $textboxSearchGroups.text
	$Results = $OriginalData | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxGroups -Items $Results
	
	Get-Content $CacheGroups -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxGroups.Items -contains $_)
		{
			$checkedlistboxGroups.SelectedItem = $_
			$index = $checkedlistboxGroups.SelectedIndex
			$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchGroups.Focus()
	
}


$textboxSearchO365SecurityGroups_TextChanged = {
	$click = 1
	
	
	$Filter = $textboxSearchO365SecurityGroups.text
	$Results = $OriginalDataSecurityGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $Results
	
	Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxO365SecurityGroups.Items -contains $_)
		{
			$checkedlistboxO365SecurityGroups.SelectedItem = $_
			$index = $checkedlistboxO365SecurityGroups.SelectedIndex
			$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchO365SecurityGroups.Focus()
	
}

$textboxO365MailGroups_TextChanged={
	
	$click = 1
	$Filter = $textboxO365MailGroups.text
	$Results = $OriginalDataMailGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $Results
	
	Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxDISTROo365groups.Items -contains $_)
		{
			$checkedlistboxDISTROo365groups.SelectedItem = $_
			$index = $checkedlistboxDISTROo365groups.SelectedIndex
			$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxO365MailGroups.Focus()
	
	
	
	
}

$textboxO365street_FocusChanged={
	$O365Street = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365Street -ErrorAction SilentlyContinue).O365Street
	If ($O365Street -eq 1)
	{
		$words = $textboxO365street.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365street.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxo365city_FocusChanged={
	$O365City = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City
	If ($O365City -eq 1)
	{
		$words = $textboxo365city.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365city.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxo365state_FocusChanged={
	$O365State = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State
	If ($O365State -eq 1)
	{
		$words = $textboxo365state.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365state.Text = $TextInfo.ToTitleCase($words)
	}
	
}


$textboxemployeenumber_TextChanged={
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
}

$textboxEmployeeID_TextChanged={
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
}

$textboxEmail_TextChanged={
	
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
}

$copyActiveDirectoryUserToolStripMenuItem_Click={
	
	#Set value to 1 so we dont have string settings get in the way
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 1 -Force | Out-Null
	Show-CopyFromUser_psf
	$CopyUser = $CopyFromUser_comboboxcopyuser
	$Job = $PSJob
	$UserJob = ($Job | Where-Object { $_.Name -like $CopyUser })[0]
	$UserTemplate = Get-ADUser -identity ($UserJob).ObjectGuid -properties *
	Copy-ADUserAttributes
	#Set back to 0
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 0 -Force | Out-Null
	Get-Job | Remove-Job
	
}

$textboxSamAccount_TextChanged={
	Update-EmailTextbox
	Update-DisplayNameTextbox
	Update-UserPrincipalNameTextbox
}
$textboxSamAccount_FocusChanged = {
	#Update-EmailTextbox
	Update-DisplayNameTextbox
	#Update-UserPrincipalNameTextbox
}


$clearFormToolStripMenuItem_Click={
	Reset-Form
	
}


$exitToolStripMenuItem1_Click={
	$MainForm.close()
	
}

$copyToolStripMenuItem_Click={
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
	
}

$checkedlistboxDISTROo365groups_SelectedIndexChanged = {
	$CopyO365User = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyO365User -ErrorAction SilentlyContinue).CopyO365User
	If ($CopyO365User -ne 1)
	{
		If ($click -ne 1)
		{
			$CachedCheckedDistroGroups = Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue
			
			$checkedlistboxDISTROo365groups.CheckedItems | ForEach-Object{
				#If checked and not in file, add and append
				$CheckItem = Get-Content $CacheDistroGroupsFile | Select-String $_
				If ($null -eq $CheckItem)
				{
					$_ | Out-File $CacheDistroGroupsFile -Force -Append
				}
			}
			
			$CachedCheckedDistroGroups = Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue
			
			
			#Get all unchecked items
			$UncheckedItems = $checkedlistboxDISTROo365groups.Items | Where-Object { $checkedlistboxDISTROo365groups.CheckedItems -notcontains $_ }
			
			#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
			Compare-Object -ReferenceObject $CachedCheckedDistroGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
				# == means that the obj is unchecked but present on the file, we need to remove from file
				If ($_.SideIndicator -eq "==")
				{
					#Remove the item that is present on the list but unchecked from the file
					$Info = $CachedCheckedDistroGroups | select-string -pattern $_.InputObject -notmatch
					$InfoMessage = $Info
					$Info | Out-File $CacheDistroGroupsFile -Force -ErrorAction SilentlyContinue
				}
			}
		}
	}
	
}

$checkedlistboxO365SecurityGroups_SelectedIndexChanged = {
	$CopyO365User = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyO365User -ErrorAction SilentlyContinue).CopyO365User
	If ($CopyO365User -ne 1)
	{
		If ($click -ne 1)
		{
			$CachedCheckedSecurityGroups = Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue
			
			$checkedlistboxO365SecurityGroups.CheckedItems | ForEach-Object{
				#If checked and not in file, add and append
				$CheckItem = Get-Content $CacheSecurityGroupsFile | Select-String $_
				If ($null -eq $CheckItem)
				{
					$_ | Out-File $CacheSecurityGroupsFile -Force -Append
				}
			}
			
			$CachedCheckedSecurityGroups = Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue
			
			
			#Get all unchecked items
			$UncheckedItems = $checkedlistboxO365SecurityGroups.Items | Where-Object { $checkedlistboxO365SecurityGroups.CheckedItems -notcontains $_ }
			
			#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
			Compare-Object -ReferenceObject $CachedCheckedSecurityGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
				# == means that the obj is unchecked but present on the file, we need to remove from file
				If ($_.SideIndicator -eq "==")
				{
					#Remove the item that is present on the list but unchecked from the file
					$Info = $CachedCheckedSecurityGroups | select-string -pattern $_.InputObject -notmatch
					$InfoMessage = $Info
					$Info | Out-File $CacheSecurityGroupsFile -Force -ErrorAction SilentlyContinue
				}
			}
		}
	}
	
}

$checkboxUserMustChangePasswo_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
	
}

$checkboxUserCannotChangePass_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both 'User Must Change Password at Next Logon' and User 'Cannot Change Password' for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
		
	}
	
	
}

$checkboxPasswordNeverExpires_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
	
}


$copyOffice365UserToolStripMenuItem_Click={
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force | Out-Null
	Show-CopyFromO365User_psf
	Copy-O365UserAttributes
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force | Out-Null
	
}

$MainForm_Closing=[System.Windows.Forms.FormClosingEventHandler]{
Get-PSSession | Remove-PSSession -ErrorAction SilentlyContinue
	
}


]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>