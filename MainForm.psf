<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Get-DictionaryPassword
{
	$Dictionary = @(
		"Honda";
		"Staple";
		"Battery";
		"Civic";
		"Chicago";
		"Winter";
		"Cubs";
		"Bears";
		"Snow";
		"Train";
		"Shoes";
		"Blue";
		"Bike";
		"Ring";
		"Watch";
		"Computer";
		"Neck";
		"Laptop";
		"Monitor";
		"Toilet";
		"Baseball";
		"Football";
		"Soccer";
		"Phone";
		"Carbondale";
		"Saluki";
		"Swim";
		"Lake";
		"Puppy";
		"Watch";
		"Royals";
		"Basketball";
		"Letter";
		"Paper";
		"Sticker";
		"Kitten";
		"Marker";
		"Highway";
		"Wire";
		"Keyboard";
		"Frisbee";
		"Disc";
		"Hawk";
		"West";
		"North";
		"East";
		"South";
		"Water";
		"Ice";
		"Dirt";
		"Taco";
		"Mouse";
		"Deer";
		"Speaker";
		"Hand";
		"Green";
		"Purple";
		"Pink";
		"Boat";
		"Toilet";
		"Sting";
		"Fish";
		"Bee";
		"White";
		"Grey";
		"Shoes";
		"Carpet";
		"Bed";
		"Pillow";
		"Sears";
		"Mustard";
		"Relish";
		"Ketchup";
		"Milk";
		"Apple";
		"Orange";
		"Flower";
		"Lotion";
		"Plane";
		"Desert";
		"Sand";
		"Beach";
		"Clouds";
		"Wagon";
		"Hair";
		"Internet";
		"Track";
		"Golf";
		"Sledding";
		"Market";
		"Window";
		"Door";
		"Deck";
		"Cards";
		"Shelf";
		"Santa";
		"Tack";
		"Building";
		"Tennis";
		"Power";
		"Sox";
		"Wrigley";
		"Tea";
		"Juice";
		"Plant";
		"Geneva";
		"City";
		"Kansas";
		"Missouri";
		"Midwest";
		"Great";
		"Box";
		"Crane";
		"Michigan";
		"Illinois";
		"Garbage";
		"Cougars";
		"Route";
		"Bridge";
		"Mountain";
		"Message";
		"Fire";
		"Taxi";
		"Bus";
		"Color";
		"Sharpie";
		"Ball";
		"Square";
		"River";
		"Navy";
		"Pier";
		"Grant";
		"Park";
		"Lincoln";
		"President";
		"Wrigley";
		"Soldier";
		"Forest";
		"Bulldog";
		"Police";
		"Taco";
		"Deep";
		"Dish";
		"Pizza";
		"Fire";
		"Ice";
		"Lion";
		"World";
		"Shoe";
		"Ant";
		"Bug";
		"Hair";
		"Beard";
		"Light";
		"Wave";
		"Field";
		"Toll";
		"Tax";
		"Money";
		"Bill";
		"Pot";
		"Pan"
	)
	
	$word1 = (Get-Random $Dictionary)
	
	$word2 = (Get-Random $Dictionary | Where-Object { $_ -ne $word1 })
	
	$Word3 = (Get-Random $Dictionary | Where-Object { ($_ -ne $word1) -and ($_ -ne $word2) })
	
	$Num = Get-random -Maximum 99 -Minimum 0
	
	$Word1 + "-" + $word2 + "-" + $word3 + $Num
	
}

function Reset-Form
{
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	$comboboxOUTree.SelectedText = ""
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunADSync.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	$comboboxMFA.SelectedItem = "False"
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""
	$textboxo365city.Text = ""
	$textboxo365state.Text = ""
	$textboxo365zip.Text = ""
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

function Update-DisplayNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatDisplayName -ErrorAction SilentlyContinue).UserFormatDisplayName
		#Create an array that we will use for formatting
		$DisplayNameFormatString = @()
		If ($null -eq $config)
		{
			$config = "%Firstname% %LastName%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatDisplayName -Value "%FirstName% %LastName%" -Force | Out-Null
			
		}
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text
			}
			ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
			{
				$DisplayNameFormatString += $textboxInitials.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$DisplayNameFormatString += $space
			}
			ElseIf ($_ -eq "EmployeeID")
			{
				$DisplayNameFormatString += $textboxEmployeeID.text
			}
			ElseIf ($_ -eq "EmployeeNumber")
			{
				$DisplayNameFormatString += $textboxemployeenumber.text
			}
			ELseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.text
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$DisplayNameFormatString += $textboxUserLogonName.text
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$DisplayNameFormatString += $textboxEmail.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.Text
			}
			Else
			{
				$DisplayNameFormatString += $_
			}
			
		}
		$textboxDisplayName.Text = [String]::Join('', $DisplayNameFormatString)
		
	}
	
	
}

function Update-EmailTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatEmail -ErrorAction SilentlyContinue).UserFormatEmail
		#Create an array that we will use for formatting
		$EmailFormatString = @()
		If ($null -ne $config)
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$EmailFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$EmailFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$EmailFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$EmailFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$EmailFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$EmailFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$EmailFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$EmailFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$EmailFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$EmailFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$EmailFormatString += $_
				}
				
			}
			$textboxEmail.Text = [String]::Join('', $EmailFormatString)
		}
	}
}

function Update-SamAccountNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatSamAccountName -ErrorAction SilentlyContinue).UserFormatSamAccountName
		#Create an array that we will use for formatting
		$SamAccountNameFormatString = @()
		If ($null -ne $config)
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$SamAccountNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$SamAccountNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$SamAccountNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$SamAccountNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$SamAccountNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$SamAccountNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$SamAccountNameFormatString += $_
				}
				
			}
			$textboxSamAccount.Text = [String]::Join('', $SamAccountNameFormatString)
		}
	}
}

function Update-UserPrincipalNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatUserPrincipalName -ErrorAction SilentlyContinue).UserFormatUserPrincipalName
		#Create an array that we will use for formatting
		$UserPrincipalNameFormatString = @()
		If ($null -ne $config)
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$UserPrincipalNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$UserPrincipalNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$UserPrincipalNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$UserPrincipalNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$UserPrincipalNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$UserPrincipalNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$UserPrincipalNameFormatString += $_
				}
				
			}
			$textboxUserLogonName.Text = [String]::Join('', $UserPrincipalNameFormatString)
		}
	}
}

function Set-DarkMode
{
	$labelCountryCode.ForeColor = 'White'
	$contextmenustrip1.BackColor = "44,44,44"
	$contextmenustrip1.ForeColor = 'White'
	$MainForm.BackColor = "44,44,44"
	$MainForm.ForeColor = 'White'
	
	$labelLogFile.BackColor = "44,44,44"
	$labelLogFile.ForeColor = 'White'
	
	$labelconnectionstatus.ForeColor = 'LightCoral'
	
	
	$richtextboxregistry.ForeColor = 'White'
	$richtextboxregistry.BackColor = "44,44,44"
	
	$groupboxStatus.ForeColor = 'White'
	
	
	$tabpageSettings.BackColor = "44,44,44"
	$tabpageSettings.ForeColor = 'White'
	$groupboxADGroups.ForeColor = 'White'
	
	$menustrip1.BackColor = "44,44,44"
	$menustrip1.ForeColor = 'White'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "44,44,44"
					$_.ForeColor = 'White'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'White'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "44,44,44"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'White'
	$copyOffice365UserToolStripMenuItem.BackColor = "44,44,44"
	
	
	$groupboxInformation.ForeColor = 'White'
	$linklabelBradWyatt.LinkColor = 'DeepSkyBlue'
	$linklabelGitHub.LinkColor = 'DeepSkyBlue'
	$labelChangelog.ForeColor = 'DeepSkyBlue'
	
	$console.BackColor = "35,35,35"
	$console.ForeColor = 'White'
	
	$buttonExit.ForeColor = "white"
	$buttonExit.BackColor = "35,35,35"
	
	$buttonCreateUser.ForeColor = "white"
	$buttonCreateUser.BackColor = "35,35,35"
	
	$groupboxADUser.ForeColor = 'White'
	$groupboxADUser.BackColor = "44,44,44"
	
	$groupbox2FA.ForeColor = 'White'
	$groupboxOffice365User.ForeColor = 'White'
	
	$tabcontrolUserProperties.ForeColor = 'White'
	$tabcontrolUserProperties.BackColor = "44,44,44"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
		

	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
	}
	
	#GENERAL PAGE
	$panel1.BackColor = "35,35,35"
	$labelDisplayName.ForeColor = 'LightCoral'
	$labelPassword.ForeColor = 'LightCoral'
	$labelConfirmPassword.ForeColor = 'LightCoral'

	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
				$_.BackColor = "35,35,35"
				$_.ForeColor = 'White'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'White'
	$buttonGeneratePassword.BackColor = '44,44,44'
	$buttonClear.ForeColor = 'White'
	$buttonClear.BackColor = '44,44,44'
	
	$textboxPasswordGen.ForeColor = 'White'
	$textboxPasswordGen.BackColor = '35,35,35'
	$maskedtextboxpassword.ForeColor = 'White'
	$maskedtextboxpassword.BackColor = '44,44,44'
	$textboxConfirmPassword.BackColor = '44,44,44'
	$textboxConfirmPassword.ForeColor = 'White'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Flat'
	$comboboxDomains.ForeColor = 'White'
	$comboboxDomains.BackColor = "35,35,35"
	
	$comboboxOUTree.FlatStyle = 'Flat'
	$comboboxOUTree.ForeColor = 'White'
	$comboboxOUTree.BackColor = "35,35,35"
	
	$panel2.ForeColor = 'White'
	$Panel2.BackColor = "35,35,35"
	
	$datetimepickerDATE.ForeColor = 'White'
	$datetimepickerDATE.CalendarMonthBackground = "35,35,35"
	
	$datetimepickerTIME.ForeColor = 'White'
	$datetimepickerTIME.BackColor = "35,35,35"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "44,44,44"
	
	$groupboxaccountexpires.ForeColor = 'White'
	$labelUserLogonNameUPN.ForeColor = 'LightCoral'
	$labelUserLogonNamepreWind.ForeColor = 'White'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'White'
	$checkedlistboxGroups.BackColor = "35,35,35"
	$textboxPOSIX.ForeColor = 'White'
	$textboxPOSIX.BackColor = "44,44,44"
	
	$textboxSearchGroups.ForeColor = 'White'
	$textboxSearchGroups.BackColor = "35,35,35"
	
	$comboboxPrimaryGroup.FlatStyle = 'Flat'
	$comboboxPrimaryGroup.ForeColor = 'White'
	$comboboxPrimaryGroup.BackColor = "35,35,35"
	
	$groupboxPrimaryGroup.ForeColor = 'White'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'White'
	$groupboxHomeFolder.ForeColor = 'White'
	$comboboxDriveLetter.FlatStyle = 'Flat'
	$comboboxDriveLetter.ForeColor = 'White'
	$comboboxDriveLetter.BackColor = "35,35,35"
	$textboxhomedirectory.ForeColor = 'White'
	$textboxhomedirectory.BackColor = "35,35,35"
	$textboxprofilepath.ForeColor = 'White'
	$textboxprofilepath.BackColor = "35,35,35"
	$textboxlogonscript.ForeColor = 'White'
	$textboxlogonscript.BackColor = "35,35,35"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "44,44,44"
	$tabcontrolO365.ForeColor = 'White'
	$textboxADSyncServer.ForeColor = 'White'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365userpassword.ForeColor = 'LightCoral'
	$labelO365userconfirmpassword.ForeColor = 'LightCoral'
	$labelO365DisplayName.ForeColor = 'LightCoral'
	$tabpageO365General.BackColor = "44,44,44"
	$groupboxADSync.ForeColor = 'White'
	$textboxADSyncServer.BackColor = "35,35,35"
	$groupboxNoAdSync.ForeColor = 'White'
	$comboboxO365Licenses.FlatStyle = 'Flat'
	$comboboxO365Licenses.BackColor = "35,35,35"
	$comboboxO365Licenses.ForeColor = 'White'
	$panel3.ForeColor = 'White'
	$panel3.BackColor = "35,35,35"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$textboxo365passwordgen.BackColor = "44,44,44"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Lightcoral'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'White'
	$tabpageO365Account.BackColor = "44,44,44"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'LightCoral'
	$panel4.ForeColor = 'White'
	$panel4.BackColor = "35,35,35"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{

			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.BackColor = "44,44,44"
	$tabpageO365Address.ForeColor = 'White'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'White'
	$tabpageO365Groups.BackColor = "44,44,44"
	$labelO365Groups.ForeColor = 'White'
	$labelO365Groups.BackColor = "44,44,44"
	$checkedlistboxDISTROo365groups.ForeColor = 'White'
	$checkedlistboxDISTROo365groups.BackColor = "35,35,35"
	$labelSearch.ForeColor = 'White'
	$textboxO365MailGroups.ForeColor = 'White'
	$textboxO365MailGroups.BackColor = "35,35,35"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'White'
	$labelSecurityGroups.BackColor = "44,44,44"
	$checkedlistboxO365SecurityGroups.ForeColor = 'White'
	$checkedlistboxO365SecurityGroups.BackColor = "35,35,35"
	$labelSearchGroups2.ForeColor = 'White'
	$labelSearchGroups2.BackColor = "44,44,44"
	$textboxSearchO365SecurityGroups.ForeColor = 'White'
	$textboxSearchO365SecurityGroups.BackColor = "35,35,35"
	$tabpagesecurityGroups.BackColor = "44,44,44"
	$tabpagesecurityGroups.ForeColor = 'White'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'White'
	$labelsharedmailboxes.BackColor = "44,44,44"
	$tabpageo365shared.ForeColor = 'White'
	$tabpageo365shared.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.ForeColor = 'White'
	$groupboxSettingsSharedMailbox.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'White'
	$checkedlistboxsharedmailboxes.BackColor = "35,35,35"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "White"
	$tabpageO365Attributes.BackColor = "44,44,44"
	$comboboxO365HidefromGAL.FlatStyle = 'Flat'
	$comboboxO365HidefromGAL.ForeColor = 'White'
	$comboboxO365HidefromGAL.BackColor = "35,35,35"
	
	
	
}
function Set-LightMode
{
	$labelCountryCode.ForeColor = 'Black'
	$contextmenustrip1.BackColor = "White"
	$contextmenustrip1.ForeColor = 'Black'
	$MainForm.BackColor = "WhiteSmoke"
	$MainForm.ForeColor = 'Black'
	
	$labelLogFile.BackColor = "White"
	$labelLogFile.ForeColor = 'Black'
	
	$labelconnectionstatus.ForeColor = 'FireBrick'
	
	$richtextboxregistry.ForeColor = 'Black'
	$richtextboxregistry.BackColor = "White"
	
	$groupboxStatus.ForeColor = 'Black'
	
	
	$tabpageSettings.BackColor = "White"
	$tabpageSettings.ForeColor = 'Black'
	$groupboxADGroups.ForeColor = 'Black'
	
	$menustrip1.BackColor = "White"
	$menustrip1.ForeColor = 'Black'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "White"
					$_.ForeColor = 'Black'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'Black'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "White"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'Black'
	$copyOffice365UserToolStripMenuItem.BackColor = "White"
	
	
	$groupboxInformation.ForeColor = 'Black'
	$linklabelBradWyatt.LinkColor = '0, 0, 255'
	$linklabelGitHub.LinkColor = '0, 0, 255'
	$labelChangelog.ForeColor = '0, 0, 255'
	
	$console.BackColor = "White"
	$console.ForeColor = 'Black'
	
	$buttonExit.ForeColor = "Black"
	$buttonExit.BackColor = "White"
	
	$buttonCreateUser.ForeColor = "Black"
	$buttonCreateUser.BackColor = "White"
	
	$groupboxADUser.ForeColor = 'Black'
	$groupboxADUser.BackColor = "White"
	
	$groupbox2FA.ForeColor = 'Black'
	$groupboxOffice365User.ForeColor = 'Black'
	
	$tabcontrolUserProperties.ForeColor = 'Black'
	$tabcontrolUserProperties.BackColor = "White"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
		
		
	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
	}
	
	#GENERAL PAGE
	$panel1.BackColor = "MenuBar"
	$labelDisplayName.ForeColor = 'FireBrick'
	$labelPassword.ForeColor = 'FireBrick'
	$labelConfirmPassword.ForeColor = 'FireBrick'
	
	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'Black'
	$buttonGeneratePassword.BackColor = 'White'
	$buttonClear.ForeColor = 'Black'
	$buttonClear.BackColor = 'White'
	
	$textboxPasswordGen.ForeColor = 'Black'
	$textboxPasswordGen.BackColor = 'White'
	$maskedtextboxpassword.ForeColor = 'Black'
	$maskedtextboxpassword.BackColor = 'White'
	$textboxConfirmPassword.BackColor = 'White'
	$textboxConfirmPassword.ForeColor = 'Black'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Standard'
	$comboboxDomains.ForeColor = 'Black'
	$comboboxDomains.BackColor = "Window"
	
	$comboboxOUTree.FlatStyle = 'Standard'
	$comboboxOUTree.ForeColor = 'Black'
	$comboboxOUTree.BackColor = "Window"
	
	$panel2.ForeColor = 'Black'
	$Panel2.BackColor = "MenuBar"
	
	$datetimepickerDATE.ForeColor = 'Black'
	$datetimepickerDATE.CalendarMonthBackground = "White"
	
	$datetimepickerTIME.ForeColor = 'Black'
	$datetimepickerTIME.BackColor = "White"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "White"
	
	$groupboxaccountexpires.ForeColor = 'Black'
	$labelUserLogonNameUPN.ForeColor = 'FireBrick'
	$labelUserLogonNamepreWind.ForeColor = 'Black'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'Black'
	$checkedlistboxGroups.BackColor = "White"
	$textboxPOSIX.ForeColor = 'Black'
	$textboxPOSIX.BackColor = "White"
	
	$textboxSearchGroups.ForeColor = 'Black'
	$textboxSearchGroups.BackColor = "White"
	
	$comboboxPrimaryGroup.FlatStyle = 'Standard'
	$comboboxPrimaryGroup.ForeColor = 'Black'
	$comboboxPrimaryGroup.BackColor = "Window"
	
	$groupboxPrimaryGroup.ForeColor = 'Black'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'Black'
	$groupboxHomeFolder.ForeColor = 'Black'
	$comboboxDriveLetter.FlatStyle = 'Standard'
	$comboboxDriveLetter.ForeColor = 'Black'
	$comboboxDriveLetter.BackColor = "Window"
	$textboxhomedirectory.ForeColor = 'Black'
	$textboxhomedirectory.BackColor = "White"
	$textboxprofilepath.ForeColor = 'Black'
	$textboxprofilepath.BackColor = "White"
	$textboxlogonscript.ForeColor = 'Black'
	$textboxlogonscript.BackColor = "White"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "White"
	$tabcontrolO365.ForeColor = 'Black'
	$textboxADSyncServer.ForeColor = 'Black'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365userpassword.ForeColor = 'FireBrick'
	$labelO365userconfirmpassword.ForeColor = 'FireBrick'
	$labelO365DisplayName.ForeColor = 'FireBrick'
	$tabpageO365General.BackColor = "White"
	$groupboxADSync.ForeColor = 'Black'
	$textboxADSyncServer.BackColor = "White"
	$groupboxNoAdSync.ForeColor = 'Black'
	$comboboxO365Licenses.FlatStyle = 'Standard'
	$comboboxO365Licenses.BackColor = "Window"
	$comboboxO365Licenses.ForeColor = 'Black'
	$panel3.ForeColor = 'Black'
	$panel3.BackColor = "MenuBar"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$textboxo365passwordgen.BackColor = "White"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'Black'
	$tabpageO365Account.BackColor = "White"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'FireBrick'
	$panel4.ForeColor = 'Black'
	$panel4.BackColor = "MenuBar"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.BackColor = "White"
	$tabpageO365Address.ForeColor = 'Black'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'Black'
	$tabpageO365Groups.BackColor = "White"
	$labelO365Groups.ForeColor = 'Black'
	$labelO365Groups.BackColor = "White"
	$checkedlistboxDISTROo365groups.ForeColor = 'Black'
	$checkedlistboxDISTROo365groups.BackColor = "White"
	$labelSearch.ForeColor = 'Black'
	$textboxO365MailGroups.ForeColor = 'Black'
	$textboxO365MailGroups.BackColor = "White"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'Black'
	$labelSecurityGroups.BackColor = "White"
	$checkedlistboxO365SecurityGroups.ForeColor = 'Black'
	$checkedlistboxO365SecurityGroups.BackColor = "White"
	$labelSearchGroups2.ForeColor = 'Black'
	$labelSearchGroups2.BackColor = "White"
	$textboxSearchO365SecurityGroups.ForeColor = 'Black'
	$textboxSearchO365SecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.ForeColor = 'Black'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'Black'
	$labelsharedmailboxes.BackColor = "White"
	$tabpageo365shared.ForeColor = 'Black'
	$tabpageo365shared.BackColor = "White"
	$groupboxSettingsSharedMailbox.ForeColor = 'Black'
	$groupboxSettingsSharedMailbox.BackColor = "White"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'Black'
	$checkedlistboxsharedmailboxes.BackColor = "White"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "Black"
	$tabpageO365Attributes.BackColor = "White"
	$comboboxO365HidefromGAL.FlatStyle = 'Standard'
	$comboboxO365HidefromGAL.ForeColor = 'Black'
	$comboboxO365HidefromGAL.BackColor = "Window"
	
}

#endregion

$MainForm_Load = {
	$MFALogin = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name MFALogin -ErrorAction SilentlyContinue).MFALogin
	If ($MFALogin -eq 1)
	{
		$radiobuttonMFALogin.Checked = $true
	}
	Else
	{
		$radiobuttonNonMFALogin.Checked = $true
	}
	

	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		#Set-LightMode
		
	}
	
	
}

$MainForm_DuringShow = {
	
	Import-Module ActiveDirectory -ErrorAction SilentlyContinue
	Import-Module ADSync -ErrorAction SilentlyContinue
	
	#DEBUG
	$tabcontrolUserProperties.Enabled = $true
	$groupboxNoAdSync.Enabled = $true
	
	
	$textboxADSyncServer.Enabled = $false
	
	$datetimepickerDATE.Refresh()
	
	$radiobuttonNever.Checked = $true
	$datetimepickerDATE.Enabled = $false
	$datetimepickerTIME.Enabled = $false
	
	$datetimepickerTIME.Text = "05:00 PM"
	
	$MainForm.MaximizeBox = $false
	
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1
	#DEBUG
	#$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	#$comboboxO365Licenses.Enabled = $False
	$comboboxO365Licenses.Text = "Please connect to Office 365 to assign a license"
	
	#DEBUG
	#$tabcontrolUserProperties.Enabled = $false
	
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	
	$comboboxO365HidefromGAL.SelectedItem = "False"
	
	$labelTimeLeft.Text = ""
	
	$global:ExternalLog = "$env:TEMP\MUC.txt"
	$labelLogFile.Text = $global:ExternalLog
	
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items "Domain Users"
	$comboboxPrimaryGroup.SelectedItem = "Domain Users"
	
	$AlwaysADCreate = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysADCreate -ErrorAction SilentlyContinue).AlwaysADCreate
	If ($AlwaysADCreate -eq 1)
	{
		$checkboxCreateAnActiveDirect.Checked = $true
	}
	
	$AlwaysO365Create = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysO365Create -ErrorAction SilentlyContinue).AlwaysO365Create
	If ($AlwaysO365Create -eq 1)
	{
		$checkboxconfigo365user.Checked = $true
	}
}

$resetFormToolStripMenuItem_Click = {
	Reset-Form
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateAnActiveDirect.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
				
					
					add-logs -text "LOG: Getting user employeeType attribute to set"
					If ($null -ne $textboxemployeeType.text)
					{
						add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
						Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
					}
					Else
					{
						add-logs -text "LOG: No employeeType to add"
					}
					add-logs -text "LOG: Done with employeeType"
					
					add-logs -text "LOG: Getting user employeeNumber attribute to set"
					If ($null -ne $textboxemployeenumber.text)
					{
						add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
						Set-ADUser $User -Add @{ EmployeeNumber = $textboxemployeenumber.text }
					}
					Else
					{
						add-logs -text "LOG: No employeeNumber to add"
					}
					add-logs -text "LOG: Done with employeeNumber"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
					
					Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
					If ($comboboxPrimaryGroup.Text -eq "Domain Users")
					{
						Add-Logs -text "LOG: Primary Group set to Domain Users"
					}
					Else
					{
						$PrimaryGroup = $comboboxPrimaryGroup.Text
						Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
						Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
						$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
						Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
						Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
					}
					Add-Logs -text "LOG: Done"
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					add-logs -text "LOG: Getting user employeeType attribute to set"
					If ($null -ne $textboxemployeeType.text)
					{
						add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
						Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
					}
					Else
					{
						add-logs -text "LOG: No employeeType to add"
					}
					add-logs -text "LOG: Done with employeeType"
					
					add-logs -text "LOG: Getting user employeeNumber attribute to set"
					If ($null -ne $textboxemployeenumber.text)
					{
						add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
						Set-ADUser $User -Add @{ EmployeeNumber = $textboxemployeenumber.text }
					}
					Else
					{
						add-logs -text "LOG: No employeeNumber to add"
					}
					add-logs -text "LOG: Done with employeeNumber"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
					
					Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
					If ($comboboxPrimaryGroup.Text -eq "Domain Users")
					{
						Add-Logs -text "LOG: Primary Group set to Domain Users"
					}
					Else
					{
						$PrimaryGroup = $comboboxPrimaryGroup.Text
						Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
						Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
						$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
						Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
						Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
					}
					Add-Logs -text "LOG: Done"
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunADSync.CheckState -eq 'Checked')
		{
			If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$SyncServer = $textboxADSyncServer.text
				add-logs -text 'LOG: DirSync Enabled'
				add-logs -text "LOG: Running DirSync on $SyncServer"
				add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
				Try
				{
					Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
				}
				Catch
				{
					add-logs -text "WARN: $_"
					Add-Type -AssemblyName System.Windows.Forms
					[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
				}
				add-logs -text 'LOG: Done'
			}
			Else
			{
				add-logs -text "WARN: ADSync Server text box is empty"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
			}
		}
		#If DirSync is not enabled
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				
				#User is going to be disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										If ($Automap -eq "False")
										{
											Add-Logs -text "LOG: AutoMapping set to False"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
										}
										Else
										{
											Add-Logs -text "LOG: AutoMapping set to True"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
										}
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										If ($Automap -eq "False")
										{
											Add-Logs -text "LOG: AutoMapping set to False"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
										}
										Else
										{
											Add-Logs -text "LOG: AutoMapping set to True"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
										}
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
		
		#### ACTIVE DIRECTORY USER CREATION PORTION ####
		
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					add-logs -text "LOG: Getting user employeeType attribute to set"
					If ($null -ne $textboxemployeeType.text)
					{
						add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
						Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
					}
					Else
					{
						add-logs -text "LOG: No employeeType to add"
					}
					add-logs -text "LOG: Done with employeeType"
					
					add-logs -text "LOG: Getting user employeeNumber attribute to set"
					If ($null -ne $textboxemployeenumber.text)
					{
						add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
						Set-ADUser $User -Add @{ EmployeeNumber = $textboxemployeenumber.text }
					}
					Else
					{
						add-logs -text "LOG: No employeeNumber to add"
					}
					add-logs -text "LOG: Done with employeeNumber"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
					
					Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
					If ($comboboxPrimaryGroup.Text -eq "Domain Users")
					{
						Add-Logs -text "LOG: Primary Group set to Domain Users"
					}
					Else
					{
						$PrimaryGroup = $comboboxPrimaryGroup.Text
						Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
						Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
						$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
						Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
						Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
					}
					Add-Logs -text "LOG: Done"
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					add-logs -text "LOG: Getting user employeeType attribute to set"
					If ($null -ne $textboxemployeeType.text)
					{
						add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
						Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
					}
					Else
					{
						add-logs -text "LOG: No employeeType to add"
					}
					add-logs -text "LOG: Done with employeeType"
					
					add-logs -text "LOG: Getting user employeeNumber attribute to set"
					If ($null -ne $textboxemployeenumber.text)
					{
						add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
						Set-ADUser $User -Add @{ EmployeeNumber = $textboxemployeenumber.text }
					}
					Else
					{
						add-logs -text "LOG: No employeeNumber to add"
					}
					add-logs -text "LOG: Done with employeeNumber"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
					
					Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
					If ($comboboxPrimaryGroup.Text -eq "Domain Users")
					{
						Add-Logs -text "LOG: Primary Group set to Domain Users"
					}
					Else
					{
						$PrimaryGroup = $comboboxPrimaryGroup.Text
						Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
						Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
						$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
						Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
						Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
					}
					Add-Logs -text "LOG: Done"
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
		
		
		#### OFFICE 365 USER CREATION PORTION ####
		
		
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunADSync.CheckState -eq 'Checked')
		{
			If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$SyncServer = $textboxADSyncServer.text
				add-logs -text 'LOG: DirSync Enabled'
				add-logs -text "LOG: Running DirSync on $SyncServer"
				add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
				Try
				{
					Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
				}
				Catch
				{
					add-logs -text "WARN: $_"
					Add-Type -AssemblyName System.Windows.Forms
					[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
				}
				add-logs -text 'LOG: Done'
			}
			Else
			{
				add-logs -text "WARN: ADSync Server text box is empty"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
			}
		}
		#If DirSync is not enabled
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				
				#User is going to be disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										If ($Automap -eq "False")
										{
											Add-Logs -text "LOG: AutoMapping set to False"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
										}
										Else
										{
											Add-Logs -text "LOG: AutoMapping set to True"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
										}
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										If ($Automap -eq "False")
										{
											Add-Logs -text "LOG: AutoMapping set to False"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
										}
										Else
										{
											Add-Logs -text "LOG: AutoMapping set to True"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
										}
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
	
	$ResetForm = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ResetForm -ErrorAction SilentlyContinue).ResetForm
	If ($ResetForm -eq 1)
	{
		Reset-Form
	}
}


$textboxDisplayName_TextChanged = {
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'White'
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'Black'
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'Firebrick'
		}
		
	}
	
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxDisplayName_ChangeFocus = {
	$ADDisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDisplayName -ErrorAction SilentlyContinue).ADDisplayName
	If ($ADDisplayName -eq 1)
	{
		$words = $textboxDisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxLastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxLastName_ChangeFocus = {
	$ADLastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADLastName -ErrorAction SilentlyContinue).ADLastName
	If ($ADLastName -eq 1)
	{
		$words = $textboxLastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxLastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxFirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
	
	
		
	
}

$textboxFirstName_ChangeFocus = {
	$ADFirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADFirstName -ErrorAction SilentlyContinue).ADFirstName
	If ($ADFirstName -eq 1)
	{
		$words = $textboxFirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxFirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxInitials_ChangeFocus = {
	$ADInitials = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADInitials -ErrorAction SilentlyContinue).ADInitials
	If ($ADInitials -eq 1)
	{
		$words = $textboxInitials.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxInitials.Text = $TextInfo.ToTitleCase($words)
	}
}


$buttonGeneratePassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword
		$textboxPasswordGen.Text = $Password
		$maskedtextboxpassword.Text = $Password
		$textboxConfirmPassword.text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxpassword.Text = $textboxPasswordGen.Text
		$textboxConfirmPassword.text = $textboxPasswordGen.Text
	}
	
}

$textboxConfirmPassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'White'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Black'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Firebrick'
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}

			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateAnActiveDirect.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = $textboxUserLogonName.text
		$comboboxO365Domains.SelectedItem = $comboboxDomains.SelectedItem
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'White'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Black'
		}
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Firebrick'
		}
		
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonNonMFALogin.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: $((Get-ChildItem -Path $($env:LOCALAPPDATA+"\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse ).FullName|?{$_ -notmatch "_none_"}|select -First 1)'
		$Modules = $((Get-ChildItem -Path $($env:LOCALAPPDATA + "\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse).FullName | Where-Object{ $_ -notmatch "_none_" } | Select-Object -First 1)
		If ($Modules -eq $Null)
		{
			add-logs -text 'WARN: MFA Module was not found'
			$InfoMessage = "Exchange Online MFA Module was not found, please make sure you have downloaded and installed it from your tenant https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/mfa-connect-to-exchange-online-powershell?view=exchange-ps"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		$EXOSession = New-ExoPSSession
		Import-PSSession $EXOSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'MediumSeaGreen'
		}
		Else
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'Green'
		}
		
		
		$Global:O365_Pre_Req++
		#Create just an AD User
		If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD nad O365 User (w/ ADSync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD And O365 User (no Sync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 User no adsync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 user with ADSync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$buttonConnectToOffice365.ForeColor = 'White'
		}
		Else
		{
			$buttonConnectToOffice365.ForeColor = 'Black'
		}
		
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		#add-logs -text 'LOG: Enabling Licenses combobox'
		#add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		#$comboboxO365Licenses.Enabled = $True
		#add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text=""
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		$comboboxO365Licenses.SelectedIndex = 0
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$MailGroups = (Get-MsolGroup | Where-Object { ($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataMailGroups = $MailGroups
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $MailGroups
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$SecurityGroups = (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataSecurityGroups = $SecurityGroups
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $SecurityGroups
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		$comboboxO365HidefromGAL.SelectedItem = "False"
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword
		$textboxo365passwordgen.Text = $Password
		$maskedtextboxo365password.Text = $Password
		$textboxo365confirmpassword.Text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
		$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
		add-logs -text 'LOG: Done'
	}

	
	
}


$checkboxRunADSync_CheckedChanged = {
	If ($checkboxRunADSync.Checked -eq $True)
	{
		$groupboxNoAdSync.Enabled = $false
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
		
		$textboxADSyncServer.Enabled = $true
		
	}
	elseif ($checkboxRunADSync.Checked -eq $false)
	{
		$groupboxNoAdSync.Enabled = $True
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
		
		$textboxADSyncServer.Enabled = $false
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$buttonExit_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged = {
	If ((($textboxO365LastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	ElseIf ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}
$textboxO365LastName_FocusChanged = {
	$O365LastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365LastName -ErrorAction SilentlyContinue).O365LastName
	If ($O365LastName -eq 1)
	{
		$words = $textboxO365LastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365LastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365FirstName_TextChanged = {
	If ((($textboxO365FirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	ElseIf ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365FirstName_FocusChanged = {
	$O365FirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365FirstName -ErrorAction SilentlyContinue).O365FirstName
	If ($O365FirstName -eq 1)
	{
		$words = $textboxO365FirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365FirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365Initials_TextChanged = {
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged = {
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
	If ($Global:ExternalLog -ne $null)
	{
		$console.Text | Out-File $Global:ExternalLog
	}
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		If ($null -ne (Get-Module -ListAvailable -Name "ADSync"))
		{
			add-logs -text 'LOG: DirSync found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Enabling ADSync CheckBox'
		$checkboxRunADSync.Enabled = $True
		add-logs -text 'LOG: Enabling No ADSync Groupbox'
		$groupboxNoAdSync.Enabled = $true
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateAnActiveDirect_CheckedChanged = {
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateAnActiveDirect.Checked -eq $true))
	{
		If ($Null -ne (Get-Module -ListAvailable -Name "ActiveDirectory"))
		{
			add-logs -text 'LOG: Enabling AD User creation'
			$tabcontrolUserProperties.Enabled = $true
			add-logs -text 'LOG: Done'
			
			add-logs -text 'LOG: Loading Organizational Unit Tree'
			add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
			$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName
			If ($null -eq $OUTree)
			{
				$InfoMessage = 'Could not load Organizational Unit structure'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxOUTree.Enabled = $false
			}
			Else
			{
				add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
				Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
				add-logs -text 'LOG: Done'
				$comboboxOUTree.Enabled = $true
			}
			
			add-logs -text 'LOG: Getting Active Directory Groups'
			add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
			$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
			$Global:OriginalData = $Groups
			If ($null -eq $Groups)
			{
				add-logs -text 'WARN: No Active Directory Groups were found'
				$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
				Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting NetBIOS Name'
			add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
			$Netbiosname = (Get-ADDomain).NetBIOSName
			If ($null -eq $Netbiosname)
			{
				add-logs -text 'WARN: No NetBIOS Name was found'
				$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$textboxUPNDomain.Text = "Not Available"
			}
			Else
			{
				$textboxUPNDomain.Text = $Netbiosname + "\"
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting UPN Suffixes'
			add-logs -text 'CMD: $Forest = Get-ADForest'
			$Forest = Get-ADForest
			If ($null -eq $Forest)
			{
				add-logs -text 'WARN: No Active Directory Forest was found'
				$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxDomains.Enabled = $false
			}
			Else
			{
				$comboboxDomains.Enabled = $true
				$UPNs = @()
				add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
				$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
				If ($extraUPNs -ne $Null)
				{
					foreach ($extraUPN in $extraUPNs)
					{
						$UPNs += "@" + $extraUPN
					}
				}
				add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
				$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
				Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
			}
			add-logs -text 'LOG: Done'
			
			$comboboxDomains.SelectedIndex = 0
		}
		Else
		{
			$InfoMessage = "Could not locate the ActiveDirectory module on $env:COMPUTERNAME. This module is required to create an Active Directory user"
			$InfoTitle = "Error"
			Show-MessageBox_psf
			$checkboxCreateAnActiveDirect.CheckState = 'Unchecked'
		}
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	
	#Update-SamAccountNameTextbox
	Update-DisplayNameTextbox
	Update-EmailTextbox
	
	$textboxSamAccount.Text = $textboxUserLogonName.Text
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'White'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Black'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Firebrick'
		}
		
	}
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxUserLogonName_FocusChanged = {
	$ADUPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADUPN -ErrorAction SilentlyContinue).ADUPN
	If ($ADUPN -eq 1)
	{
		$words = $textboxUserLogonName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxUserLogonName.Text = $TextInfo.ToTitleCase($words)
	}
}




$maskedtextboxpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'White'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'LightCoral'
			
		}
		
	}
	Else
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'Black'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'Firebrick'
			
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}



$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHub_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'White'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'LightCoral'
		}
	}
	Else
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'Black'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'Firebrick'
		}
	}
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365DisplayName_FocusChanged = {
	$O365DisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365DisplayName -ErrorAction SilentlyContinue).O365DisplayName
	If ($O365DisplayName -eq 1)
	{
		$words = $textboxO365DisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365DisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365UPN_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'White'
		}
		Else
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Black'
		}
		
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'LightCoral'}
		Else
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Firebrick'
		}
		
		
	}
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_FocusChanged = {
	$O365UPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365UPN -ErrorAction SilentlyContinue).O365UPN
	If ($O365UPN -eq 1)
	{
		$words = $textboxO365UPN.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365UPN.Text = $TextInfo.ToTitleCase($words)
	}
}


$maskedtextboxo365password_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'White'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'lightcoral'
		}
	}
	Else
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'Black'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'Firebrick'
		}
	}
	
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}


$comboboxO365Licenses_SelectedIndexChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
		}
		
	}
	Else
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'White'
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
		
	}
	
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'LightCoral'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'LightCoral'
	}
	Else
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'Firebrick'
	}
	
	
}



$saveLogAsToolStripMenuItem_Click = {
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged = {
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}




$versionToolStripMenuItem_Click = {
	$InfoMessage = "
Version Number: $Version
Build Date: $Builddate
Author: Brad Wyatt
"
	$InfoTitle = "Build Information"
	Show-MessageBox_psf
	
}


$changelogToolStripMenuItem_Click = {
	Show-ChangeLog_psf
	
}

$labelChangelog_Click = {
	Show-ChangeLog_psf
	
}

$externalLogFileToolStripMenuItem_Click = {
	# Class Details:  https://msdn.microsoft.com/en-us/library/system.windows.forms.savefiledialog(v=vs.110).aspx 
	$SaveFileDialog = New-Object windows.forms.savefiledialog
	$SaveFileDialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$SaveFileDialog.title = "Log File Location"
	#$SaveFileDialog.filter = "All files (*.*)| *.*"   
	#$SaveFileDialog.filter = "PublishSettings Files|*.publishsettings|All Files|*.*" 
	$SaveFileDialog.filter = "Log Text File|*.txt"
	$SaveFileDialog.ShowHelp = $True
	$result = $SaveFileDialog.ShowDialog()
	$result
	$Global:ExternalLog = $SaveFileDialog.filename
	Write-Host $result
	If ($result -eq "Ok")
	{
		
		$labelLogFile.Text = $global:ExternalLog
		
	}
}


$radiobuttonExpireOn_CheckedChanged = {
	#Enable the Date Date / Time picker
	$datetimepickerDATE.Enabled = $true
	#Enable the Time date/time picker
	$datetimepickerTIME.Enabled = $true
	
}

$radiobuttonNever_CheckedChanged = {
	#Disable the Date Date/Time picker
	$datetimepickerDATE.Enabled = $false
	#Disable the Time Date/Time picker
	$datetimepickerTIME.Enabled = $false
	
}

$datetimepickerDATE_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$datetimepickerTIME_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$checkedlistboxGroups_SelectedIndexChanged = {
	$Items = @()
	$Items += $checkedlistboxGroups.CheckedItems
	$Items += "Domain Users"
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items $Items
	
}

$optionsToolStripMenuItem_Click = {
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
}

$textboxDescription_FocusChanged = {
	$ADDescription = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription
	If ($ADDescription -eq 1)
	{
		$words = $textboxDescription.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDescription.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxoffice_FocusChanged = {
	$ADOffice = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADOffice -eq 1)
	{
		$words = $textboxoffice.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxoffice.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxSamAccount_FocusChanged = {
	$ADSamAccountName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADSamAccountName -ErrorAction SilentlyContinue).ADSamAccountName
	If ($ADSamAccountName -eq 1)
	{
		$words = $textboxSamAccount.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxSamAccount.Text = $TextInfo.ToTitleCase($words)
	}
	
}



$textboxStreet_FocusChanged = {
	$ADStreet = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADStreet -ErrorAction SilentlyContinue).ADStreet
	If ($ADStreet -eq 1)
	{
		$words = $textboxstreet.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstreet.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxcity_FocusChanged = {
	$ADCity = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCity -ErrorAction SilentlyContinue).ADCity
	If ($ADCity -eq 1)
	{
		$words = $textboxcity.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxcity.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxstate_FocusChanged = {
	$ADState = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState
	If ($ADState -eq 1)
	{
		$words = $textboxstate.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstate.Text = $TextInfo.ToTitleCase($words)
	}
	
	
}

$textboxjobtitle_FocusChanged = {
	$ADJobTitle = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADJobTitle -ErrorAction SilentlyContinue).ADJobTitle
	If ($ADJobTitle -eq 1)
	{
		$words = $textboxjobtitle.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxjobtitle.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxDepartment_FocusChanged = {
	$ADDepartment = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment
	If ($ADDepartment -eq 1)
	{
		$words = $textboxDepartment.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDepartment.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxCompany_FocusChanged = {
	$ADCompany = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany
	If ($ADCompany -eq 1)
	{
		$words = $textboxCompany.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxCompany.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$debugToolStripMenuItem_Click = {
	#Set value to 1 so we dont have string settings get in the way
	#Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 1 -Force | Out-Null
	
	#$textboxFirstName.Text = "TIM"
	#$textboxLastName.Text = "Loser"
	#$textboxEmail.text= "Tim.loser@loser.com"
	#Set back to 0
	#Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 0 -Force | Out-Null
	$comboboxO365Licenses.SelectedItem = 0
	
	
}

$textboxSearchGroups_TextChanged = {
	$Filter = $textboxSearchGroups.text
	$Results = $OriginalData | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxGroups -Items $Results
}


$textboxSearchO365SecurityGroups_TextChanged={
	$Filter = $textboxSearchO365SecurityGroups.text
	$Results = $OriginalDataSecurityGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $Results
	
}

$textboxO365MailGroups_TextChanged={
	$Filter = $textboxO365MailGroups.text
	$Results = $OriginalDataMailGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $Results
	
}

$textboxO365street_FocusChanged={
	$O365Street = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365Street -ErrorAction SilentlyContinue).O365Street
	If ($O365Street -eq 1)
	{
		$words = $textboxO365street.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365street.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxo365city_FocusChanged={
	$O365City = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City
	If ($O365City -eq 1)
	{
		$words = $textboxo365city.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365city.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxo365state_FocusChanged={
	$O365State = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State
	If ($O365State -eq 1)
	{
		$words = $textboxo365state.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365state.Text = $TextInfo.ToTitleCase($words)
	}
	
}


$textboxemployeenumber_TextChanged={
	Update-DisplayNameTextbox
	Update-SamAccountNameTextbox
	Update-EmailTextbox
	Update-UserPrincipalNameTextbox
	
}

$textboxEmployeeID_TextChanged={
	Update-DisplayNameTextbox
	Update-SamAccountNameTextbox
	Update-EmailTextbox
	Update-UserPrincipalNameTextbox
}

$textboxEmail_TextChanged={
	Update-DisplayNameTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
}

$copyActiveDirectoryUserToolStripMenuItem_Click={
	
	#Set value to 1 so we dont have string settings get in the way
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 1 -Force | Out-Null
	
	#Set back to 0
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 0 -Force | Out-Null
	
	
}

$textboxSamAccount_TextChanged={
	#Update-EmailTextbox
	Update-DisplayNameTextbox
	#Update-UserPrincipalNameTextbox
}
$textboxSamAccount_FocusChanged = {
	#Update-EmailTextbox
	Update-DisplayNameTextbox
	#Update-UserPrincipalNameTextbox
}


$clearFormToolStripMenuItem_Click={
	Reset-Form
	
}


$exitToolStripMenuItem1_Click={
	$MainForm.close()
	
}

$copyToolStripMenuItem_Click={
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>