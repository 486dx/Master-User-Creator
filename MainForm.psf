<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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</Preview>
  <Form>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
PwGZGcPZowMA</Form>
  <Code><![CDATA[#region Control Helper Functions
function Toogle-LicenseStatus
{
	If ($null -eq $Licenses2Add)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
#If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
#If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($Licenses2Add.Count -ge 1))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($Licenses2Add.Count -ge 1))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Get-DictionaryPassword
{
	param
	(
		
		[switch]$O365
	)
	$Dictionary = @(
		"Honda";
		"Staple";
		"Battery";
		"Civic";
		"Chicago";
		"Winter";
		"Cubs";
		"Bears";
		"Snow";
		"Train";
		"Shoes";
		"Blue";
		"Bike";
		"Ring";
		"Watch";
		"Computer";
		"Neck";
		"Laptop";
		"Monitor";
		"Toilet";
		"Baseball";
		"Football";
		"Soccer";
		"Phone";
		"Carbondale";
		"Saluki";
		"Swim";
		"Lake";
		"Puppy";
		"Watch";
		"Royals";
		"Basketball";
		"Letter";
		"Paper";
		"Sticker";
		"Kitten";
		"Marker";
		"Highway";
		"Wire";
		"Keyboard";
		"Frisbee";
		"Disc";
		"Hawk";
		"West";
		"North";
		"East";
		"South";
		"Water";
		"Ice";
		"Dirt";
		"Taco";
		"Mouse";
		"Deer";
		"Speaker";
		"Hand";
		"Green";
		"Purple";
		"Pink";
		"Boat";
		"Toilet";
		"Sting";
		"Fish";
		"Bee";
		"White";
		"Grey";
		"Shoes";
		"Carpet";
		"Bed";
		"Pillow";
		"Sears";
		"Mustard";
		"Relish";
		"Ketchup";
		"Milk";
		"Apple";
		"Orange";
		"Flower";
		"Lotion";
		"Plane";
		"Desert";
		"Sand";
		"Beach";
		"Clouds";
		"Wagon";
		"Hair";
		"Internet";
		"Track";
		"Golf";
		"Sledding";
		"Market";
		"Window";
		"Door";
		"Deck";
		"Cards";
		"Shelf";
		"Santa";
		"Tack";
		"Building";
		"Tennis";
		"Power";
		"Sox";
		"Wrigley";
		"Tea";
		"Juice";
		"Plant";
		"Geneva";
		"City";
		"Kansas";
		"Missouri";
		"Midwest";
		"Great";
		"Box";
		"Crane";
		"Michigan";
		"Illinois";
		"Garbage";
		"Cougars";
		"Route";
		"Bridge";
		"Mountain";
		"Message";
		"Fire";
		"Taxi";
		"Bus";
		"Color";
		"Sharpie";
		"Ball";
		"Square";
		"River";
		"Navy";
		"Pier";
		"Grant";
		"Park";
		"Lincoln";
		"President";
		"Wrigley";
		"Soldier";
		"Forest";
		"Bulldog";
		"Police";
		"Taco";
		"Deep";
		"Dish";
		"Pizza";
		"Fire";
		"Ice";
		"Lion";
		"World";
		"Shoe";
		"Ant";
		"Bug";
		"Hair";
		"Beard";
		"Light";
		"Wave";
		"Field";
		"Toll";
		"Tax";
		"Money";
		"Bill";
		"Pot";
		"Pan"
	)
	If ($O365 -eq $True)
	{
		$word1 = (Get-Random $Dictionary)
		$Num = Get-random -Maximum 99 -Minimum 0
		$WChar = @(
			"!"
			"@"
			"$"
			"%"
			"&"
			"?"
			"#"
		)
		$Wildchar = Get-random $WChar
		
		$Word1 + "-" + $Num + $WildChar
	}
	Else
	{
		$word1 = (Get-Random $Dictionary)
		
		$word2 = (Get-Random $Dictionary | Where-Object { $_ -ne $word1 })
		
		$Word3 = (Get-Random $Dictionary | Where-Object { ($_ -ne $word1) -and ($_ -ne $word2) })
		
		$Num = Get-random -Maximum 99 -Minimum 0
		
		$Word1 + "-" + $word2 + "-" + $word3 + $Num
	}
	
	
}

function Reset-Form
{
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	$comboboxOUTree.SelectedText = ""
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	$textboxEmployeeID.Text = ""
	$textboxemployeenumber.Text = ""
	$textboxemployeeType.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunADSync.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	$comboboxMFA.SelectedItem = "False"
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""
	$textboxo365city.Text = ""
	$textboxo365state.Text = ""
	$textboxo365zip.Text = ""
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

function Update-DisplayNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatDisplayName -ErrorAction SilentlyContinue).UserFormatDisplayName
		#Create an array that we will use for formatting
		$DisplayNameFormatString = @()
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%Firstname% %LastName%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatDisplayName -Value "%FirstName% %LastName%" -Force | Out-Null
		}
		
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text
			}
			ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
			{
				$DisplayNameFormatString += $textboxInitials.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$DisplayNameFormatString += $space
			}
			ElseIf ($_ -eq "EmployeeID")
			{
				$DisplayNameFormatString += $textboxEmployeeID.text
			}
			ElseIf ($_ -eq "EmployeeNumber")
			{
				$DisplayNameFormatString += $textboxemployeenumber.text
			}
			ELseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.text
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$DisplayNameFormatString += $textboxUserLogonName.text
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$DisplayNameFormatString += $textboxEmail.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.Text
			}
			Else
			{
				$DisplayNameFormatString += $_
			}
			
			$textboxDisplayName.Text = [String]::Join('', $DisplayNameFormatString)
			
		}
		
		
	}
}

function Update-EmailTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatEmail -ErrorAction SilentlyContinue).UserFormatEmail
		#Create an array that we will use for formatting
		$EmailFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$EmailFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$EmailFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$EmailFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$EmailFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$EmailFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$EmailFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$EmailFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$EmailFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$EmailFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$EmailFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$EmailFormatString += $_
				}
				
			}
			$textboxEmail.Text = [String]::Join('', $EmailFormatString)
		}
	}
}

function Update-SamAccountNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatSamAccountName -ErrorAction SilentlyContinue).UserFormatSamAccountName
		#Create an array that we will use for formatting
		$SamAccountNameFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$SamAccountNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$SamAccountNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$SamAccountNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$SamAccountNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$SamAccountNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$SamAccountNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$SamAccountNameFormatString += $_
				}
				
			}
			$textboxSamAccount.Text = [String]::Join('', $SamAccountNameFormatString)
		}
	}
}

function Update-UserPrincipalNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatUserPrincipalName -ErrorAction SilentlyContinue).UserFormatUserPrincipalName
		#Create an array that we will use for formatting
		$UserPrincipalNameFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$UserPrincipalNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$UserPrincipalNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$UserPrincipalNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$UserPrincipalNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$UserPrincipalNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$UserPrincipalNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$UserPrincipalNameFormatString += $_
				}
				
			}
			$textboxUserLogonName.Text = [String]::Join('', $UserPrincipalNameFormatString)
		}
	}
}

function Set-DarkMode
{
	$labelCountryCode.ForeColor = 'White'
	$contextmenustrip1.BackColor = "44,44,44"
	$contextmenustrip1.ForeColor = 'White'
	$MainForm.BackColor = "44,44,44"
	$MainForm.ForeColor = 'White'
	
	$labelLogFile.BackColor = "44,44,44"
	$labelLogFile.ForeColor = 'White'
	
	$labelconnectionstatus.ForeColor = 'LightCoral'
	
	
	$richtextboxregistry.ForeColor = 'White'
	$richtextboxregistry.BackColor = "44,44,44"
	
	$groupboxStatus.ForeColor = 'White'
	
	
	$tabpageSettings.BackColor = "44,44,44"
	$tabpageSettings.ForeColor = 'White'
	$groupboxADGroups.ForeColor = 'White'
	
	$menustrip1.BackColor = "44,44,44"
	$menustrip1.ForeColor = 'White'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "44,44,44"
					$_.ForeColor = 'White'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'White'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "44,44,44"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'White'
	$copyOffice365UserToolStripMenuItem.BackColor = "44,44,44"
	
	
	$groupboxInformation.ForeColor = 'White'
	$linklabelBradWyatt.LinkColor = 'DeepSkyBlue'
	$linklabelGitHub.LinkColor = 'DeepSkyBlue'
	$labelChangelog.ForeColor = 'DeepSkyBlue'
	
	$console.BackColor = "35,35,35"
	$console.ForeColor = 'White'
	
	$buttonExit.ForeColor = "white"
	$buttonExit.BackColor = "35,35,35"
	
	$buttonCreateUser.ForeColor = "white"
	$buttonCreateUser.BackColor = "35,35,35"
	
	$groupboxADUser.ForeColor = 'White'
	$groupboxADUser.BackColor = "44,44,44"
	
	$groupbox2FA.ForeColor = 'White'
	$groupboxOffice365User.ForeColor = 'White'
	
	$tabcontrolUserProperties.ForeColor = 'White'
	$tabcontrolUserProperties.BackColor = "44,44,44"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
		

	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
	}
	
	#GENERAL PAGE
	$groupboxADSync.ForeColor = 'White'
	$panel1.BackColor = "35,35,35"
	$labelDisplayName.ForeColor = 'LightCoral'
	$labelPassword.ForeColor = 'LightCoral'
	$labelConfirmPassword.ForeColor = 'LightCoral'

	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
				$_.BackColor = "35,35,35"
				$_.ForeColor = 'White'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'White'
	$buttonGeneratePassword.BackColor = '44,44,44'
	$buttonClear.ForeColor = 'White'
	$buttonClear.BackColor = '44,44,44'
	
	$textboxPasswordGen.ForeColor = 'White'
	$textboxPasswordGen.BackColor = '35,35,35'
	$maskedtextboxpassword.ForeColor = 'White'
	$maskedtextboxpassword.BackColor = '44,44,44'
	$textboxConfirmPassword.BackColor = '44,44,44'
	$textboxConfirmPassword.ForeColor = 'White'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Flat'
	$comboboxDomains.ForeColor = 'White'
	$comboboxDomains.BackColor = "35,35,35"
	
	$comboboxOUTree.FlatStyle = 'Flat'
	$comboboxOUTree.ForeColor = 'White'
	$comboboxOUTree.BackColor = "35,35,35"
	
	$panel2.ForeColor = 'White'
	$Panel2.BackColor = "35,35,35"
	
	$datetimepickerDATE.ForeColor = 'White'
	$datetimepickerDATE.CalendarMonthBackground = "35,35,35"
	
	$datetimepickerTIME.ForeColor = 'White'
	$datetimepickerTIME.BackColor = "35,35,35"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "44,44,44"
	
	$groupboxaccountexpires.ForeColor = 'White'
	$labelUserLogonNameUPN.ForeColor = 'LightCoral'
	$labelUserLogonNamepreWind.ForeColor = 'White'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'White'
	$checkedlistboxGroups.BackColor = "35,35,35"
	$textboxPOSIX.ForeColor = 'White'
	$textboxPOSIX.BackColor = "44,44,44"
	
	$textboxSearchGroups.ForeColor = 'White'
	$textboxSearchGroups.BackColor = "35,35,35"
	
	$comboboxPrimaryGroup.FlatStyle = 'Flat'
	$comboboxPrimaryGroup.ForeColor = 'White'
	$comboboxPrimaryGroup.BackColor = "35,35,35"
	
	$groupboxPrimaryGroup.ForeColor = 'White'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'White'
	$groupboxHomeFolder.ForeColor = 'White'
	$comboboxDriveLetter.FlatStyle = 'Flat'
	$comboboxDriveLetter.ForeColor = 'White'
	$comboboxDriveLetter.BackColor = "35,35,35"
	$textboxhomedirectory.ForeColor = 'White'
	$textboxhomedirectory.BackColor = "35,35,35"
	$textboxprofilepath.ForeColor = 'White'
	$textboxprofilepath.BackColor = "35,35,35"
	$textboxlogonscript.ForeColor = 'White'
	$textboxlogonscript.BackColor = "35,35,35"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "44,44,44"
	$tabcontrolO365.ForeColor = 'White'
	$textboxADSyncServer.ForeColor = 'White'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365userpassword.ForeColor = 'LightCoral'
	$labelO365userconfirmpassword.ForeColor = 'LightCoral'
	$labelO365DisplayName.ForeColor = 'LightCoral'
	$tabpageO365General.BackColor = "44,44,44"
	$groupboxADSync.ForeColor = 'White'
	$textboxADSyncServer.BackColor = "35,35,35"
	$groupboxNoAdSync.ForeColor = 'White'
	$comboboxO365Licenses.FlatStyle = 'Flat'
	$comboboxO365Licenses.BackColor = "35,35,35"
	$comboboxO365Licenses.ForeColor = 'White'
	$panel3.ForeColor = 'White'
	$panel3.BackColor = "35,35,35"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$textboxo365passwordgen.BackColor = "44,44,44"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Lightcoral'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'White'
	$tabpageO365Account.BackColor = "44,44,44"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'LightCoral'
	$panel4.ForeColor = 'White'
	$panel4.BackColor = "35,35,35"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{

			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.BackColor = "44,44,44"
	$tabpageO365Address.ForeColor = 'White'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'White'
	$tabpageO365Groups.BackColor = "44,44,44"
	$labelO365Groups.ForeColor = 'White'
	$labelO365Groups.BackColor = "44,44,44"
	$checkedlistboxDISTROo365groups.ForeColor = 'White'
	$checkedlistboxDISTROo365groups.BackColor = "35,35,35"
	$labelSearch.ForeColor = 'White'
	$textboxO365MailGroups.ForeColor = 'White'
	$textboxO365MailGroups.BackColor = "35,35,35"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'White'
	$labelSecurityGroups.BackColor = "44,44,44"
	$checkedlistboxO365SecurityGroups.ForeColor = 'White'
	$checkedlistboxO365SecurityGroups.BackColor = "35,35,35"
	$labelSearchGroups2.ForeColor = 'White'
	$labelSearchGroups2.BackColor = "44,44,44"
	$textboxSearchO365SecurityGroups.ForeColor = 'White'
	$textboxSearchO365SecurityGroups.BackColor = "35,35,35"
	$tabpagesecurityGroups.BackColor = "44,44,44"
	$tabpagesecurityGroups.ForeColor = 'White'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'White'
	$labelsharedmailboxes.BackColor = "44,44,44"
	$tabpageo365shared.ForeColor = 'White'
	$tabpageo365shared.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.ForeColor = 'White'
	$groupboxSettingsSharedMailbox.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'White'
	$checkedlistboxsharedmailboxes.BackColor = "35,35,35"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "White"
	$tabpageO365Attributes.BackColor = "44,44,44"
	$comboboxO365HidefromGAL.FlatStyle = 'Flat'
	$comboboxO365HidefromGAL.ForeColor = 'White'
	$comboboxO365HidefromGAL.BackColor = "35,35,35"
	
	$comboboxOWA.FlatStyle = 'Flat'
	$comboboxOWA.ForeColor = 'White'
	$comboboxOWA.BackColor = "35,35,35"
	
	$comboboxActiveSync.FlatStyle = 'Flat'
	$comboboxActiveSync.ForeColor = 'White'
	$comboboxActiveSync.BackColor = "35,35,35"
	
	
}

function Set-LightMode
{
	$labelCountryCode.ForeColor = 'Black'
	$contextmenustrip1.BackColor = "WhiteSmoke"
	$contextmenustrip1.ForeColor = 'Black'
	$MainForm.BackColor = "WhiteSmoke"
	$MainForm.ForeColor = 'Black'
	
	$labelLogFile.BackColor = "White"
	$labelLogFile.ForeColor = 'Black'
	
	$labelconnectionstatus.ForeColor = 'FireBrick'
	
	$richtextboxregistry.ForeColor = 'Black'
	$richtextboxregistry.BackColor = "White"
	
	$groupboxStatus.ForeColor = 'Black'
	
	
	$tabpageSettings.BackColor = "White"
	$tabpageSettings.ForeColor = 'Black'
	$groupboxADGroups.ForeColor = 'Black'
	
	$menustrip1.BackColor = "White"
	$menustrip1.ForeColor = 'Black'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "White"
					$_.ForeColor = 'Black'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'Black'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "White"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'Black'
	$copyOffice365UserToolStripMenuItem.BackColor = "White"
	
	
	$groupboxInformation.ForeColor = 'Black'
	$linklabelBradWyatt.LinkColor = '0, 0, 255'
	$linklabelGitHub.LinkColor = '0, 0, 255'
	$labelChangelog.ForeColor = '0, 0, 255'
	
	$console.BackColor = "White"
	$console.ForeColor = 'Black'
	
	$buttonExit.ForeColor = "Black"
	$buttonExit.BackColor = "White"
	
	$buttonCreateUser.ForeColor = "Black"
	$buttonCreateUser.BackColor = "White"
	
	$groupboxADUser.ForeColor = 'Black'
	$groupboxADUser.BackColor = "White"
	
	$groupbox2FA.ForeColor = 'Black'
	$groupboxOffice365User.ForeColor = 'Black'
	
	$tabcontrolUserProperties.ForeColor = 'Black'
	$tabcontrolUserProperties.BackColor = "White"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
		
		
	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
	}
	
	#GENERAL PAGE
	$panel1.BackColor = "MenuBar"
	$labelDisplayName.ForeColor = 'FireBrick'
	$labelPassword.ForeColor = 'FireBrick'
	$labelConfirmPassword.ForeColor = 'FireBrick'
	
	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'Black'
	$buttonGeneratePassword.BackColor = 'White'
	$buttonClear.ForeColor = 'Black'
	$buttonClear.BackColor = 'White'
	
	$textboxPasswordGen.ForeColor = 'Black'
	$textboxPasswordGen.BackColor = 'White'
	$maskedtextboxpassword.ForeColor = 'Black'
	$maskedtextboxpassword.BackColor = 'White'
	$textboxConfirmPassword.BackColor = 'White'
	$textboxConfirmPassword.ForeColor = 'Black'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Standard'
	$comboboxDomains.ForeColor = 'Black'
	$comboboxDomains.BackColor = "Window"
	
	$comboboxOUTree.FlatStyle = 'Standard'
	$comboboxOUTree.ForeColor = 'Black'
	$comboboxOUTree.BackColor = "Window"
	
	$panel2.ForeColor = 'Black'
	$Panel2.BackColor = "MenuBar"
	
	$datetimepickerDATE.ForeColor = 'Black'
	$datetimepickerDATE.CalendarMonthBackground = "White"
	
	$datetimepickerTIME.ForeColor = 'Black'
	$datetimepickerTIME.BackColor = "White"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "White"
	
	$groupboxaccountexpires.ForeColor = 'Black'
	$labelUserLogonNameUPN.ForeColor = 'FireBrick'
	$labelUserLogonNamepreWind.ForeColor = 'Black'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'Black'
	$checkedlistboxGroups.BackColor = "White"
	$textboxPOSIX.ForeColor = 'Black'
	$textboxPOSIX.BackColor = "White"
	
	$textboxSearchGroups.ForeColor = 'Black'
	$textboxSearchGroups.BackColor = "White"
	
	$comboboxPrimaryGroup.FlatStyle = 'Standard'
	$comboboxPrimaryGroup.ForeColor = 'Black'
	$comboboxPrimaryGroup.BackColor = "Window"
	
	$groupboxPrimaryGroup.ForeColor = 'Black'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'Black'
	$groupboxHomeFolder.ForeColor = 'Black'
	$comboboxDriveLetter.FlatStyle = 'Standard'
	$comboboxDriveLetter.ForeColor = 'Black'
	$comboboxDriveLetter.BackColor = "Window"
	$textboxhomedirectory.ForeColor = 'Black'
	$textboxhomedirectory.BackColor = "White"
	$textboxprofilepath.ForeColor = 'Black'
	$textboxprofilepath.BackColor = "White"
	$textboxlogonscript.ForeColor = 'Black'
	$textboxlogonscript.BackColor = "White"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "White"
	$tabcontrolO365.ForeColor = 'Black'
	$textboxADSyncServer.ForeColor = 'Black'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365userpassword.ForeColor = 'FireBrick'
	$labelO365userconfirmpassword.ForeColor = 'FireBrick'
	$labelO365DisplayName.ForeColor = 'FireBrick'
	$tabpageO365General.BackColor = "White"
	$groupboxADSync.ForeColor = 'Black'
	$textboxADSyncServer.BackColor = "White"
	$groupboxNoAdSync.ForeColor = 'Black'
	$comboboxO365Licenses.FlatStyle = 'Standard'
	$comboboxO365Licenses.BackColor = "Window"
	$comboboxO365Licenses.ForeColor = 'Black'
	$panel3.ForeColor = 'Black'
	$panel3.BackColor = "MenuBar"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$textboxo365passwordgen.BackColor = "White"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'Black'
	$tabpageO365Account.BackColor = "White"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'FireBrick'
	$panel4.ForeColor = 'Black'
	$panel4.BackColor = "MenuBar"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.BackColor = "White"
	$tabpageO365Address.ForeColor = 'Black'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'Black'
	$tabpageO365Groups.BackColor = "White"
	$labelO365Groups.ForeColor = 'Black'
	$labelO365Groups.BackColor = "White"
	$checkedlistboxDISTROo365groups.ForeColor = 'Black'
	$checkedlistboxDISTROo365groups.BackColor = "White"
	$labelSearch.ForeColor = 'Black'
	$textboxO365MailGroups.ForeColor = 'Black'
	$textboxO365MailGroups.BackColor = "White"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'Black'
	$labelSecurityGroups.BackColor = "White"
	$checkedlistboxO365SecurityGroups.ForeColor = 'Black'
	$checkedlistboxO365SecurityGroups.BackColor = "White"
	$labelSearchGroups2.ForeColor = 'Black'
	$labelSearchGroups2.BackColor = "White"
	$textboxSearchO365SecurityGroups.ForeColor = 'Black'
	$textboxSearchO365SecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.ForeColor = 'Black'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'Black'
	$labelsharedmailboxes.BackColor = "White"
	$tabpageo365shared.ForeColor = 'Black'
	$tabpageo365shared.BackColor = "White"
	$groupboxSettingsSharedMailbox.ForeColor = 'Black'
	$groupboxSettingsSharedMailbox.BackColor = "White"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'Black'
	$checkedlistboxsharedmailboxes.BackColor = "White"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "Black"
	$tabpageO365Attributes.BackColor = "White"
	$comboboxO365HidefromGAL.FlatStyle = 'Standard'
	$comboboxO365HidefromGAL.ForeColor = 'Black'
	$comboboxO365HidefromGAL.BackColor = "Window"
	
	
	$comboboxOWA.FlatStyle = 'Standard'
	$comboboxOWA.ForeColor = 'Black'
	$comboboxOWA.BackColor = "Window"
	
	$comboboxActiveSync.FlatStyle = 'Standard'
	$comboboxActiveSync.ForeColor = 'Black'
	$comboboxActiveSync.BackColor = "Window"
	
}

function Copy-ADUserAttributes
{
	Add-Logs -text "Setting Description"
	$textboxDescription.Text = $UserTemplate.Description
	Add-Logs -text "Setting Office"
	$textboxoffice.Text = $UserTemplate.Office
	Add-Logs -text "Setting Office Phone"
	$textboxTelephone.Text = $UserTemplate.OfficePhone
	Add-Logs -text "Setting Email Address"
	$textboxEmail.Text = $UserTemplate.EmailAddress
	Add-Logs -text "Setting Home Page"
	$textboxWebPage.Text = $UserTemplate.HomePage
	
	Add-Logs -text "Changing the OU for the user to $((($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)")))"
	$comboboxOUTree.SelectedItem = (($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)"))
	
	Add-Logs -text "Checking Password Never Expires status"
	If ($UserTemplate.PasswordNeverExpires -eq $true)
	{
		Add-Logs -text "Setting Password Never Expires to True"
		$checkboxPasswordNeverExpires.CheckState = 'Checked'
	}
	Else
	{
		Add-Logs -text "Setting Password Never Expires to False"
		$checkboxPasswordNeverExpires.CheckState = 'UnChecked'
	}
	
	Add-Logs -text "Checking Password Change Ability"
	If ($UserTemplate.CannotChangePassword -eq $True)
	{
		Add-Logs -text "Setting User Cannot Change Password to True"
		$checkboxUserCannotChangePass.CheckState -eq 'Checked'
	}
	Else
	{
		Add-Logs -text "Setting User Cannot Change Password to False"
		$checkboxUserCannotChangePass.CheckState -eq 'UnChecked'
	}
	
	Add-Logs -text "Checking Password Change statue"
	If ($UserTemplate.PasswordExpired -eq $True)
	{
		Add-Logs -text "Setting User Must Change Password to True"
		$checkboxUserMustChangePasswo.CheckState -eq 'Checked'
	}
	Else
	{
		Add-Logs -text "Setting User Must Change Password to False"
		$checkboxUserMustChangePasswo.CheckState -eq 'UnChecked'
	}
	Add-Logs -text "Setting Street Address"
	$textboxStreet.Text = $UserTemplate.StreetAddress
	Add-Logs -text "Setting PO Box"
	$textboxPOBox.Text = $UserTemplate.POBox
	Add-Logs -text "Setting City"
	$textboxcity.Text = $UserTemplate.City
	Add-Logs -text "Setting State"
	$textboxstate.Text = $UserTemplate.State
	Add-Logs -text "Setting Postal Code"
	$textboxzipcode.Text = $UserTemplate.PostalCode
	Add-Logs -text "Checking Group Memberships"
	$checkedlistboxGroups.CheckedItems = $null
	($UserTemplate).MemberOf | ForEach-Object {
		$GName = (Get-ADGroup $_).name
		Add-Logs -text "Adding User to the Group: $GName"
		
		$checkedlistboxGroups.SelectedItem = $GName
		$index = $checkedlistboxGroups.SelectedIndex
		$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
	}
	Add-Logs -text "Setting Job Title"
	$textboxjobtitle.text = $UserTemplate.Title
	Add-Logs -text "Setting Department"
	$textboxDepartment.Text = $UserTemplate.Department
	Add-Logs -text "Setting Company"
	$textboxCompany.Text = $UserTemplate.Company
	Add-Logs -text "Setting Profile Path"
	$textboxprofilepath.Text = $UserTemplate.ProfilePath
	Add-Logs -text "Setting Script Path"
	$textboxlogonscript.Text = $UserTemplate.ScriptPath
	Add-Logs -text "Setting Home Drive"
	$comboboxDriveLetter.SelectedItem = $UserTemplate.HomeDrive
	Add-Logs -text "Setting Home Directory"
	$textboxhomedirectory.Text = $UserTemplate.HomeDirectory
	Add-Logs -text "Setting Employee Type"
	$textboxemployeeType.Text = $UserTemplate.EmployeeType
	
	
}

function Copy-O365UserAttributes
{
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force | Out-Null
	
	If ($Licenses2Add.count -gt 0)
	{
		$Global:Licenses2Add = New-Object 'System.Collections.Generic.List[System.Object]'
	}
	
	$CopyUser = $CopyFromO365User_comboboxcopyuser
	add-logs -text "LOG: Copying attributes from $CopyUser"
	
	$UserObj = (Get-Msoluser -All | Where-Object { $_.DisplayName -eq $CopyUser }) | Select-Object -First 1
	
	add-logs -text "LOG: Getting the UPN Domain of $CopyUser"
	$UPNDomain = ($UserObj.userprincipalname).split('@') | Select-Object -Last 1
	add-logs -text "LOG: Setting the UPN Domain to $UPNDomain"
	$comboboxO365Domains.SelectedItem = "@"+$UPNDomain
	
	add-logs -text "LOG: Copying Country Code"
	$comboboxO365countrycode.SelectedText = ($UserObj).CountryCode
	add-logs -text "LOG: Checking MFA status of $CopyUser"
	If ($null -eq $UserObj.StrongAuthenticationRequirements.State)
	{
		add-logs -text "LOG: Setting MFA to False"
		$comboboxMFA.SelectedItem = "False"
	}
	Else
	{
		add-logs -text "LOG: Setting MFA to True"
		$comboboxMFA.SelectedItem = "True"
	}
	add-logs -text "LOG: Copying City"
	$textboxo365city.Text = ($UserObj).city
	add-logs -text "LOG: Copying State"
	$textboxo365state.Text = ($UserObj).state
	add-logs -text "LOG: Copying Street Address"
	$textboxO365street.Text = ($UserObj).streetaddress
	add-logs -text "LOG: Copying Postal Code"
	$textboxo365zip.Text = ($UserObj).postalcode
	
	If (($UserObj).PasswordNeverExpires -eq $true)
	{
		add-logs -text "LOG: Copying Password Never Expires Flag"
		$checkboxO365PasswordNeverExpires.CheckState = 'Checked'
	}
	
	If (($UserObj).BlockCredential -eq $True)
	{
		add-logs -text "LOG: Copying Disabled Account State"
		$checkboxBlockCred.CheckState = 'Checked'
	}
	

	
	add-logs -text "LOG: Getting all licenses assinged to $CopyUser"
	$currentlicenses = ($UserObj).Licenses.accountskuid
	foreach ($currentlicense in $currentlicenses)
	{
		$TenantSku = Get-MSOLAccountSku | Where-Object { $_.AccountSkuID -match $currentlicense }
		
		If ($TenantSku.ActiveUnits -ne $TenantSku.ConsumedUnits)
		{
			$lic = $currentlicense -split ":" | Select-Object -Last 1
			#lookup skus in hashtable and convert to friendly name
			$FriendlyName = $Sku.Item("$Lic")
			If ($null -eq $FriendlyName)
			{
				add-logs -text "LOG: Copying The License: $_"
				$obj = [PSCustomObject]@{
					'Name' = $lic
				}
				$Licenses2Add.Add($obj)
			}
			Else
			{
				add-logs -text "LOG: Copying The License: $FriendlyName"
				$obj = [PSCustomObject]@{
					'Name' = $FriendlyName
				}
				
				$Licenses2Add.Add($obj)
				
			}
		}
	}
	
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	Toogle-LicenseStatus
	
	add-logs -text "LOG: Checking Mail Group Membership for $CopyUser"
	Get-MsolGroup -All | Where-Object { ($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") } | ForEach-Object {
		If (Get-MsolGroupMember -All -GroupObjectId $_.ObjectID | Where-Object { $_.EmailAddress -contains ($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:")})
		{
				If ($checkedlistboxDISTROo365groups.Items -contains $_.DisplayName)
				{
					$_.DisplayName | Out-File $CacheDistroGroupsFile -Append -Force -ErrorAction SilentlyContinue
					add-logs -text "LOG: Adding User to the Distribution Group: $($_.DisplayName)"
					$checkedlistboxDISTROo365groups.SelectedItem = $($_.DisplayName)
					$index = $checkedlistboxDISTROo365groups.SelectedIndex
					$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
				}
			}
		
		
	}
	Add-Logs -text "LOG: Getting all Security Groups $CopyUser is a Member of"
	Get-MsolGroup -All | Where-Object { $_.GroupType -eq "Security" } | ForEach-Object {
		If (Get-MsolGroupMember -All -GroupObjectId $_.ObjectID | Where-Object { $_.EmailAddress -contains ($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:") })
		{
				If ($checkedlistboxO365SecurityGroups.Items -contains $_.DisplayName)
				{
					$_.DisplayName | Out-File $CacheSecurityGroupsFile -Append -Force -ErrorAction SilentlyContinue
				add-logs -text "LOG: Adding User to the Security Group: $($_.DisplayName)"
					$checkedlistboxO365SecurityGroups.SelectedItem = $($_.DisplayName)
					$index = $checkedlistboxO365SecurityGroups.SelectedIndex
					$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
				}
			}
			
			
		}
	
	
	
	$UserObjMailbox = Get-Mailbox (($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:"))
	Add-Logs -text "Gettings GAL status for User"
	If ($UserObjMailbox.HiddenFromAddressListsEnabled -eq $true)
	{
		Add-Logs -text "Hiding User from GAL: True"
		$comboboxO365HidefromGAL.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "Hiding User from GAL: False"
		$comboboxO365HidefromGAL.SelectedItem = "False"
	}
	
	Add-Logs -text "Getting Outlook on the Web (OWA) Status for user"
	If (((Get-CASMailbox (($UserObjMailbox).GUID).Guid).OWAEnabled) -eq $True)
	{
		Add-Logs -text "Outlook on the Web (OWA): True"
		$comboboxOWA.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "Outlook on the Web (OWA): False"
		$comboboxOWA.SelectedItem = "False"
	}
	
	Add-Logs -text "Getting ActiveSync Status for user"
	If (((Get-CASMailbox (($UserObjMailbox).GUID).Guid).ActiveSync) -eq $True)
	{
		Add-Logs -text "ActiveSync: True"
		$comboboxActiveSync.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "ActiveSync: False"
		$comboboxActiveSync.SelectedItem = "False"
	}
	
	add-logs -text "LOG: Done"
	
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force | Out-Null
	
}

function License-MUCO365User
{
	$licenseforuser = @()
	#$Lookup = @()
	Add-Logs -text "LOG: Getting License selected for user"
	$Licenses = $Licenses2Add
	Add-Logs "LOG: We will be adding the licenses, $Licenses2Add"
	Add-Logs -text "LOG: Getting AccountSKU Domain"
	$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
	foreach ($License in $licenses)
	{
		Add-Logs -text "LOG: Looking up SKU for license"
		$Lookup = $Sku.keys | Where-Object { $Sku["$_"] -eq "$license" }
		Add-Logs "LOG: License lookup is $Lookup"
		If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
		{
			Add-Logs -text "LOG: No SKU found during lookup"
			$BackSKU = "$LicenseDomain$License"
			Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
			$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
			If ($CheckSku -ne $Null)
			{
				Add-Logs -text "LOG: Assigning $BackSKU to User"
				$licenseforuser += $CheckSku
			}
			Else
			{
				Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
				$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
				Add-Logs -text "WARN: Assigning $ReLic to user instead"
				$licenseforuser += (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
			}
		}
		
		Else
		{
			Add-Logs -text "LOG: Found the SKU for the license"
			$Lookup | ForEach-Object {
				Add-Logs -text "LOG: Checking License $_"
				$BackSKU = "$LicenseDomain$_"
				Add-Logs -text "LOG: Looking up $BackSKU in tenant"
				Add-Logs -text "LOG: Verifying $BackSKU in tenant"
				$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
				If ($CheckSku -ne $Null)
				{
					Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
					$licenseforuser += $CheckSku
				}
				Else
				{
					Add-Logs -text "WARN: $BackSKU was not found in tenant"
				}
			}
		}
		Add-Logs "LOG: OUTPUTTING $licenseforuser"
		$licenseforuser | Out-File "$env:TEMP\MUClicenseforuser.txt" -Force
		
	}
}

function New-MUCUser
{
		
	add-logs -text 'LOG: Converting password to SecureString'
	add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
	$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
	#Get disable account boolean
	add-logs -text 'LOG: Checking if account is disabled or enabled'
	$disabledaccount = ($checkboxAccountIsDisabled.checked)
	#If account should be disabled
	If ($disabledaccount -eq $true)
	{
		add-logs -text 'LOG: Account is disabled'
		add-logs -text 'LOG: Creating user'
		Try
		{
			New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
		}
		Catch
		{
			add-logs -text "WARN: $_"
			$InfoMessage = $_
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		$User = Get-ADUser -Filter * -Properties * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
		add-logs -text "LOG: User has been created"
		
		#Check if Account is set to expire at a specific time
		Add-Logs -text "LOG: Checking if User account expiration is set"
		If ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text "LOG: User account expiration is set"
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			Add-Logs -text "LOG: Done"
		}
		Else
		{
			Add-Logs -text "LOG: User account expiration not set"
		}
		
		$Proxys = @()
		add-logs -text "LOG: Getting user proxy addresses to set"
		$Proxys += $textboxproxyaddress.Lines
		If ($Proxys -ne $Null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text "LOG: Adding proxy addresses"
				add-logs -text "LOG: Getting user proxy addresses to set"
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
			}
		}
		Else
		{
			add-logs -text "LOG: No proxys were found to add"
		}
		add-logs -text "LOG: Done with Proxys"
		
		
		
		add-logs -text "LOG: Getting user employeeType attribute to set"
		If ($textboxemployeeType.text -ne "")
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
		}
		Else
		{
			add-logs -text "LOG: No employeeType to add"
		}
		add-logs -text "LOG: Done with employeeType"
		
		add-logs -text "LOG: Getting user employeeNumber attribute to set"
		If ($textboxemployeenumber.text -ne "")
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			Set-ADUser $User -EmployeeNumber $textboxemployeenumber.text 
		}
		Else
		{
			add-logs -text "LOG: No employeeNumber to add"
		}
		add-logs -text "LOG: Done with employeeNumber"
		
		add-logs -text "LOG: Getting user employeeID attribute to set"
		If ($textboxEmployeeID.Text -ne "")
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			Set-ADUser $User -EmployeeID $textboxEmployeeID.text
		}
		Else
		{
			add-logs -text "LOG: No employeeID to add"
		}
		add-logs -text "LOG: Done with employeeID"
		
		#Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		$groups = $checkedlistboxGroups.CheckedItems
		If ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $Group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
				Add-ADGroupMember -Identity $Group -Members $User
			}
		}
		Else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text "LOG: Done"
		
		Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
		If ($comboboxPrimaryGroup.Text -eq "Domain Users")
		{
			Add-Logs -text "LOG: Primary Group set to Domain Users"
		}
		Else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
		}
		Add-Logs -text "LOG: Done"
		
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		If ($comboboxOUTree.SelectedItem -ne $null)
		{
			
			add-logs -text 'LOG: Specific OU specified, moving user'
			$CanocicalName = $comboboxOUTree.SelectedItem
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$User | Move-ADObject -TargetPath $OUTOMove
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
	Else
	{
		add-logs -text 'LOG: Account is enabled'
		add-logs -text 'LOG: Creating user'
		Try
		{
			New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
		}
		Catch
		{
			add-logs -text "WARN: $_"
			$InfoMessage = $_
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		$User = Get-ADUser -Filter * -Properties * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
		add-logs -text "LOG: User has been created"
		
		#Check if Account is set to expire at a specific time
		Add-Logs -text "LOG: Checking if User account expiration is set"
		If ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text "LOG: User account expiration is set"
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			Add-Logs -text "LOG: Done"
		}
		Else
		{
			Add-Logs -text "LOG: User account expiration not set"
		}
		
		$Proxys = @()
		add-logs -text "LOG: Getting user proxy addresses to set"
		$Proxys += $textboxproxyaddress.Lines
		If ($Proxys -ne $Null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text "LOG: Adding proxy addresses"
				add-logs -text "LOG: Getting user proxy addresses to set"
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
			}
		}
		Else
		{
			add-logs -text "LOG: No proxys were found to add"
		}
		add-logs -text "LOG: Done with Proxys"
		
		add-logs -text "LOG: Getting user employeeType attribute to set"
		If ($textboxemployeeType.text -ne "")
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
		}
		Else
		{
			add-logs -text "LOG: No employeeType to add"
		}
		add-logs -text "LOG: Done with employeeType"
		
		add-logs -text "LOG: Getting user employeeNumber attribute to set"
		If ($textboxemployeenumber.text -ne "")
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			Set-ADUser $User -EmployeeNumber $textboxemployeenumber.text
		}
		Else
		{
			add-logs -text "LOG: No employeeNumber to add"
		}
		add-logs -text "LOG: Done with employeeNumber"
		
		add-logs -text "LOG: Getting user employeeID attribute to set"
		If ($textboxEmployeeID.Text -ne "")
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			Set-ADUser $User -EmployeeID $textboxEmployeeID.text
		}
		Else
		{
			add-logs -text "LOG: No employeeID to add"
		}
		add-logs -text "LOG: Done with employeeID"
		
		#Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		$groups = $checkedlistboxGroups.CheckedItems
		If ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $Group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
				Add-ADGroupMember -Identity $Group -Members $User
			}
		}
		Else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text "LOG: Done"
		
		Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
		If ($comboboxPrimaryGroup.Text -eq "Domain Users")
		{
			Add-Logs -text "LOG: Primary Group set to Domain Users"
		}
		Else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
		}
		Add-Logs -text "LOG: Done"
		
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		If ($comboboxOUTree.SelectedItem -ne $null)
		{
			
			add-logs -text 'LOG: Specific OU specified, moving user'
			$CanocicalName = $comboboxOUTree.SelectedItem
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$User | Move-ADObject -TargetPath $OUTOMove
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
}

function New-MUCO365User
{
	add-logs -text 'LOG: Checking DirSync option'
	#If DirSync is enabled
	If ($checkboxRunADSync.CheckState -eq 'Checked')
	{
		If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$SyncServer = $textboxADSyncServer.text
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text "LOG: Running DirSync on $SyncServer"
			add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
			Try
			{
				Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text "WARN: ADSync Server text box is empty"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
		}
	}
	#If DirSync is not enabled
	Else
	{
		add-logs -text "LOG: User is not being AD-Synced"
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($Licenses2Add) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			
			#Check to see if the user is being enabled upon creation or disabled
			
			#User is going to be disabled
			add-logs -text 'LOG: Checking enabled status of user'
			If ($checkboxBlockCred.Checked -eq $true)
			{
				#If user is going to be disabled
				add-logs -text 'LOG: User is Disabled'
				add-logs -text 'LOG: Creating user'
				If (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
				{
					add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
					$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				Else
				{
					If ($Licenses2Add -ne $null)
					{
						License-MUCO365User
					}
					Try
					{
						add-logs -text 'LOG: Creating User'
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						add-logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Adding Licenses'
						$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
						$licenseforuser | ForEach-Object {
							Add-Logs -text "LOG: Adding $_"
							
							Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
						}
						Add-Logs -text 'LOG: Done'
						
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					
					#Find if user should be added to any Security groups
					add-logs -text 'LOG: Getting checked Security groups'
					$groups = $checkedlistboxO365SecurityGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Security Groups found'
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $DN to $Group"
							$GroupGuid = ((get-msolgroup -All | where-object { $_.displayname -eq $Group }).ObjectID).GUID
							$UserGUID = (($User).ObjectID).GUID
							add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
							Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
						}
					}
					Else
					{
						add-logs -text 'LOG: No Security Groups checked'
					}
					Add-Logs -text 'LOG: Done with Security Groups'
					
					#Check user licenses, if licensed create and wait for mailbox
					Add-Logs -text 'LOG: Checking if license was applied to the user'
					If ($Licenses2Add -ne $Null)
					{
						Add-Logs -text 'LOG: License is applied to the new user'
						
						$ts = New-TimeSpan -Minutes 8
						
						$TermLoop = ((get-date) + $ts).ToString("HH:mm")
						Do
						{
							$DateNow = (Get-date).ToString("HH:mm")
							Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: 20 seconds remaining'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: 10 seconds remaining'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: Done'
							
							Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
						}
						Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
						
						add-logs -text 'LOG: Checking E-Mail address field for entered data'
						If ($textboxO365EmailAddress.Text -like "*@*")
						{
							add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
							If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
							{
								add-logs -text 'LOG: Email is different from UPN, proceeding.'
								
								Try
								{
									$PrimEmail = $textboxO365EmailAddress.Text
									add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
									$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
									$DN = $Mailbox.DisplayName
									add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
									Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
									add-logs -text "LOG: Done"
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
							Else
							{
								add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
							}
							
						}
						Else
						{
							add-logs -text "LOG: No E-Mail entered"
						}
						
						#Add any email aliases
						add-logs -text 'LOG: Checking Alias Addresses field for entered data'
						If ($textboxo365proxyaddresses.Text -ne $null)
						{
							add-logs -text 'LOG: Found Alias Addresses to add'
							$Proxys = $textboxo365proxyaddresses.Lines
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							$DN = $Mailbox.DisplayName
							foreach ($Proxy in $Proxys)
							{
								add-logs -text "LOG: Adding $Proxy for $DN"
								Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
								add-logs -text 'LOG: Done'
							}
						}
						Else
						{
							add-logs -text 'LOG: No Alias Addresses found'
						}
						add-logs -text 'LOG: Done with Alias Addresses'
						
						#Find if user should be added to any mail groups
						add-logs -text 'LOG: Getting checked mail groups'
						$groups = $checkedlistboxDISTROo365groups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Mail Groups found'
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
								If ((Get-UnifiedGroup).displayName -contains $group)
								{
									Add-Logs -text "LOG: $group is an Office 365 group"
									Add-Logs -text "LOG: Adding $DN to $Group"
									Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
									Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
									Add-Logs -text "LOG: Done"
								}
								Else
								{
									Add-Logs -text "LOG: $group is not an Office 365 group"
									
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
						}
						Else
						{
							add-logs -text 'LOG: No Mail Groups checked'
						}
						Add-Logs -text 'LOG: Done with Mail Groups'
						
						#Shared Mailboxes
						Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
						$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
						#If there are shared mailboxes to add the user to (full access rights)
						If ($SharedMailboxes -ne $null)
						{
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									$Automap = $comboboxsharedmailboxautomap.Text
									Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
									If ($Automap -eq "False")
									{
										Add-Logs -text "LOG: AutoMapping set to False"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
									}
									Else
									{
										Add-Logs -text "LOG: AutoMapping set to True"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
									}
								}
							}
							ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
									Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
									Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
									Add-Logs -text "LOG: Done"
								}
								
							}
							Else
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
									Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
									Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
									Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
									Add-Logs -text 'LOG: Done'
								}
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No Shared Mailboxes selected'
						}
						Add-Logs -text 'LOG: Done with Shared Mailboxes'
						
						Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
						#Hide from GAL
						If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
						{
							Add-Logs -text 'LOG: Hide from global address list is set to True'
							Add-Logs -text 'LOG: Hiding mailbox from global address list'
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							If ($null -ne $mailbox)
							{
								Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
							}
							Else
							{
								Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
								$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
								$InfoTitle = "Warning"
								Show-MessageBox_psf
							}
						}
						Else
						{
							Add-Logs -text 'LOG: Hide from global address list is set to False'
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No license is being added for the new user'
						Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
						Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
						Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
					}
					
					#If MFA is set to TRUE then enable MFA for the user
					Add-Logs -text 'LOG: Checking MFA status for the user'
					If ($comboboxMFA.Selecteditem -eq "True")
					{
						$UserMFA = ($User).UserPrincipalName
						Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
						Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
						$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
						Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
						$Auth.RelyingParty = "*"
						Add-Logs -text 'CMD: $MFA = @($Auth)'
						$MFA = @($Auth)
						Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
						Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
						Add-Logs -text 'LOG: Done'
					}
					Else
					{
						Add-Logs -text 'LOG: MFA is set to False'
					}
					Add-Logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Checking OWA'
					If ($comboboxOWA.SelectedItem -eq 'False')
					{
						Add-Logs -text 'LOG: OWA Disabled'
						Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
						Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
					}
					Else
					{
						Add-Logs -text 'LOG: OWA Enabled'
						
					}
					
					Add-Logs -text 'LOG: Checking ActiveSync'
					If ($comboboxActiveSync.SelectedItem -eq 'False')
					{
						Add-Logs -text 'LOG: ActiveSync Disabled'
						Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false'
						Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false
					}
					Else
					{
						Add-Logs -text 'LOG: ActiveSync Enabled'
						
					}
					
					Add-Logs -text 'LOG: Done'
					
				}
			}
			Else
			{
				#User is going to be enabled upon creation
				add-logs -text 'LOG: User is Enabled'
				add-logs -text 'LOG: Creating user'
				If (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
				{
					add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
					$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				Else
				{
					If ($Licenses2Add -ne $null)
					{
						License-MUCO365User
					}
					Try
					{
						add-logs -text 'LOG: Creating User'
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						add-logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Adding Licenses'
						$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
						$licenseforuser | ForEach-Object {
							Add-Logs -text "LOG: Adding $_"
							
							Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
						}
						Add-Logs -text 'LOG: Done'
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					#Find if user should be added to any Security groups
					add-logs -text 'LOG: Getting checked Security groups'
					$groups = $checkedlistboxO365SecurityGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Security Groups found'
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $DN to $Group"
							$GroupGuid = ((get-msolgroup -All | where-object { $_.displayname -eq $Group }).ObjectID).GUID
							$UserGUID = (($User).ObjectID).GUID
							add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
							Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
						}
					}
					Else
					{
						add-logs -text 'LOG: No Security Groups checked'
					}
					Add-Logs -text 'LOG: Done with Security Groups'
					
					#Check user licenses, if licensed create and wait for mailbox
					Add-Logs -text 'LOG: Checking if license was applied to the user'
					If ($Licenses2Add -ne $Null)
					{
						Add-Logs -text 'LOG: License is applied to the new user'
						
						$ts = New-TimeSpan -Minutes 8
						
						$TermLoop = ((get-date) + $ts).ToString("HH:mm")
						Do
						{
							$DateNow = (Get-date).ToString("HH:mm")
							Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: 20 seconds remaining'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: 10 seconds remaining'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: Done'
							
							Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
						}
						Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
						
						add-logs -text 'LOG: Checking E-Mail address field for entered data'
						If ($textboxO365EmailAddress.Text -like "*@*")
						{
							add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
							If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
							{
								add-logs -text 'LOG: Email is different from UPN, proceeding.'
								
								Try
								{
									$PrimEmail = $textboxO365EmailAddress.Text
									add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
									$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
									$DN = $Mailbox.DisplayName
									add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
									Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
									add-logs -text "LOG: Done"
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
							Else
							{
								add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
							}
							
						}
						Else
						{
							add-logs -text "LOG: No E-Mail entered"
						}
						
						#Add any email aliases
						add-logs -text 'LOG: Checking Alias Addresses field for entered data'
						If ($textboxo365proxyaddresses.Text -ne $null)
						{
							add-logs -text 'LOG: Found Alias Addresses to add'
							$Proxys = $textboxo365proxyaddresses.Lines
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							$DN = $Mailbox.DisplayName
							foreach ($Proxy in $Proxys)
							{
								add-logs -text "LOG: Adding $Proxy for $DN"
								Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
								add-logs -text 'LOG: Done'
							}
						}
						Else
						{
							add-logs -text 'LOG: No Alias Addresses found'
						}
						add-logs -text 'LOG: Done with Alias Addresses'
						
						#Find if user should be added to any mail groups
						add-logs -text 'LOG: Getting checked mail groups'
						$groups = $checkedlistboxDISTROo365groups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Mail Groups found'
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
								If ((Get-UnifiedGroup).displayName -contains $group)
								{
									Add-Logs -text "LOG: $group is an Office 365 group"
									Add-Logs -text "LOG: Adding $DN to $Group"
									Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
									Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
									Add-Logs -text "LOG: Done"
								}
								Else
								{
									Add-Logs -text "LOG: $group is not an Office 365 group"
									
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
						}
						Else
						{
							add-logs -text 'LOG: No Mail Groups checked'
						}
						Add-Logs -text 'LOG: Done with Mail Groups'
						
						#Shared Mailboxes
						Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
						$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
						#If there are shared mailboxes to add the user to (full access rights)
						If ($SharedMailboxes -ne $null)
						{
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									$Automap = $comboboxsharedmailboxautomap.Text
									Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
									If ($Automap -eq "False")
									{
										Add-Logs -text "LOG: AutoMapping set to False"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
									}
									Else
									{
										Add-Logs -text "LOG: AutoMapping set to True"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
									}
								}
							}
							ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
									Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
									Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
									Add-Logs -text "LOG: Done"
								}
								
							}
							Else
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
									Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
									Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
									Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
									Add-Logs -text 'LOG: Done'
								}
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No Shared Mailboxes selected'
						}
						Add-Logs -text 'LOG: Done with Shared Mailboxes'
						
						Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
						#Hide from GAL
						If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
						{
							Add-Logs -text 'LOG: Hide from global address list is set to True'
							Add-Logs -text 'LOG: Hiding mailbox from global address list'
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							If ($null -ne $mailbox)
							{
								Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
							}
							Else
							{
								Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
								$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
								$InfoTitle = "Warning"
								Show-MessageBox_psf
							}
						}
						Else
						{
							Add-Logs -text 'LOG: Hide from global address list is set to False'
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No license is being added for the new user'
						Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
						Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
						Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
					}
					
					#If MFA is set to TRUE then enable MFA for the user
					Add-Logs -text 'LOG: Checking MFA status for the user'
					If ($comboboxMFA.Selecteditem -eq "True")
					{
						$UserMFA = ($User).UserPrincipalName
						Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
						Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
						$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
						Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
						$Auth.RelyingParty = "*"
						Add-Logs -text 'CMD: $MFA = @($Auth)'
						$MFA = @($Auth)
						Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
						Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
						Add-Logs -text 'LOG: Done'
					}
					Else
					{
						Add-Logs -text 'LOG: MFA is set to False'
					}
					Add-Logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Checking OWA'
					If ($comboboxOWA.SelectedItem -eq 'False')
					{
						Add-Logs -text 'LOG: OWA Disabled'
						Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
						Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
					}
					Else
					{
						Add-Logs -text 'LOG: OWA Enabled'
						
					}
					
					Add-Logs -text 'LOG: Checking ActiveSync'
					If ($comboboxActiveSync.SelectedItem -eq 'False')
					{
						Add-Logs -text 'LOG: ActiveSync Disabled'
						Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false'
						Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false
					}
					Else
					{
						Add-Logs -text 'LOG: ActiveSync Enabled'
						
					}
					
					Add-Logs -text 'LOG: Done'
				}
			}
		}
	}
}

function Update-O365DisplayNameTextBox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365DisplayName -ErrorAction SilentlyContinue).UserFormatO365DisplayName
		#Create an array that we will use for formatting
		$O365DisplayNameFormatString = @()
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%Firstname% %LastName%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatO365DisplayName -Value "%FirstName% %LastName%" -Force | Out-Null
		}
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$O365DisplayNameFormatString += $textboxO365FirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$O365DisplayNameFormatString += $textboxO365LastName.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$O365DisplayNameFormatString += $space
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$O365DisplayNameFormatString += $textboxUserLogonName.text
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$O365DisplayNameFormatString += $textboxO365EmailAddress.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$O365DisplayNameFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$O365DisplayNameFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			Else
			{
				$O365DisplayNameFormatString += $_
			}
			$textboxO365DisplayName.Text = [String]::Join('', $O365DisplayNameFormatString)
		}
		
	}
}

function Update-O365EmailTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365Email -ErrorAction SilentlyContinue).UserFormatO365Email
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%FirstLetterFirstName%%LastName%%UserPrincipalNameDomain%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatO365Email -Value $config -Force | Out-Null
		}
		#Create an array that we will use for formatting
		$O365EmailFormatString = @()
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$O365EmailFormatString += $textboxO365FirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$O365EmailFormatString += $textboxO365LastName.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$O365EmailFormatString += $space
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$O365EmailFormatString += $textboxUserLogonName.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$O365EmailFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$O365EmailFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "UserPrincipalNameDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			ElseIf ($_ -eq "UPNDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			Else
			{
				$O365EmailFormatString += $_
			}
			$textboxO365EmailAddress.Text = [String]::Join('', $O365EmailFormatString)
		}
		
	}
}

function Update-O365UserPrincipalNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365UserPrincipalName -ErrorAction SilentlyContinue).UserFormatO365UserPrincipalName
		#Create an array that we will use for formatting
		$O365UserPrincipalNameFormatString = @()
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365FirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365LastName.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$O365UserPrincipalNameFormatString += $space
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$O365UserPrincipalNameFormatString += $textboxO365EmailAddress.text
			}
			Else
			{
				$O365UserPrincipalNameFormatString += $_
			}
			$textboxO365UPN.Text = [String]::Join('', $O365UserPrincipalNameFormatString)
		}
		
	}
}

#endregion

$MainForm_Load = {
	
	
	
	$MFALogin = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name MFALogin -ErrorAction SilentlyContinue).MFALogin
	If ($MFALogin -eq 1)
	{
		$radiobuttonMFALogin.Checked = $true
	}
	Else
	{
		$radiobuttonNonMFALogin.Checked = $true
	}
	

	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		#Set-LightMode
		
	}
	
	
}

$MainForm_DuringShow = {
	
	Import-Module ActiveDirectory -ErrorAction SilentlyContinue
	Import-Module ADSync -ErrorAction SilentlyContinue
	
	#DEBUG
	#$tabcontrolUserProperties.Enabled = $true
	#$groupboxNoAdSync.Enabled = $true
	
	$copyActiveDirectoryUserToolStripMenuItem.Enabled = $false
	$copyOffice365UserToolStripMenuItem.Enabled = $false
	
	$textboxADSyncServer.Enabled = $false
	
	$datetimepickerDATE.Refresh()
	
	$radiobuttonNever.Checked = $true
	$datetimepickerDATE.Enabled = $false
	$datetimepickerTIME.Enabled = $false
	
	$datetimepickerTIME.Text = "05:00 PM"
	
	$MainForm.MaximizeBox = $false
	
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1
	#DEBUG
	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $false

	#Disable the Office 365 license drop down until we connect to MSOnline
	#$comboboxO365Licenses.Enabled = $False
	$comboboxO365Licenses.Text = "Please connect to Office 365 to assign a license"
	
	#DEBUG
	$tabcontrolUserProperties.Enabled = $false
	
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	
	$comboboxO365HidefromGAL.SelectedItem = "False"
	
	$labelTimeLeft.Text = ""
	
	$global:ExternalLog = "$env:TEMP\MUC.txt"
	$labelLogFile.Text = $global:ExternalLog
	
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items "Domain Users"
	$comboboxPrimaryGroup.SelectedItem = "Domain Users"
	
	$AlwaysADCreate = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysADCreate -ErrorAction SilentlyContinue).AlwaysADCreate
	If ($AlwaysADCreate -eq 1)
	{
		$checkboxCreateAnActiveDirect.Checked = $true
	}
	
	$AlwaysO365Create = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysO365Create -ErrorAction SilentlyContinue).AlwaysO365Create
	If ($AlwaysO365Create -eq 1)
	{
		$checkboxconfigo365user.Checked = $true
	}
	
	$comboboxActiveSync.SelectedItem = "True"
}

$resetFormToolStripMenuItem_Click = {
	Reset-Form
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateAnActiveDirect.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		Try
		{
			New-MUCUser
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		Try
		{
			New-MUCO365User
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
		
		#### ACTIVE DIRECTORY USER CREATION PORTION ####
		
		add-logs -text 'LOG: Only an Active Directory user is being created'
		Try
		{
			New-MUCUser
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
		
		
		#### OFFICE 365 USER CREATION PORTION ####
		
		
		add-logs -text 'LOG: Only an Office 365 User is being created'
		Try
		{
			New-MUCO365User
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
	
	$ResetForm = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ResetForm -ErrorAction SilentlyContinue).ResetForm
	If ($ResetForm -eq 1)
	{
		Reset-Form
	}
}


$textboxDisplayName_TextChanged = {
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'White'
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'Black'
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'Firebrick'
		}
		
	}
	
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxDisplayName_ChangeFocus = {
	$ADDisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDisplayName -ErrorAction SilentlyContinue).ADDisplayName
	If ($ADDisplayName -eq 1)
	{
		$words = $textboxDisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxLastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxLastName_ChangeFocus = {
	$ADLastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADLastName -ErrorAction SilentlyContinue).ADLastName
	If ($ADLastName -eq 1)
	{
		$words = $textboxLastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxLastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxFirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
	
	
		
	
}

$textboxFirstName_ChangeFocus = {
	$ADFirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADFirstName -ErrorAction SilentlyContinue).ADFirstName
	If ($ADFirstName -eq 1)
	{
		$words = $textboxFirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxFirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxInitials_ChangeFocus = {
	$ADInitials = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADInitials -ErrorAction SilentlyContinue).ADInitials
	If ($ADInitials -eq 1)
	{
		$words = $textboxInitials.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxInitials.Text = $TextInfo.ToTitleCase($words)
	}
}


$buttonGeneratePassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword
		$textboxPasswordGen.Text = $Password
		$maskedtextboxpassword.Text = $Password
		$textboxConfirmPassword.text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxpassword.Text = $textboxPasswordGen.Text
		$textboxConfirmPassword.text = $textboxPasswordGen.Text
	}
	
}

$textboxConfirmPassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'White'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Black'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Firebrick'
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}

			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateAnActiveDirect.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = $textboxUserLogonName.text
		$comboboxO365Domains.SelectedItem = $comboboxDomains.SelectedItem
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'White'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Black'
		}
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Firebrick'
		}
		
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonNonMFALogin.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: $((Get-ChildItem -Path $($env:LOCALAPPDATA+"\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse ).FullName|?{$_ -notmatch "_none_"}|select -First 1)'
		$Modules = $((Get-ChildItem -Path $($env:LOCALAPPDATA + "\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse).FullName | Where-Object{ $_ -notmatch "_none_" } | Select-Object -First 1)
		If ($Modules -eq $Null)
		{
			add-logs -text 'WARN: MFA Module was not found'
			$InfoMessage = "Exchange Online MFA Module was not found, please make sure you have downloaded and installed it from your tenant https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/mfa-connect-to-exchange-online-powershell?view=exchange-ps"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		$EXOSession = New-ExoPSSession
		Import-PSSession $EXOSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'MediumSeaGreen'
		}
		Else
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'Green'
		}
		
		
		$Global:O365_Pre_Req++
		#Create just an AD User
		If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD nad O365 User (w/ ADSync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD And O365 User (no Sync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 User no adsync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 user with ADSync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$buttonConnectToOffice365.ForeColor = 'White'
		}
		Else
		{
			$buttonConnectToOffice365.ForeColor = 'Black'
		}
		
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		#add-logs -text 'LOG: Enabling Licenses combobox'
		#add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		#$comboboxO365Licenses.Enabled = $True
		#add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = ""
		
		#Cache licenses to use in other forms
		$LicenseArray | Out-File "$env:TEMP\MUCLicenses.txt" -Force -ErrorAction SilentlyContinue
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		#add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		#Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = "Click to select an Office 365 license"

		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup -All | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$MailGroups = (Get-MsolGroup -All | Where-Object { ($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataMailGroups = $MailGroups
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $MailGroups
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup -All | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$SecurityGroups = (Get-MsolGroup -All | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataSecurityGroups = $SecurityGroups
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $SecurityGroups
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		$comboboxO365HidefromGAL.SelectedItem = "False"
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword -O365
		$textboxo365passwordgen.Text = $Password
		$maskedtextboxo365password.Text = $Password
		$textboxo365confirmpassword.Text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
		$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
		add-logs -text 'LOG: Done'
	}

	
	
}


$checkboxRunADSync_CheckedChanged = {
	If ($checkboxRunADSync.Checked -eq $True)
	{
		$groupboxNoAdSync.Enabled = $false
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
		
		$textboxADSyncServer.Enabled = $true
		
	}
	elseif ($checkboxRunADSync.Checked -eq $false)
	{
		$groupboxNoAdSync.Enabled = $True
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
		
		$textboxADSyncServer.Enabled = $false
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$buttonExit_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged = {
	If ((($textboxO365LastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	Else
	{
		Update-O365EmailTextbox
		Update-O365DisplayNameTextBox
		Update-O365UserPrincipalNameTextbox
	}
}
$textboxO365LastName_FocusChanged = {
	$O365LastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365LastName -ErrorAction SilentlyContinue).O365LastName
	If ($O365LastName -eq 1)
	{
		$words = $textboxO365LastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365LastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365FirstName_TextChanged = {
	If ((($textboxO365FirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	Else
	{
		Update-O365EmailTextbox
		Update-O365DisplayNameTextBox
		Update-O365UserPrincipalNameTextbox
	}
	
}

$textboxO365FirstName_FocusChanged = {
	$O365FirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365FirstName -ErrorAction SilentlyContinue).O365FirstName
	If ($O365FirstName -eq 1)
	{
		$words = $textboxO365FirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365FirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365Initials_TextChanged = {
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged = {
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
	If ($Global:ExternalLog -ne $null)
	{
		$console.Text | Out-File $Global:ExternalLog
	}
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	if ($checkboxconfigo365user.CheckState -eq 'checked')
	{
		$tabpageOffice365.Enabled = $true
	}
	Else
	{
		$tabpageOffice365.Enabled = $false
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		If ($null -ne (Get-Module -ListAvailable -Name "ADSync"))
		{
			add-logs -text 'LOG: DirSync found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			$groupboxNoAdSync.Enabled = $true
			$comboboxOWA.SelectedItem = "True"
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Enabling ADSync CheckBox'
		$checkboxRunADSync.Enabled = $True
		add-logs -text 'LOG: Enabling No ADSync Groupbox'
		$groupboxNoAdSync.Enabled = $true
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateAnActiveDirect_CheckedChanged = {
	
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateAnActiveDirect.Checked -eq $true))
	{
		If ($Null -ne (Get-Module -ListAvailable -Name "ActiveDirectory"))
		{
			add-logs -text 'LOG: Enabling AD User creation'
			$tabcontrolUserProperties.Enabled = $true
			add-logs -text 'LOG: Done'
			
			Add-Logs -text "Enabling Copy AD User Menu Item"
			$copyActiveDirectoryUserToolStripMenuItem.Enabled = $true
			add-logs -text 'LOG: Done'
			
			
			add-logs -text 'LOG: Loading Organizational Unit Tree'
			add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
			$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName
			If ($null -eq $OUTree)
			{
				$InfoMessage = 'Could not load Organizational Unit structure'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxOUTree.Enabled = $false
			}
			Else
			{
				add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
				Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
				add-logs -text 'LOG: Done'
				$comboboxOUTree.Enabled = $true
			}
			
			add-logs -text 'LOG: Getting Active Directory Groups'
			add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
			$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
			$Global:OriginalData = $Groups
			If ($null -eq $Groups)
			{
				add-logs -text 'WARN: No Active Directory Groups were found'
				$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
				Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting NetBIOS Name'
			add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
			$Netbiosname = (Get-ADDomain).NetBIOSName
			If ($null -eq $Netbiosname)
			{
				add-logs -text 'WARN: No NetBIOS Name was found'
				$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$textboxUPNDomain.Text = "Not Available"
			}
			Else
			{
				$textboxUPNDomain.Text = $Netbiosname + "\"
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting UPN Suffixes'
			add-logs -text 'CMD: $Forest = Get-ADForest'
			$Forest = Get-ADForest
			If ($null -eq $Forest)
			{
				add-logs -text 'WARN: No Active Directory Forest was found'
				$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxDomains.Enabled = $false
			}
			Else
			{
				$comboboxDomains.Enabled = $true
				$UPNs = @()
				add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
				$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
				If ($extraUPNs -ne $Null)
				{
					foreach ($extraUPN in $extraUPNs)
					{
						$UPNs += "@" + $extraUPN
					}
				}
				add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
				$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
				Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
			}
			add-logs -text 'LOG: Done'
			
			$comboboxDomains.SelectedIndex = 0
		}
		Else
		{
			$InfoMessage = "Could not locate the ActiveDirectory module on $env:COMPUTERNAME. This module is required to create an Active Directory user"
			$InfoTitle = "Error"
			Show-MessageBox_psf
			$checkboxCreateAnActiveDirect.CheckState = 'Unchecked'
		}
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	
	Update-SamAccountNameTextbox
	Update-DisplayNameTextbox
	Update-EmailTextbox
	
	$textboxSamAccount.Text = $textboxUserLogonName.Text
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'White'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Black'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Firebrick'
		}
		
	}
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxUserLogonName_FocusChanged = {
	$ADUPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADUPN -ErrorAction SilentlyContinue).ADUPN
	If ($ADUPN -eq 1)
	{
		$words = $textboxUserLogonName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxUserLogonName.Text = $TextInfo.ToTitleCase($words)
	}
}




$maskedtextboxpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'White'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'LightCoral'
			
		}
		
	}
	Else
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'Black'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'Firebrick'
			
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}



$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHub_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'White'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'LightCoral'
		}
	}
	Else
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'Black'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'Firebrick'
		}
	}
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365DisplayName_FocusChanged = {
	$O365DisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365DisplayName -ErrorAction SilentlyContinue).O365DisplayName
	If ($O365DisplayName -eq 1)
	{
		$words = $textboxO365DisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365DisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365UPN_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		Update-O365EmailTextbox
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'White'
		}
		Else
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Black'
		}
		
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Firebrick'
		}
		
		
	}
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_FocusChanged = {
	$O365UPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365UPN -ErrorAction SilentlyContinue).O365UPN
	If ($O365UPN -eq 1)
	{
		$words = $textboxO365UPN.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365UPN.Text = $TextInfo.ToTitleCase($words)
	}
}


$maskedtextboxo365password_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'White'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'lightcoral'
		}
	}
	Else
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'Black'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'Firebrick'
		}
	}
	
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}

$comboboxO365Licnses_Click = {
	Show-O365LicenseSelection_psf
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	Toogle-LicenseStatus
}





$comboboxO365countrycode_SelectedIndexChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
		}
		
	}
	Else
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'White'
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
		
	}
	
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'LightCoral'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'LightCoral'
	}
	Else
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'Firebrick'
	}
	
	
}



$saveLogAsToolStripMenuItem_Click = {
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged = {
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}




$versionToolStripMenuItem_Click = {
	$InfoMessage = "
Version Number: $Version
Build Date: $Builddate
Author: Brad Wyatt
"
	$InfoTitle = "Build Information"
	Show-MessageBox_psf
	
}


$changelogToolStripMenuItem_Click = {
	Show-ChangeLog_psf
	
}

$labelChangelog_Click = {
	Show-ChangeLog_psf
	
}

$externalLogFileToolStripMenuItem_Click = {
	# Class Details:  https://msdn.microsoft.com/en-us/library/system.windows.forms.savefiledialog(v=vs.110).aspx 
	$SaveFileDialog = New-Object windows.forms.savefiledialog
	$SaveFileDialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$SaveFileDialog.title = "Log File Location"
	#$SaveFileDialog.filter = "All files (*.*)| *.*"   
	#$SaveFileDialog.filter = "PublishSettings Files|*.publishsettings|All Files|*.*" 
	$SaveFileDialog.filter = "Log Text File|*.txt"
	$SaveFileDialog.ShowHelp = $True
	$result = $SaveFileDialog.ShowDialog()
	$result
	$Global:ExternalLog = $SaveFileDialog.filename
	Write-Host $result
	If ($result -eq "Ok")
	{
		
		$labelLogFile.Text = $global:ExternalLog
		
	}
}


$radiobuttonExpireOn_CheckedChanged = {
	#Enable the Date Date / Time picker
	$datetimepickerDATE.Enabled = $true
	#Enable the Time date/time picker
	$datetimepickerTIME.Enabled = $true
	
}

$radiobuttonNever_CheckedChanged = {
	#Disable the Date Date/Time picker
	$datetimepickerDATE.Enabled = $false
	#Disable the Time Date/Time picker
	$datetimepickerTIME.Enabled = $false
	
}

$datetimepickerDATE_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$datetimepickerTIME_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$checkedlistboxGroups_SelectedIndexChanged = {

	If ($click -ne 1)
	{
		$CachedCheckedGroups = Get-Content $CacheGroups -ErrorAction SilentlyContinue
		
		$checkedlistboxGroups.CheckedItems | ForEach-Object{
			#If checked and not in file, add and append
			$CheckItem = Get-Content $CacheGroups | Select-String $_
			If ($null -eq $CheckItem)
			{				
				$_ | Out-File $CacheGroups -Force -Append
			}
		}
		
		$CachedCheckedGroups = Get-Content $CacheGroups -ErrorAction SilentlyContinue
		
		
		#Get all unchecked items
		$UncheckedItems = $checkedlistboxGroups.Items | Where-Object { $checkedlistboxGroups.CheckedItems -notcontains $_ }
		
		#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
		Compare-Object -ReferenceObject $CachedCheckedGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
			# == means that the obj is unchecked but present on the file, we need to remove from file
			If ($_.SideIndicator -eq "==")
			{
				#Remove the item that is present on the list but unchecked from the file
				$Info = $CachedCheckedGroups | select-string -pattern $_.InputObject -notmatch
				$InfoMessage = $Info
				$Info | Out-File $CacheGroups -Force -ErrorAction SilentlyContinue
			}
		}
	}
	
	
	$Items = @()
	$Items += $checkedlistboxGroups.CheckedItems
	$Items += "Domain Users"
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items $Items
	
	
}





$optionsToolStripMenuItem_Click = {
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
}

$textboxDescription_FocusChanged = {
	$ADDescription = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription
	If ($ADDescription -eq 1)
	{
		$words = $textboxDescription.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDescription.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxoffice_FocusChanged = {
	$ADOffice = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADOffice -eq 1)
	{
		$words = $textboxoffice.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxoffice.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxSamAccount_FocusChanged = {
	$ADSamAccountName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADSamAccountName -ErrorAction SilentlyContinue).ADSamAccountName
	If ($ADSamAccountName -eq 1)
	{
		$words = $textboxSamAccount.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxSamAccount.Text = $TextInfo.ToTitleCase($words)
	}
	
}



$textboxStreet_FocusChanged = {
	$ADStreet = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADStreet -ErrorAction SilentlyContinue).ADStreet
	If ($ADStreet -eq 1)
	{
		$words = $textboxstreet.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstreet.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxcity_FocusChanged = {
	$ADCity = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCity -ErrorAction SilentlyContinue).ADCity
	If ($ADCity -eq 1)
	{
		$words = $textboxcity.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxcity.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxstate_FocusChanged = {
	$ADState = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState
	If ($ADState -eq 1)
	{
		$words = $textboxstate.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstate.Text = $TextInfo.ToTitleCase($words)
	}
	
	
}

$textboxjobtitle_FocusChanged = {
	$ADJobTitle = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADJobTitle -ErrorAction SilentlyContinue).ADJobTitle
	If ($ADJobTitle -eq 1)
	{
		$words = $textboxjobtitle.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxjobtitle.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxDepartment_FocusChanged = {
	$ADDepartment = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment
	If ($ADDepartment -eq 1)
	{
		$words = $textboxDepartment.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDepartment.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxCompany_FocusChanged = {
	$ADCompany = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany
	If ($ADCompany -eq 1)
	{
		$words = $textboxCompany.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxCompany.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxSearchGroups_TextChanged = {
	
	$click = 1
	$Filter = $textboxSearchGroups.text
	$Results = $OriginalData | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxGroups -Items $Results
	
	Get-Content $CacheGroups -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxGroups.Items -contains $_)
		{
			$checkedlistboxGroups.SelectedItem = $_
			$index = $checkedlistboxGroups.SelectedIndex
			$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchGroups.Focus()
	
}


$textboxSearchO365SecurityGroups_TextChanged = {
	$click = 1
	
	
	$Filter = $textboxSearchO365SecurityGroups.text
	$Results = $OriginalDataSecurityGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $Results
	
	Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxO365SecurityGroups.Items -contains $_)
		{
			$checkedlistboxO365SecurityGroups.SelectedItem = $_
			$index = $checkedlistboxO365SecurityGroups.SelectedIndex
			$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchO365SecurityGroups.Focus()
	
}

$textboxO365MailGroups_TextChanged={
	
	$click = 1
	$Filter = $textboxO365MailGroups.text
	$Results = $OriginalDataMailGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $Results
	
	Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxDISTROo365groups.Items -contains $_)
		{
			$checkedlistboxDISTROo365groups.SelectedItem = $_
			$index = $checkedlistboxDISTROo365groups.SelectedIndex
			$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxO365MailGroups.Focus()
	
	
	
	
}

$textboxO365street_FocusChanged={
	$O365Street = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365Street -ErrorAction SilentlyContinue).O365Street
	If ($O365Street -eq 1)
	{
		$words = $textboxO365street.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365street.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxo365city_FocusChanged={
	$O365City = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City
	If ($O365City -eq 1)
	{
		$words = $textboxo365city.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365city.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxo365state_FocusChanged={
	$O365State = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State
	If ($O365State -eq 1)
	{
		$words = $textboxo365state.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365state.Text = $TextInfo.ToTitleCase($words)
	}
	
}


$textboxemployeenumber_TextChanged={
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
}

$textboxEmployeeID_TextChanged={
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
}

$textboxEmail_TextChanged={
	
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
}

$copyActiveDirectoryUserToolStripMenuItem_Click={
	
	#Set value to 1 so we dont have string settings get in the way
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 1 -Force | Out-Null
	Show-CopyFromUser_psf
	$CopyUser = $CopyFromUser_comboboxcopyuser
	$Job = $PSJob
	$UserJob = ($Job | Where-Object { $_.Name -like $CopyUser })[0]
	$UserTemplate = Get-ADUser -identity ($UserJob).ObjectGuid -properties *
	Copy-ADUserAttributes
	#Set back to 0
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 0 -Force | Out-Null
	Get-Job | Remove-Job
	
}

$textboxSamAccount_TextChanged={
	Update-EmailTextbox
	Update-DisplayNameTextbox
	Update-UserPrincipalNameTextbox
}
$textboxSamAccount_FocusChanged = {
	#Update-EmailTextbox
	Update-DisplayNameTextbox
	#Update-UserPrincipalNameTextbox
}


$clearFormToolStripMenuItem_Click={
	Reset-Form
	
}


$exitToolStripMenuItem1_Click={
	$MainForm.close()
	
}

$copyToolStripMenuItem_Click={
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
	
}

$checkedlistboxDISTROo365groups_SelectedIndexChanged = {
	$CopyO365User = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyO365User -ErrorAction SilentlyContinue).CopyO365User
	If ($CopyO365User -ne 1)
	{
		If ($click -ne 1)
		{
			$CachedCheckedDistroGroups = Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue
			
			$checkedlistboxDISTROo365groups.CheckedItems | ForEach-Object{
				#If checked and not in file, add and append
				$CheckItem = Get-Content $CacheDistroGroupsFile | Select-String $_
				If ($null -eq $CheckItem)
				{
					$_ | Out-File $CacheDistroGroupsFile -Force -Append
				}
			}
			
			$CachedCheckedDistroGroups = Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue
			
			
			#Get all unchecked items
			$UncheckedItems = $checkedlistboxDISTROo365groups.Items | Where-Object { $checkedlistboxDISTROo365groups.CheckedItems -notcontains $_ }
			
			#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
			Compare-Object -ReferenceObject $CachedCheckedDistroGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
				# == means that the obj is unchecked but present on the file, we need to remove from file
				If ($_.SideIndicator -eq "==")
				{
					#Remove the item that is present on the list but unchecked from the file
					$Info = $CachedCheckedDistroGroups | select-string -pattern $_.InputObject -notmatch
					$InfoMessage = $Info
					$Info | Out-File $CacheDistroGroupsFile -Force -ErrorAction SilentlyContinue
				}
			}
		}
	}
	
}

$checkedlistboxO365SecurityGroups_SelectedIndexChanged = {
	$CopyO365User = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyO365User -ErrorAction SilentlyContinue).CopyO365User
	If ($CopyO365User -ne 1)
	{
		If ($click -ne 1)
		{
			$CachedCheckedSecurityGroups = Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue
			
			$checkedlistboxO365SecurityGroups.CheckedItems | ForEach-Object{
				#If checked and not in file, add and append
				$CheckItem = Get-Content $CacheSecurityGroupsFile | Select-String $_
				If ($null -eq $CheckItem)
				{
					$_ | Out-File $CacheSecurityGroupsFile -Force -Append
				}
			}
			
			$CachedCheckedSecurityGroups = Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue
			
			
			#Get all unchecked items
			$UncheckedItems = $checkedlistboxO365SecurityGroups.Items | Where-Object { $checkedlistboxO365SecurityGroups.CheckedItems -notcontains $_ }
			
			#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
			Compare-Object -ReferenceObject $CachedCheckedSecurityGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
				# == means that the obj is unchecked but present on the file, we need to remove from file
				If ($_.SideIndicator -eq "==")
				{
					#Remove the item that is present on the list but unchecked from the file
					$Info = $CachedCheckedSecurityGroups | select-string -pattern $_.InputObject -notmatch
					$InfoMessage = $Info
					$Info | Out-File $CacheSecurityGroupsFile -Force -ErrorAction SilentlyContinue
				}
			}
		}
	}
	
}

$checkboxUserMustChangePasswo_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
	
}

$checkboxUserCannotChangePass_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both 'User Must Change Password at Next Logon' and User 'Cannot Change Password' for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
		
	}
	
	
}

$checkboxPasswordNeverExpires_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
	
}


$copyOffice365UserToolStripMenuItem_Click={
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force | Out-Null
	Show-CopyFromO365User_psf
	Copy-O365UserAttributes
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force | Out-Null
	
}

$MainForm_Closing=[System.Windows.Forms.FormClosingEventHandler]{
Get-PSSession | Remove-PSSession -ErrorAction SilentlyContinue
	
}



$comboboxO365Domains_SelectedIndexChanged={
	Update-O365EmailTextbox
}

]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>