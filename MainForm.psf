<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAHYcAAB2HAY/l8WUAAL8hSURBVHhe7P13VFVbuu4Ln3tbu63d++3bvq/d
P/atfe655+xTe++qXbtqV1pVtdaqFc05JxREsgKKoIgCRlAEQUVREBMioJJzzjnnnHPOk0lOz9f7
mHMiuqZr6RKUKe/P9sgIfYzRxxi99/fpI83/QhAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEsYQx/e1v
fxNgY3sz4M5d54Cbt51IJBJpWevWB9CH2g7Xh9iW072HAadOnQ74h3/4/wRIYwux1Pn1r38d4xUY
hZKmAZQ09qO4oY9EIpGWrUqa+lFY34v8mm7k1/YsgrpRUNcjtLl8ewV8fJHEt1XEtlHKtlVYt7j7
xLdT1tyP85cuQxpeiKWOje2NgLJmERIL6pGYXydRQR3iS5oQW9GG+NJmYVw2nUQikT5VJRXWIzK9
HL6RWQiIyYV/9GIoR1h/WEoJIlILEZ6cv7hKyUdEWpmwTfn5eX/xY8XXH5Ndg6ySOjIAioLTvQcB
Fa1DSC5sQEpRA5JZ4E+sakd2ciGKfWOQG5uDRGYEkpkR4PNJJBLpU1U6a+eCEwoRnV6GlGLWHjJD
sBhKyKliATMbsZklyGHtbWZ566Iop6oT8dmS4B+bWY4U1s4nM6MzX0lyNDefdfzmp5XpB+nZPsVn
VbFjV4ycsgYyAIrCnbv3BAOQUtSIVBb8k1mwb7R/gukthzDDNLtRBR0X7ZHKK0hZC1KLWToSiUT6
BJXB2rjQpGIWLCuYAWDtIQ+YC65GJObWCr3mhJxy5FZ3IIu1u4uh3OpOJOVXCtuKYwGab1+42itV
kkz5L4fn5kunzU//yrx5y3Al5NQgLLkU2XQFQHGYbwASWWGpve8FrNmHmofeyMooQ8WzUMyuO4D2
y3eQxAqqvEqTyirK201TFLG8MzMkf96HlDQfMr3DMU0raRZ6M/LmkUgk+ZIZgLjMSqQVN7Mec+Mi
qAlJeXXwFwxABfJqOpFd2S5XuVUdyKvtRk51l1zl1nQLQV7eslx5NV2sF18lNRvVrF1oEtr6l+Lj
kmnppa1IYnlLZuMZZW3sePC/rcJV4SQ2P6205ZX0qVIJ62FpE/NqyQAoGtwAVLaJkcKDBdOoqiFa
r91HfMsgklkB4n/rHnhhZquaYAhSyluFQvSK2HKSYVZIWCWSBZ8fpJMjXunSWSGTBSt5aT6IpPnO
KOcFv4FV0nphXG7aH5GwD6yipJexZdkwX9fP3a/UonohH3z5FD7MJC/dD8SOZTJz/fHZrBF7y/NA
IpGahMvmYckfxgAExOYhMffNBoAHdp4nD99IPH0RDDfP0Ff01DMEbl5hrCdey4xAl9x1zBmA2B83
ALyd8AlLgW9QHJ75hOOpbyyyq7rwPDgJ7mwbPkGx8ApJmkv/JgMQnlKGnNJ6MgCKwpwBYM43gxWk
yT2HUeURisSGXiGAJTH3WRyagtmNB5Efn4sUVqhklYUHy5jEJLi9CGQuURLEefDLKKnFCy9vhKaU
ChWKF650HhTnBSPZOHfc8ZlFSGAVIoMHTWHeqwZCNi6blsHWGZ+aBf+INCEPQj6SUhEYkyUMy7Yn
W/4H25eua25cmMbyXdqIsJh4ePqF4Ll3APyjMpAmNSfz076+L3Pr5/PY/iTlliE2qxJZlW2ISEhG
RGqp4KQlxuj14yDLy7z8MmWUtyAyLhkvfAPh8dwbz7wD4RvOKmAJW55t45XtM8nWkV7Klq1oQ3R8
IryDE5Ex73yRSKQf11IyAPl1PQiKz0NAQAhqqitRU8XE/0pVzcYjI6PgE54mvLUgbx1vawB4J+z+
0wC0NDUDmEVUTBIs7B4iMCQWM9NT6Ovthb3jUyTk8w4Jfx6MDMAngcwA8EvMSayw9J2yQp/xZSHw
Jzb0IbGxD50X7DGupId03htlgUlWWTIq2hEVG4f7zg8QklzCKg8Pxu2IS07Dg4ePEZJULATB1KI6
VtCr2DKSYMeDPi+U/OERHnR9/fwQGJfHAqnEVKQU1CAxv0YolPyqgnD5m62DP2gibJeliU1MgWdg
gpAHrsjYWPiEJiOTudY01lPm2+OFU7i6wNaRmFvJ1sO2zbYv6ZE3sjzUCuuWrLMFoeGR8ApKQFIh
67Wz7SXksGWkvfeUglqhkPN0SXn8Xlq9sB88+M/tHwvA3JyEhIcJbpnPSymsYxWkQZIPtn88H8ks
X4IhYOsWLuvz5fP4/r5qAoRtF9fC1z8QkRmSysvXn1xQLU0vuRrDpwn5FY5xC7Kq2hGdkAQflgcy
ACTS20tiAEoQn1XN6iurVyzYyZNwiZx1et4kPp8bCHnLprI6mswCKTcASXmVwit0/GG911VQ34eQ
xEKEhESioaEeYeHR8AsIhX9gGIKCI1BdXY24uAT4RmagqKFf7jr4K3oprL2QmA3WZgjtH29b5ovv
Tyuimem5+8ATbW0dzAQAFRXVwt/BQRHs7B/gGetQ8DZesh/seEklDLO2lbfnZAAUDG4AqvgVAB4o
WOFvtb0P/H0z+k9YovahD3qYIeDPBFQ+D0NSXbdwmyBdGsgzKztY4GU9TVYovYNikFrWgayyBgQE
h7NedDAzAMwUlNYhKIIVXDbNNzRR6FFHxrFl/ELhF5HMnHYR3N2fwt07BPHMQcalZ7H1hcE7MIQV
/gJkltTBJyAYnr7BCE0qRCbr3WaygB+bnArvEFYgWR64ollF8GMVIbWwAr6sgvB1RKZXIKOkBv4h
4fAJYtOYm01llZpv/7lPAHyC45DCgzYPpPmleOEThOQS/kQu70m3sO10ICm7kG07EF5+YYjNqUIE
2453QDi82DaiWSORwQK0bP/8wpNZcK6Bl9cLPPHwYRWqFKGRcQhPLWP5qIZfUAh8AsPZdkKEgJ5R
UgUvb3/4hsXC08cX/tEZLJi3CcdW1qPPLGuEf3AoYnIamKNvRURsArz8Q1h+guEbkc4CfCcSMnLh
7R/MjlMYXgREI6mEGaSkFGYAuCHqmLc+Eon0Y+IPzgkGILtGEsRZsH5dvJMTmlDA2ijW6QiOZ0p4
RV4BsQiMzmIGXf7yaawNSiloQGBsvtCZ4N8EyOX3819TIQvqoUlFCAmNQkV5Ke498WM9cNZxYQH4
vlsQ8nJzER+fBL+oTBQ3DshdR0FdL+uE1AgdLIkB4HngJoQF7jnxq4nNyGbtXUJePW7edUNXV5cQ
/EUiEWxvPoBneBpyqjuFtLL0MvFxvt7kgnrW1pUjt4wMgMIgPATYPY6szAoMa57CxG5tDB0xxaia
EUZVj2Pw6DmUBsQjgRXShqxS1GaXIUkapAQDEB2HoNgsBIVFIiKT9dzTM4VAGBoVi6CEIlaoWhCb
ls8CZzLcn3shLqcGPr7eCEosEi5VZ1e2ITAkFGHpVchiQfK5lw8rRKVIzMyF+4sA1qutwPMX3ojK
qhHcubBdVlBjk1NYQE+aMwAxLKj7s0rHp3v4hAmBPbu6g/XGWbBmlZJXAv+AAATGs7xER8EzmPWO
2Xr4+njQTc7KZxU6GukVncJVAsn0diRl5sDtuT+SSzuQmJYJD+8gwahExsbhmW+k0Pt+uX+eiCtg
TjouHn4x2cir60IgMx5hzABEREez/GWyPPWwdebihX8UqzAVwuX9uEK2rcJyvPAOQGIRNySSS/zz
DUBsHqtouYV44RvC9o0dt4om+DJjFJlWAr/AIHZ8qoWHgsKjY+AXnY34lHQyACTSO+ptDEB6Wbtw
X7y9tQU93d1MXa+ol8nTN5wF6wYh2P9gHT/DAPBL/vddvFi7lQifsGTce+SF4qKiBTUA/IqBd3gG
Hrl6orqqCi3NTaivr4Ormxfc/ONY2/UTBiCfDIDCwT//W94/hW5zO4weNEA2f3CMVQJZhUjhJ72m
E1nFTRhKzERfcjbrlTey3muT1ADEIiAmD0lZefAOkvSEY3PqEBYZhZBkFsjTWI8+KBYx6QXw8vVD
NOvJphdWSnrloYlsG63MAIQw81CLjPwSuD97gYCoZNarjkdQTAaS88pYYGbBUrisJskTv+Qfn5rB
1huPrJoe5DBFxbKgyypCdlU7IuNT4enPes3M1AQGBeIFWz44KhEB4fFCL56bE/6kb1Zlu2Q/y5ix
KKxgPfNAJBS1MlPCTAXbRlZVFxIzcpjRSEB2bS8L7HFw9/RHcHQyAiNYzz65ELEpma/sX2x+M0sX
C//YXGYAuhHEjkd4agmC2f5GMhOTW92NrLIa1mOPQEJOCbz9wpHCjAa/0uEXGIoEbgbkGYD8FiTw
oB6aJOQlt7abHeNYlpc0+AZGsHV0MgPQw/KbBd+wFMSRASCR3lncAISnMAPAOipvvgLQgSceQags
LxcCZF1d7StqaqjD0+fMzBfwB4LfYAAKmQGI+2kDwG8BhIVFo62tBeVlZSjIzxNUWlKClpZmJDAD
wG8BvJUBYB0XfrVTMAHzxMf58wK+ERms/fVFZ3srMxcluGZ3F5mZ2czQdMLTOxAerCOYxdpGnn6+
hFufbL0pdAVA8bjt5BxQ1TuBMRUDNDo9R1KLSOiZy5TKCkYFK6STMcmYjUnETEwSJmKTUVrAKkht
DyKiooUCmM96u96eHnjqE4VcVuiCQkMQklKGqJhoeLOglcyCnfuz54hmQTAxuxRJbPyFpy/i8xuZ
ww2RXM4urmVBMJg58CIk5vAH6SqQXlQJTz/Woy9pQ1a5pHfMg3NmcTUrlN4ITshFXEaBcEk/hhmP
1IJKJORWIjQiEr7h6SxAp7KgGc8KfzVi0wuRxpYPiWCGILGIOd4OYX1c2Ww4kpmI52xbMelFQq8+
ivWuuQHwYkYju5pVpJxCePmxYMxMEn9wkX81LDwq6uX+eTxDbEErYhPYelgPnz8vEBQUirCUcmZY
Utm6I1jDwgxIZAx8wlORXlyB557BLHh3CK/OePsFMQPSwvaTHXshX6ynX857+oGIyWONU0kV22d/
4fjEp+cJVwP46znBoWHwi0hjDr9cuCoQnl6B+OQUlu9EZNd0ze0jiUT6cfFAyB/a/TEDwK9AunqG
ITwsEjEx8YiOflUxrFP0xCMAKcU/XFYQMwDJ/ApAXAHr4PyIAajvQ1RGuRCU+b1+vq2YWPaXtVN8
OJYNe7IOSUhCPop+xACkFtYiKD5fMACSq6ivKoOJ9/7vufggIjxS2JaV7V3ccw+Bw4NniGTtVVxc
POzvPhFuAfNgnyEEfWYAuOYZgIi0CuSW04eAFAZuAGr7p4TX/xqfBCC1bxKZLYNzymCGIKepH2Us
EI0kZmAoJRtlJQ3IZ+aA90KTswpYT7sc+aywJucUIz63mhW6bhagchGfV4fcigYWcGMQGpuOyKQs
VgGaEJ2YBP/QaESnFyOP9WbT80sREBIlBLPskmoEh8fAPywO0awHn1vZjKiUPMF55rLePf9qFlde
TTdbrky49eAbwtaVWclMSB9S84oQEBrJesYpQs8+v6YDMQkpwvaCYzOE9SRmFjCTUCs8fStbHzcD
+bVdwv10vrx/aBRbZznrmVczI1AkVKY8Nj85M5/Nj0ZARKLwzmwOK+wv9y+TVRB2XMrqEBwWxYxC
ORLS84U3HAqYQYpLSoc/y2tIXAYyK9m2y+sRmZiDLFb5citbEM2ObXq55N1fWZ7yqtqYickGf7Ao
nx1XyT7z7cez9bJ9YBU8p7yRGZF4lucYRKaxY8orfW4xolOL2TnqmrePJBLpx8TbgKh0Ztizq99o
APh0bhA8Q1MFeYWmvaIXwSmIzqh44/IyAxCSUIiUfN5eyjcAXLydC08pFjpZ/BbnfPlFZrJ1FLB8
s/ZD+B7AD5cXDEBRrXAlgX986E0GgHc6YliePfzj8cQ7CkEJeaxN70VCfq1w+d/VJxpBsTmsU9Mm
BH15BoA/AxCdwQxNZRMZAEXhjtODgAbRLMYOGmDo2Dm0PPRGm9Ozl7rrgRb2N7+gDu35FWhjvczM
hj4hGObX8idVe5lT7WGB9uUwD6yFLE0hC1j8VZaixn6mPkHcHPB5wrSG3rl18HE+r4AtL0nfz9JJ
fmSiUEjHt/eqZMvJWxcXX5/wIxWyNHz70uUK6/m8H65zLm9MwvZZ/udvf/58Yf0/2D+Wjk/jP77B
9oUvK9tWoXS5uXQ8b2x989fN8ycbf2W6kP7VfRaOO9vnl3lgkq5P2Mc3HDcSiSRfxY29rEPDv6Hx
ZgPA73vzefw9+TeJPz8kuUcuZ3kWcLkB4LchUwtqWJ1/swHg4k/4FzcOCpf5X9UgmzeAvGr5wZ+L
G4C0ojrwVxslBoDf3v2hAeABnd/6zKvh7Xc324dOIbjzh675bUs+jRsN4XbpjxiA2KwaFFW3kAFQ
FLgBaBoGum48xpiaEcY1jV+V+kmMaRijOjEfBa0iFEmDGg+4JBKJ9CmprGUAcSz4J+XVs4DXhawK
/pneBVYlC6TMHIQnlyCjpB6lTYPMzHNDv/AqaRYhq7QRESklzAg0Sb4qyAI5f6JfIv5FwfnD/Iqh
9K9s3lz6V6fnsnS50nncJGQwcxOXU4vimlYyAIoCfwiwbWgWxW1DKGYBXq7YvJKWQeFnMoWfDRb+
kkgk0qelijYREvPqEJdRhWzWW85kveOFVlZZG5Jy6xCVXsHGG1DCjEcx61gthkqb+oRXs/lVjYSs
6h/ZJ9bbf+M4H5Y3/+V0vk+JLPgn5jWgtK6dDICiIDEAYAGeB/k3q5Q5yY8h7mBJS03MDJLeTayX
R1r64m0O7znH5dQJl7PjsmsXXLFZXDXIr+tFHutNpxU3CB8rWwzxdedUtoO/USDbp1ieh3eRkN+f
ElsvU3ET60jWtJEBUBRuMwMgmgBae0Ro6X57tX4o9Qx9Emr7UOoVL7raPyX1DX8QdXwI9Y98Mur8
EBoYlauuwVH0iicWSJPyNTyJbtEY0zh6hiYWVXwbXYNj8vPxDupjef4p9Y9Mo6yODIDCcPPOvYBp
AMNiEYZEg28t8ZDog2hYPPRJaGRY/EE0OjK86BofHflkNDE++kE0OTG26JqanPhkND01ueji37hf
bM3OTH8yYv/9tBjVDXQLQGHgBmCSnbQhFmwHBwffWvwTkR9CQ0NDn4TEYvEH0fDw8KJrZGTkk9Ho
6OgH0djY2KJrfHz8k9HExMSia3JyctE1NTX1yWh6evonxakiA6A4kAH4MJIXrBdD8gL2QkteIFVU
yQvWiyF5AXuhJS+QKqrkBeyFlryAvdCSF0gVVfIC/usiA6BgvJsBeBmQxeKhuQDN/46ySssvD/N0
8wP4u2h+oJStV7a9IfEwJiYnIJalkU1/R0nW/+bxObFtD4+MsoZiXBj+wfx3lGy/FlvyAvZCS14g
VVTJC9aLIXkBe6ElL5AqquQF7IWWvIC90JIXSBVV8gL+6yIDoGC8iwEYGmJBhgWzvr4+9PcPzAXu
4WExavl3sZs7hGHZ9HfVMGuQ+fr7+/sxwLbHpwkBlAW2oYFeVJRVoE8kyYMQoEfHMM1MwbsE6BHW
GI8wozJ/nBuX+Wm4hodH0N3WhLKyGohZvl6f/66SF6wXQ/IC9kJLXiBVVMkL1osheQF7oSUvkCqq
5AXshZa8gL3QkhdIFVXyAv7rIgOgYLytARibnEZZih82bVoHFVVVHNQ8ifKWWty9dRVVPYO4rq+D
m0/j2Jqm2LrEQuMqu0rwNuKFJ8zVFms3b8FBFWUYWdzBwPAERljAGZ+YhrijBDoHdNDE1vvE6Sqi
c+sx0tOI1JwCjI4xEyAn6L4qsbANz7tX8dgviQ3zAj0Fn/s34fgiVhjmRkMwCGybk7NApt99qKqe
wyjbKz5NzMQbcx5o5W/jzXo9UC+W5AXshdbrQVSR9XqgXizJC9gLLXmBVFElL2AvtOQF7IWWvECq
qJof6N8kDhkABeJtDcDEDJD47AY0jc6hi/X+m5pb0D/Yj+amJkxMj8NaVxv2btwAAJPjI2hqamQB
fFR40povLy/ozxfHyfw4rjj7Y2J8GN1d3RANDQtP0na0daK7qQjH1PVQ1TeCrrZmiEbHEetujV06
xugZ4mbjp4KyWNjGTWMNXH0UKQxzHlgYweS6pzA8Mz2J1uYm9IgkabkBUFO7gNHZWRYsxjAs6kNT
SyvGWWXgT9zL3458vR6oF0vyAvZCS14gVVTJC9aLIXkBe6ElL5AqquQF7IWWvIC90JIXSBVV8gL+
6+KQAVAg3toAsHOb5HkbpyxuCSd5bHwC40ONMNM2RtXgEOyP6cLheSqmxjphZW4ATU0tqBuborZ9
EGMjP31bAJjF48vGMDx/E+lpycgrqcH0zBhcrplil7IK9PQ1sHWbNrqnRlkQN0NUehHO62zEv/z+
b7B/4ouR8UkWAOUHX4kkQf3eeV3omFgjOTlJkLHmPly8F8qi/xju3zwLDTUtKOvpobixD8XhrtDS
ssLoRBuMNXRw5ux5HNy7E0ZWjhCzA8Jf7/vhduRLXrBeDMkL2AsteYFUUSUvWC+G5AXshZa8QKqo
khewF1ryAvZCS14gVVTJC/ivi0MGQIF4lysAOSH38afP/oxD6uowMLNFX38TNNbvQ2GvCLcM9OAS
lIvA+2exR9cMlZVVuKi/H7qWLkKhkBf054vz9Kohvlq3FSeMDPE4IBXlKb7YsV8TPWOTqMsOxuZ1
KuiZGYHxLiUEZLehKMIZB09cEi7X//RDgRID8PDSYXyxegtMTExw2sQY3//9T7D1TEdR9COs26uB
oopKuNgYQenEDRTH+0Bb25qZnXps+PPXCM1pwdRoJw7t3IpnCWWYnR6Xsx35khesF0PyAvZCS14g
VVTJC9aLIXkBe6ElL5AqquQF7IWWvIC90JIXSBVV8gL+6+KQAVAg3uUKQIq3Aw4bn0djWzvqG1sx
OlgP7S0qKO7jBkAfT0OycevUPmxX08Vli4swNT0D16AEjEsf1JMX+GXiVwDuXzwNl+AcoRBxgu6w
ddi4CsMzojroH9RD+8QQTPerIji3HUXh96B5xlqYzz8aJC/wvpTEANwx04W9R7wwzHG7Zg5bjwQE
O53Gim17cfXKZZw1N8M9nxjkRHgIBmBoqAp6GqfQw4wG57a5Ae54JrOhyde28WbJC9aLIXkBe6El
L5AqquQF68WQvIC90JIXSBVV8gL2QktewF5oyQukiip5Af91ccgAKBBvawAmZ4A4N1vom9oIJ5k/
eDchqsH+73egkBmAa1pqcPTORIKXHdT1zVBRW4PkhFiU1zGjMDIsN+jPF8fJXB9Hz99CcXE+Cstr
UZzkiU2bdiG5IB8h9y/jD7/fgj6MwXDrLvhltqI85iFWbldBVVO78ICevMD7UhIDcOPEIVy46y8M
c26b6eGsUziq0n2wX0UL+RV1yEpLQEVzD7ID7mP/gfPMwDRj29ff42FgArLig7Fpy05k1HRjamxU
znbkS16wXgzJC9gLLXmBVFElL1gvhuQF7IWWvECqqJIXsBda8gL2QkteIFVUyQv4r4tDBkCBeFsD
MDo+iaKkYDx+HoDRCd7zHcaoqBWOVvao6xch+OF9hCSWYGZSjKd2F6FxRA+GZldR1tCNsdGfNgC8
siT6P8T+gyrQ0tLC8TM26GeVNPL5Xaioq8H2zk3cve2C3nEx3G/eRlppG0YHW2FxVANXnZ4K+fup
ZwD4NsI8nOEblTVXQSO8nuBZaAZmZ6cQ/uQ2NLV0ccTQHFlVbWjIT4DTPX+IB6uhvf8gLC9fgoaK
JnxjC4QHBuVvR77kBevFkLyAvdCSF0gVVfKC9WJIXsBeaMkLpIoqeQF7oSVrAxZT8gKpokpewH9d
ZAAUjLc1AAMDAxCPjGFifEwYlgTuIUzNTEPMhscnpzDOAz0LtPyL0NOswMzOzLLev1hY/vWA/7p4
mjEWxPmtAF6Q+PfAh9j6p/ll99lZzLB1zc5OC9OmZmaEBwuHhvkLesAk/1jPT94CkLySODE5jcnx
0bnt8nxPTrBxnm+2LeG71+zvxNiI8J0Bvvm+xkyoqxigk2ePIQR/tqy8bbxJ8oL1YkhewF5oyQuk
iip5wXoxJC9gL7TkBVJFlbyAvdCSF7AXWvICqaLq9WAvTxwyAArE2xqA1yULoIstecH0Q2p4dBz9
rYUwMTyPxoExjL7j638yyQvWiyF5AXuhJS+QKqrkBevFkLyAvdCSF0gVVfIC9kJLXsBeaMkLpIoq
eQH/dZEBUDDIALyNRJIvH8qd93aSF6wXQ/IC9kJLXiBVVMkL1osheQF7oSUvkCqq5AXshZa8gL3Q
khdIFVXyAv7rIgOgYJABeBtJAqv8eW8necF6MfR6sF4MyQukiip5wXoxJC9gL7TkBVJFlbyAvdCS
F7AXWvICqaJKXsB/XWQAFAxuACZmgVHWGMpr7EkLI3nBh0RaSMkzHiTSQkme6XxdU1PTqKxvIwOg
KMgMwBg7wfIaFRKJRCKR3kaTk1NkABQJMgDLW/Kc/nKSvGNCIpF+nsgAKBhkAJa3+HMW8p7xWC7i
z03IOy4kEundRQZAwXhXA8B7Tfxez+s9qQ8t2T0nefNIPy1+7HgA7Ovr+8GDhMtF3Pz09PQIx0Ne
WSeRSO8mMgAKxrsYAN5Q8ifau7u7hYbzY4rnYSnkQ5HV3t4uPHG9nOEGiAwAibQwIgOgYLyrAejv
70dnZ6fwNUA+/DHEt93V1fXR86Ho4sePn1N5dLS2ortvUDomYWxkEP3iMTY0Ixz/Pnbsp/hnH9+R
9rZWyRce55hCW3uHdJh/hVGMjvY2tLI8DIrn5W92WrhyIVt0dmaKjf98AzMzM0MGgERaQJEBUDB+
jgHgvUfZvePxScm7n5zx0ZFX7q/Olyw9/zvA/k5OscZ8RCwMv572pyS7dMuvAMjWy43AyNiEkI+h
19LPl4j/5Z8Ynp7B8Dt8+2BgUDQXeDgzLPgMidg8kRgz0/xzyD9c5sfE8y3k5WdoYGAQU2ybwvFj
wzxv/PPII+Khtz6efPv8+L1uAMZ66nBKVwVbd+zA9q3rYWb7CPwMj3dVYcf6DXAJjofNKU1onzDD
3UdP0DEsWe5tmB7tg+WxQ9i0aQv2qJ9Aw8AkZkZaoa+8AxvXbYLa8WsYZuXiuoEy1m/dDSWlvXga
nildmuWhvRC6+mbol5qO7vJEHDc8B25Jfg5kAEikhRUZAAXj5xqAQRZA+Mc08lNDcPqUMcwtrJBb
3y58Z//VIMS/oDcsfK+fj4/zj2OwHl6Qz1OkFtdjfGR4Xtq3kzwDwIN/XX4ibtxxxcAo/x2B15cb
wCD/QaCpKYz0tsLd3RXVbf0YFr+FCWBBfnSoB8+cbuC0ySkYG5+Fh3cUhieZieiqg6u7G5q6xcJP
Estd/jXxoD02Pi78TgI3LvLSvFkiFvgHEB7gh7zKZuGXFkdY3kJ8vFDW2CWYAPnLvSr5BmACJmpb
oXvZBbxfPdLfDPVNf4eDfxpin1zGjkPmKM0OwcrvNqOwqRMDogHhdx/4FYGykkI09wwJY5zqikJU
NLZJxySI28txx+GBMHzt2AHcCypEqPMZHDR1FqZ5urujXdQF/d37mNFIQXOH5FciZYy1ZGOvki56
pAagoygSBw8eFQzK8FAHCgoKWdmT2YFZlJcUoKatWxgbGx5ET0cnGhvapHkmA0AiLbTIACgYP9cA
TEzNoDD2GVas3oL7ru5wsDuLL75fh4yqLqFHLIMH3N76AtjaP2FN8gTu3byFqvZBFOemoIwVlPnw
H+AZGGC92Xld7dHhIeGX/mTIflzoVQPAA8UUHM218X/9t98hsqARMxOjkp7+vHWJ2spx/cYDDLJ9
SU1OQMcAC34zk0IQHpuYwgQzL/zb/zLGWHDl80TiUUz0VmHTV3+H6dXbePzoHg7t2gAd81vsmIiQ
nJyELr4uAdYTHx5+GWSmJjDI1jF/H1hfGD4uzohIr8Qs274sizOTLC3bF9myPIiNC8eE9fhZsOLH
YmCQBdmpfhzZuxMukflsVcxQDbdBfct6BGY1SJeTwM3NkHhEOsbOBf8RJGbGZPT39rDz+tIAjHcW
YP2qtWiZkk5gVMS4YbfyMZjobMV//OlbHNHYg//5L/+BW46PYXjmJJr6Rbh26gA27dqDlSs3ITS9
GIEu1lA7cgSaGvvh4Bn9ypUTTkqYG7Zu2Iri1gFc11fC7oM6OLjvINyii9lcMfZvW4FdB1Sx5tt1
8Enk0ySMteZCWdUAfdID1FUSA92jZ9FcWwTlbeuhp8vWo2eM7v4BPL5+Gpq6+jh06ABbRykSn1ng
93/+KyxtXFlJkUAGgERaWJEBUDB+rgHggTXW4wY+X6uMwjrJ/dv02GDkVXegp6kQZ02P4ehp1mNs
H0DIPRP84v/5FayuX8Gv/p//Bn3rR4iLCkZhRT2CPR/C2uocNLR1EZddi9nZcfg7W0NHUwunTM8h
s7wFlbmROH5MHwaGZ5Bd1oixsdFXDMDQyDj66rJgZHIR3k9v44ipnRBEJ8dE8HpsBQ0NDbgGpyL6
6WX803/9n3D0iUB0dASiwgLx6EWI8MuFaWEv4BmWivb6PJw21oXh2UsoauyU/MIhMwCjnWU4qKSB
8h5p+BiswZZNmxCdVYLg4GBUVRTjhtV5nD1ji7KGJrg5XYa+nh7cwpOEAFhbFAMDfXUYnLVDZVke
Vv72l/h87ykMiPtxz9YUGurqcItMx+RwN5xuXITFGUuYnbNEbE4lpqYn8OKhA+Jzq5khYAF7sh8n
NFThEVuEWWYwJofbcfTAXsSVdKIwxQ9H9fVwwvgcypr6MdxXj6sWxtAzPIHYojqI2itwzfIczplY
I6uiCVNTL43JWFsONqxeh46XDgTV8e7Yq3UZ2fFeOGPrw7bdAHUdc0xPD0DvmB78X7hixy59IW1b
ZT7CAtzw93//DXSOn8JRtV3445c70TtvfZyQp3ewf88WeMek4qq2Ck5YPUF+Vgo2rNqMlJoB1ohI
buWURz3A+u0GQg+fw68A7Fc6hgHpeG95HHSOmKOmOBVbvl2La473EZqUitaSBPzuv/8bDE6YQGvf
RqxTOg3XO2egZ+EgXVICGQASaWFFBkDB+NnPAAyJWedzHC/uW2PvngPYsGYjrO64sZ7uIPR2rsGB
o6Y4e/wgvt6ogXD/R1ixejuikyKw6ftVcA1Nxhk9JTyPzITOzi+w28AazhcNsUntNOKDnmD9pj0I
CPDG6r/9Fk6+4dBa9TnUj1/ELQdr+CfkYmJi/BUDwANE8L2LUD5mgZLsCHz/9TpUiaYR73oV367Z
CW9vL+xTOggnpxtYv34HEtJTcFD1AEJCArB1+36IJqZxigWre54h0N25FtqnLuKk9k58s0kL3aPT
GB5mBqCrHCp7VZFZ2yNcGeA9VeNDGnjo6g5VbS0kMPPzu1//d7gGJODBlVP4fsNO2F21wJ///CW8
gyNwaPNKXHb2wOWTujC2tIWByh4Y23vgkdUJ1tvVh5+nO1at2IKQ6Cis+Oy/4vI9f7jamuDgSTtM
DNRh07oNyKrvFwwJJvtgpHEIz+NLBAMwNdKJ46oqiM3MxvbPfoejZ21w/dZVpJRU4toxZWxU1oXV
+eP48zc7EBXujd//5p/h6BaOprYu4VjOMTMC3b1rce5+uGR8dhgnlFbC6lkiiiNdYWDpxoxPOZQP
nWTloRv6Bizfz59g555jQvLOmiKE+Lpg1Rcr8SIsBhE+j2B4+gqGpAZgoLkcXj6SdVeE3sNBHSs8
um0CG49kYdqxvfvgEhCH0KBIYbw48j52KJvOGYAZcQM2f/0tUpokVzXiXK2w/dA5jA+LUJqfh/BQ
T6xdtR7Ozvew9tsNCI6KR4DbHZy3dYGbgwlMbjwVlpNBBoBEWliRAVAwfq4B4Pee8zOS0TIg6a0N
tjVAa9tG1tjewqbP/woNPQPW4z2CnXsPIyUpElp651mqCRxV10ZVpxiXjdXgFZUGk2OqSKwbx2hN
HHbqHMEVkxO48ihWWKfT5WO47ZOEkqRAHD92DCdOHYdPeIZw/3zOAPBL2pODOKa8Fis37MD+A/vx
l9/8G+74JeKmkSauuacK6xoRi1CTFwMNnTMsoPdA7eA+VHQOweaUPm46OuLYMTPUlKfjr//2Gxw2
MMJRXW2Wd5bXLjE7NmPMAPArAOooapdeMp9ow66tW1iQicYRlre4SH/sVdcSZp1WWo/V21Vw3PA4
Duzci0vnzmDPPiNhHgs76B/shPVpIwQk58JcSxVB+V3CnIfndWF60QoamvtRLWIpe0uhpamHJ863
oGd6XbiqIdzumBHh+N6deBIpvTw+3YWDG7YgrqwDaSFu0D9mCKMzZxCbGI9d336OfepHcPy4PnZs
Pwj3J05Q1tYBtzCivl7hnM6nrz4Pavu2Yvf+A9izYz20ja3AU2T6OeLEVQ+WgQoc0jzNykM3jrBj
1NA3iKsnlbB5116sWLERIWlF8HWywB5mSA7s2oXLTwLmbgGM9tbjiOpG7Np3AKs2bENYTgOGOoqh
snEDtm/dioPG19Db2wlT/d3Ywdb3zZp1iMitly4twf+RDVat2ogDBw5g9YoNSGL73FWRigO79+LI
EV1s36OBkvoWPLx6AkqH1LF3+w64RGUh9JE5Tt1wla5FAhkAEmlhRQZAwXifWwCh9y/gT99ugndE
HFJiw7Fvy2Y8DYzCSdXdsLzvg4gXjtA8aYmqogR887d1yCorxsH1a+HsFQMTfSU8C0uBgeZOBBf0
oCPHD98raSLQ/S7Wb1VDWEgYVn/3De56hcP7iQui4pJx8tAGrNp7Gvyida/UAIxPzaIgwgUbd2sL
QY1TleCOlVtU4H7vGtZsPoDwiHCoqKgjKCwAG7/bgKiEBCjt24bctmnUJD3DP/4f/wALlxhMj7bh
wMZ1uPUsDH6Prgl57x+dhHh4DOM9FdiyYhXuPgtGYkIkTmjsw+4jF5nxKcNuZVVEh3lj3bbtELPt
P2W9+t0sSKanxEFL+zAi42OhtPY73HQPxM2zx3HJ0RXXDLVhcOkB7l7Qx351Y0SHBmDtyk3wCQxg
wXAF6+3zB+pm4HLFAP/jf/4ZIZk1mJ0cFZ5/mGH/XK0M8M1mZcQmJMH5kiG+36yOhvZWPLrjhPik
RGjt+BaqhjawNjmMYxZOSI58AfWjZxAX9kzIZzvLKH8G4HUDIGECBdnZKKmslY6z4C0eRG8/W2hm
Al3dvZidnUZ3V5e0dz6Fwvwc1HfILs4D1WW5KChrko7NY3YceTnZaOh9+YDf2GA3cnMLhPMqYRoF
OTlo7Hr1IUAZXfVVyGb56xG9fP6/t7NemNY3b1pZUQ5KqyW3p4YHe9A78PIhRQ4ZABJpYUUGQMF4
n1sAk6NDCGYBW0VFGcoHtOHiFy/09loqM2F49CAOqOizXl4FJkb7cOWYPm49CUboEwecPHUVT9wf
IbOwAs+eOCK3rg89Ndm46nAfI+OjeH7XivVgz2HHpu9xLzAFiYEPoMKC7FFDM+HJd55X2RWAiclJ
xPk9xWMfFsCnJ4UrAuNDHbh5zRpF9a14cf889rPe4nWXQIjFItw0McLla/fw8OkjVLYNYWqwCRfO
nEZ2TRcrvNOoLoiDns5+qKgbIb64BuNsW3ydY0OduHHWkO2rCpMmrGwfokM0jtGuGjg+eISi/EzY
372LnuEJjIm6cNvamOX5AOxcAjA+M4vKnBBoayhB08AM1e29KIr2hsZBI5TV1+GWpSEO7N8P54AE
jA20wP6mDaraBoVjWZ3wFH9buQ1dLE4PD0mf4BeLMSLqg7P1BSgrq+CwrgkKKpswPSHGswc2UFZR
FZ6HqGwdwBDLn7mJNjs/Gngel8eCZx6uO9xBz9CkYKLkG4DlARkAEmlhRQZAwfjZBkB4B54FUBbc
ZMywAMyfeB+Z9yT95Bh/LVDS85ocH8Pk9IzwARdeUEaGxSyATwmBTSR9Wr08MxI37e8hKyUSm1ev
Fi4Tz4ffA5//FgAf5q8ATk2MS1+pYxKJhd+mHmaBUvYWwCw3ByLJE/bT/L45267w7j5LyxGesH/t
af2JUf4EvuQ1Pf6u/asfr+Hv3YswwI/B1CSGh0eEhwn5/nPDIEs6O82msTyNjr98tJ6/qjcibGeW
HYORubT8jQGR9BsF/BZLV2s1zhsow9YlGDOzM0I+BAnbEM8tx5l7W2BeJvk+DQ2/DPBTE2MYEg8L
x4a/JsmPHxkAMgAk0kKJDICC8S4GgH+FjQdEHnz5J4F5QF1I8eDU29GMhLhYxMfHI6ugHOIR1gN/
PR3btswALEY+loLEw8Nob6xEQmIKegaHhY8WyUv3cyX7pDMZgD6hXPPjQCKR3ix5MeF1kQFQMN7W
APACwIM//3xsR0eHEDwWWvzzsj29fULwE36whQW9nu4udMlJy/PAv2X/+vRPRfxY9Pb1Y5gdi77e
HmFcXrr3ET9+PPgtV2ZnZ4XjwE0AiUSSr97eXqHTIC8uvC4yAArG2xoAHoh4r3tycnLJaGqK30qQ
P4/0duJBcDnDyxD/oqW8Y0MikSZfuVooLzbMFxkABeNdDAC//08QBEEsH/gvhvLOHxmATxAyAARB
EMSb4LcJyQB8opABIAiCIN4EGYBPGDIABEEQxJsgA/AJQwaAIAiCeBNkAD5hyAAQBEEQb4IMwCfM
hzAArWUZ8AxKlI4BQx11cLptDxsbGzg6uqOxW/I1Pk53YyFu2tnghsM91A0s33fUCYIglgJkAD5h
Ft8AzML22B784jffo65P8ong3EAn/PnLTbh58yauWZ3HyjWbkF7dh4H6dGzeuBW2Do6wtT6Lr9ds
Rn7TS3NAEARBfFjIAHzCLLQB4B+Wmf9xmcGGDJha3ICb0xVccg4SpqX73cNxCxdhmJPofhWqZndR
neaHL9YdRGOP5Hf9chOCkZqVDbfnfuA/OjzeUw//wDDk56TC/ekDnD1jjKDEEiFtR20qTE2Nce3e
c4xOvty+LD+kT1cy5M0jkUhvpzdBBuATZiENgOzHanhaGT63zGBy0xMNhRFYv+UQ+DWA3KD7OGJ6
R5KAIapOwq7dx4Rhn4fW2LtHBbu37sJt1wA2ZRTquzYhpXkc6c+vwvCKC9zsjuG3q/bjsdNtfLt6
L4pLC7CP/9yu8xMYqO7FFZcwYV38C2+y796TPl3xT1RzyZtHIpF+Wrz+8AAvDzIAnzALZQC4g+TB
9hWmh6G581sW+Hdg997d+M0vf43Qkm5Uxj6F/jlnaSKgNuEpdmicQVtz/dxv+nfWVEJ/x3rYB+Qh
w/cWrjk9g42ZIdLqBuBx8yRuB+cL6VS11XDnlh3UD1sJ45zOnl7pELEc4A0Tb6QIgvh58E/+8t9f
kQcZgE+YhTQA3EnOJz/4HvbpmEnHgAwvO2zVPIfsKA9sUTJEXl4ekuJCsen7b+EeX46iSGd8vnoH
ItLzUFqcjyP7tsEhMI+Vznbs/voz7NA8L6zn7nlNXPHgDxWKsXnXDoRGR2HbqjWISMrEnUvGuPY0
XEhHLA/IABDE+8ENwPwrt/MhA/AJs5gGIMzjDrxjC6RjjJF22F23R3ZmMjT2KeHAgQPQ1jKCZ3i6
NMEUIp45QvmgMg4oqeOuR4Tw+/2cc+prYOwYKgxH+z1CcHoFGxqH3Q1btIwAJckeOKCsBB2ji2ia
91YB8elDBoAg3g8yAMuUxTQAC8Ms8uN9oHLgICq7lu9v1xNvhgwAQbwfZACWKUvfAEzj/jUzPAnJ
lI4TxKuQASCI94MMwDJl6RsAgvhxyAAQxPtBBmCZQgaAUHTIABDE+0EGYJlCBoBQdMgAEMT7QQZg
mUIGgFB0yAC8O/39A+js6kZXdw9pmYmf976+V9tyMgDLlMU0APxLfBUVFSgsLERRUdEb1dfXJ12C
IN4dMgDvxvT0NCqqatDHTED/wCBpmYmfd37+edCXQQZgmbKYBiAzMxPbtm3D+fPnceHCBbnS0NDA
5cuXpUsQxLtDBuDdmJqaQlNzq3SMWI40t7QJHTQZZACWKYtpAGJiYmBvby8dk09paSkuXrwoHQPK
EoOgo60NLS0taGlq4MYjf0xL570r4e4OcHgWIR0DGnLj5tZ91OgUMsvqpHOmEePpKEzXO26OwpYe
6fT3ZLgN583MUN0r+RVETlG8B/RPmqH/pfn+aWaG8Mz1GVpFU8LolKgVLg5P0C8Z/Vn0tdXioqmR
sM9X7d0w/C75eY2W8lS4B0VJxz48P2kAZsaRn5OHkXkFqTI/A8GB/vD390dFU5d0qoS81EhhenXL
gHTK+zKBhIgAts5gdIt/bmleOLgBaGxqkY4RyxFuAMkAEItqAOLi4mBnZycdk09OTg4sLCykY4Db
1VNQPWGDpKQkJCVGYs933+B5XLl07tszO9qFo6pr8fnWQ+iQfj8o9J4ldmiYIjY2FgEeD7Hmm++Q
Wd+L/IhH2HBAHznZmfB7Yoev1uxD89D7N9R50W747e/+DVdcI6VTxnB08xY8jcyEz0NHhGTKDMhP
MNUB1d0HkdcuCXIT7XnY8fddaHrpK96J4e4qbF+zEpduPRWOxXmNfVAzvgFWDN6J9CAPOHsnYFzc
i8bWDunUD89PGYDO0lj88//4BZ4mSsvRjAiqa7+DkqY+DAwMsH3V97jtESPMcr1+CbsPaeL4cQN8
vWI9PGIlvzb5c5kZ78cVYz2o6R+Fgb42vt6wDxk13dK5HwcyAAQZAEJgqRmA5zcuwsI5RNjexOQI
LhzZA6+EciQGP0FYdg1LMQm7W3dQVFUFB7uLOKmnjz371FDY9OpzBPnhT+DgFgxPh0t4GJwtTAt9
YAuLeyHCMCfGzQpH7Z4hJ/IJvt+qhoj4XIxNTaKxqgxVxSmwvXFXSNdenAQHF2+EB7rCxNgE+3fv
hNOLeGFejJcjdu/dh8MmlugYnBeRZ0Zx5awZ0jLSYahvKPwKYkn8I/zzL36JQ4eN8OXvfom/7jRE
z2A37lqZCT1xh+c8CE3h3o0L0D5yGAGJhcKqMNUFPXVdFHVK1j/RWYRDmzTRzSqmz4Pr0NJUh47h
eXSPTqO7PgfH9XSgefgoUivbIW4rgqnxMeidNEOD9JJB9OOLOGZxTxiWMIyUzBw0V6TB5ORRGJlf
Qm19DSxNDIV8ecUVYXpyGM7W54RxXYMLaGxvg8GOP+Jf/7gFQeHB8Apnx2NmGLctTmLfvr0ws3Nj
Z4oFVKerOGV4Art27UFoWqVkcwvMTxmAB9ctYG1zGcdPWUk+LT3dCT3NY2iSXvUYbskVfrCqsbMD
G9d8i+BCyRWBtvxoOLn4ojArGS3dksaxsrgARRVVKC8rQLivJ9w8w+c+V50c4Yd7zg/ROviyYRXX
p+H3X61GvbRqpAW4wCsiSxjOS4nA/fv3UdAgKbslBdkICfTFkyce6BZJMlfOptX3sv3rrRPS+kZn
CNPb6ssRHRWGqMQkZCekoq59UJj+NpABIMgAEAJLzQAE37mA3/75K2zfvh2ff/Y5DCyfCtPvWByB
vT//GuA4tiupIDo1Bau++wLPI9PgYmOAPadvC+lkXNLZg1MsCLldN8LK/QbCtIhHtjh7y0cY5lQm
eeOAoa0wnBDoBn0dbWzasgUXHZ5icmoIR5T3oLh7DK6Xj8HZPw03zVSwy+A6CnIjsXKXKqLD/LFj
417kFpfi5qVTeBKZI6yLM1iVhJUrNiEiOhpbV/8NT1PqMTLQhN3fbUV4ZiksDbTh4JeM51eMsWK9
MmxtbfH3z/6AZ8HROLR3DR4EJKN3UFohpzqhq6GHkm5JUJjqLoXW9qOoqMjDmt9/hmsOj/Hc1xsN
HQ3QWr0CmsaXcPXCUXy+eg/L43Os3LwNWcXVGJ+S9PHdLpyGo1uyMDyfsphH+GrjLpTW1OOM0g5s
VzFi+bqIP/3pb4jNr8STu9ZCPg9s/QYnnP0Rep8F1ctuKIx3g9E1RzZugwM651BaWgL9Xdvx2CcS
WvvXwNwxFKkBd/Ct0lG8bHIWjh8zAJM9FdDWMsDQyDAMNfYgqZb/YuXAK4aKY8J652El3ShNcMf2
zeuhfEgLVxyfgteNoDtnYGjzjKUahZqKKqISotm5+h0MjS9g1/rv4RiWjQR3O2zcoYbzJrrYos6M
3bjMFszAx/kiNqzdjkOaR+DsI7lVku77ADt2qArPwWzfrYq88koob/0SmiYWMNfZB9PbvizVKA4d
UEZMWjYMDijBjKVVU9qO+77J8LhxHJ+t2obnQSFICIpAeePbP0hLBoAgA0AILDUD8OzGRVx1iRbW
V5cXA3UjU/Cm3emKPh7E8R8AAg5qaCMyMR4Gp08J4yXRT7HrhCSQc8a6yrBp9fc4elQf+keP4k+f
f4+yvnEkutvj8oOXzwT4OpzGMTtX5MZHoXGuAzWJXZv+Cr+SfmT73YfNrXu4cNoUA+OzuHFRD4EF
nSzNEA7qGcLu8kWcPPtEshijs+/lPWNvBzN8t/UA9HR1obZ3I/aduCFM19uqjgZWzx5ZnUd8eSuu
6+zGTrXjwjE4pqUGT98AnDI9ibb5l/dn+nF4z0EUyR5N6C7AnvWaGJqeQn5cAC5fscIxvTOIjYrA
xs8/x+lLlrCwvACtIycR4PUIJjZ3pAtKSHp+FerG1tIxxmgH/FgPPifGAyevPRAm7f/6c+icPMfy
ZQkdVXUEBIfC3OiYkE+1PRugZ+8r9GZv++SgpySEGas7sDUwgFu05LZGpu81dmwscO7CKdTwWzCt
WVh30ACL8TNNP2YAsgMd8T9/9Qfs3r0bf/rtL2FgH8imTkGPGarS3pe3eXQ1DiAwqw7j0jYxOy0B
10xUoGRiIzzLoX/8ArKSgmF8wZGVr2Ic0DsupEvzu4vDl67BWFkdGS2SoN/S0gDxhGR4dGhQcoVg
dhgJMRHQU14HK3c/2OooY8Xm/ThyRBebVn2Fe09fwNjEALx0YaQWh4+eE7Z31vohiqM88Ktffwld
3SM4xAyAtslVON44h4eR0itE7wgZAIIMACGw1AzA4yuncMH5ZZC20N+PFyk1rPd+BWuVDHHf4Rz+
6398ibi0JKjpaLI+EpDh54B1RywlCzA8rA1x0u6FdIwF+usG0LZ4hGTPO1i1QwsuLixwWV/E+jXb
Udk9giz/W/jr3zfA+ckTPLxrh607dqOU9Q5nR1qx/Ys/wPi6t7Ce80YH8CS+ig11YO0uFSSkJWL/
xg1wfOTCeu1b8TBccgVgYrARezZvRdXc4ejF5pXfIq2M9UbX7EFp/zSemOvi0PFbCHK5BhXtowgK
CoAO65VmFxRCS1sZFb3SRaU8tDiMTft1hbzrKq2Age0TiPvqYWV5FYF+Xtj69ddweBqFG+aaML/x
CN6u9jA0tUdW3AuonrwgXYuEyaF2HNqxEUdMrgjrO7x1HYxtvVGR8gyHTKxYilk4X9KD9ikrBPl6
QPfYeUT4umLd6i0sn0HQ2bsG+y3dUBD0AOt3GiHM2xHHrzkhJ/QJ1m7Yxtb5GNtXbkFYYjaO6ykj
p4PFtKpYfLlD8wMbgHEYqe/F8+RydHZ2oqkwBms27kLn4AB0VdSQXNmFgYEBhDy4gi379dHe3iCc
T/+USkyyIJn64io2apwU1uRhfx4bN+5BVHEHppvToCI1AKEu1tC1vodrxzRg656A3o5qXLG9ga5R
iQFoK4jAurW7UFDbianpady/pAnjOx5wtTwGLVM7VFaW49KJk4hLSmFmVROV0o780+vmWLV6O+Iq
utGW6YeVa7chv7QSfs42cHgUjPs3THDbL01IOzbMGt4p2RWHn4YMAEEGgBBYbANw8+ZN6Zh8+DcC
5huAsuwUZBQ3SMeA+uJURGeXsxIqxh3L87h5xxEvAqPR3NaC6LhY1pdj4bi2EIHxkvv8PHhF+3uh
tPllb3y0uxaeAeForCrG5UsXYGZmhsvX7NHcNyJNwYxIvK8w3eziVRQ3voy+Jhr74J/bJgxnJEei
XHgyfAS+QaHg1aWlLFVYzulZyNzbCqKWcnj7h0vHJKRFBSCloARJIVHoYbGquzoTFy/cxBBruKN9
HwjrCE4rYyknERkVjv7X49nsOLwf3BbS3b7vLew3ZicQ6fMIZubmeOARIvQ0Z8e7cNPqPNsPG9T1
DmO4sxqRSZL7xvOZGh3Eozu2wvqe+kYLDwD2NZUgKkV2HMfhepfPP4f0ynZhSuiLe2z8LB65uiEu
r4Z1attga2WLyJgEJOcWCWniA58K6/SJk/wMdExUKLrYYZ4aaIZXaKzwXMBC8yYDMFCfBUOjc8IV
JBl25gbwT8qFrYEaNmzeJrymqqZ1AqVNkvKSE+uPXds2CNN3HdREfpVk39uzfPD5d7sEwznSlIvz
NteF6anBLrB8Eon+1mKoK+3Glg1rYfXIH5P8gArMIOTpLWzZtE6yrePmaB+aweRAPQy1lbB79y4Y
XLyDPlEPrK5eQpP0SlRzlh+2K+lKDdMUnt89iy07d2OXihbyqzsR7HETngnFwlwPuxtILZHk820g
A0CQASAEFtMA8NcAT58+jebm5jcqMDBQCBhLj1G4XjsJFd0LQqNPLF3eZABmpuW/J8l74pxJ1gCO
j8+/1yJj9pXp48P9cLU7A6sHwdIpb2aCNYBymZmUu61x2T2Ht2ByQl5egWkW0Gdm5hzHT0IGgCAD
QAgspgGorq6Gnp4eTExM3ihdXV08e8YfsFpqjMLvqQtKXz4cQCxR3mQAFoqKVG+oqOiibd7T/YoM
GQCCDAAhsJgGgCA+BIttAD41ZmZmUFVdK5gA/kU40vJSEzvvlVW1wiehZZABWKaQASAUHTIA7w5v
/MfGx4VbEKTlpvFXgj+HDMAyhQwAoeiQASCI94MMwDKFDACh6JABIIj3gwzAMoUMAKHokAEgiPeD
DMAyhQwAoeiQASCI94MMwDKFDACh6JABIIj3g78aSgZgGbKQBoB/VpUXJBLpQ0osFgvlU948Eon0
0+LBndcjeZAB+IRZKAPA4Wn4VQBekEikDyVe5qjckUg/XyKR6JUPA82HDMAnzEIaAIIgCOLTggzA
JwwZAIIgCOJNkAH4hCEDQBAEQbwJMgCfMGQACIIgiDdBBuAThgwAQRAE8SbIAHzCkAEgCIIg3gQZ
gE+YRTUAE10w1tFGUkWPMDrcUY5bN5wg/3MTr+Jz+yJOWrtKx4DiOG/s3LUb+/btw2GdEwhJKZLM
mBLD3fEy9rDpqlo6CMurlEwnCIIg3hsyAJ8wi2oARhvx13/6P/HFXhPwH58U1yZh365DGJDMxezs
jHToVWbFzdDbtwlfb9qPii7JF968b5rhoJEtSktLkRIfiLXff4fo0jake1/Hqj2GaGptRm5aEFat
Wo+C1tc/aMF2UMrLIQmzM/LzQBAEQZAB+KRZSAPAvyjFf2uaf1eaM9tXAQM9Ixge08SN5ynAYBk0
Dh3FBGbg7XgOmzZvxc5D+ihteXW9GQHOcPJLRrL3LVxyDhGm+dyxwAXHYGGYk/LcDkcuPUZFSiBW
bdqDJ56hqG3uQFdXO+qLU2BkekUI9qXxL2Dn+BRej+1wUF0NWzasg/3TGDZnFq63jLFhyzYo6Zig
tlNiGvjvZPN94B/FIJFIpOWimTd0hsgAfMIslAHgnwLm83k6XlCEab3l0NAyRmtrNZR37UdKZgpO
nzjHeuoR2LxBCfUsYHvamUHpiAWzBC8xVt6Aw+fs8cDqBP7y7V5hWqCjBcxv+QrDnPJodyipXxSG
q/JjYGF6Brs3b4beKSsMTQxDd/9OFLSLcPuMBjxiCnHVaBeO2HijMS8Ka3apIdLfHes3qaKhtROP
b16BZ3yhsC5eEfg+yDsGJBKJ9ClqcHBQ+CKgPMgAfMIspAF4/ceAuAE4qHwEfGp+pCs2rl0JfRNr
RPg9gc4pRyHNaFU0du3WguwjlAP1mdi0cS0uXjiHc+cvYvWXXyKssA2xrtdw+WGUNBXgdE4Lxrc8
kRrmicyGl9s9smU1nGNrkOF3B+cuXIHhcRMMTQJWpzURUtTHdrQW+3T14Gh9CXqmDyULTQ6hqUPy
nAJBEMRyg1/55G28PMgAfMIsqgHoKcHO7apoHpeMn9r2J/y3z5TQ31kHlfXfwez8ZezZuB6XH4RK
EjDummnA3PHleLaPHfboXUTIEzt8sWYvrl69ClNjQ6zZqooW8STyQ5zw16++h+mVq7A6fx4796ih
uHWEOYtmfPnLX8DATnLV4PSR3XBPaWYOowQrdiqhtCwPu9d9C7OLV7B+9Rq4xxYL6QiCIJYb9HPA
y5TFNAAYH0RaahZG+BOAjOGueoRFJQvDA+1lcLh9C17ScRmZyTFo6pXcQhAY60diShoaaivw8L4T
bt26BY9nIRgc53f4JTRX5MCBTb/l5Ir67pfL6itvRkhhpzBclJeOxh5mDCYHEZecItxy6GvNx222
XGiK5PI/QRDEcoQMwDJlUQ3Ax2J6CNdOKUP9hPXcrQWCIAhCPmQAlimfpAGYGUVsRBjaBiVvIxAE
QRBvhgzAMuWTNAAEQRDEW0MGYJlCBoAgCGJ5QwZgmUIGgCAIYnlDBmCZstgGgH9VjxecpSKeH4Ig
COIlZACWKYtpAPinJfv6+n4QhD+m+D7wvBIEQRASyAAsUxbTAPCvS73p85Ifi4GBAXR1daG3t/ej
qbu7W+70jyGeF27S5M1b6pLlW5H34X3E93kplaWlIn5ceMBayuViqXVCyAAsUxbbALzpuYC8rDTE
xsahe2TxXtUbHuxBa+ern/jlBoBXQP73Y6m9vV04lvLmfUjxPPC88O+Ay5u/1MXzzc9lR0eHwu7D
+4jvM9/3j12el5r4ceHBfymWC56fzs5OoW1cSpABWKZ8aAMwI+6CsdZe7FFRhZaWNjZt2wPfpFLp
3IUlxfsmjly8LR2TwCsh7xXwv+IRyU8NDw+JMMAqJq+ciyKRSDgOsnHeAMgaA66BQRFm2DmYmhh9
ZfogGx4Sj2CKVc7BQcl0Pn98YhJjI8Ovpv0Z4svzvIhY/vjw2ARvlGYhYtvi4yNjks8oiYd4Huct
y+aJh0cxPsrKxug4JsZf5pv/HR6VHFdZL2ds9P3zKk883/xc8is6sn0Ylp5TybZnMTosfr9ts2X5
vk6MjQrj88+jPPFzOTk9wzMg5GF2ZgpDIvlp31d8n/m+82PAx/m2J6bYOZRue2ZaUm7GFqy8DGKC
NfCSYyo516+UEX6spMd/RDz02vZ4WR7GODuO4pFRTI6PCeeK/33ffL0ufly4KZKVCz5tft6E+s7y
P79e8r+ieesYHBKzcj3Ozv3wK/XvTfrB8m8Qzw83J2QAiCXBhzYAz68bQsnQTjoGNGSGwdr+qTAs
6q7F8+fPkVJcI4y3NdagpDAL3t6eaOiS3EoYHWyG54vniMuRmIaOxgqkJyUjO7cCor5OBLDl/cNT
hC8AZvrfwpFLDkI6Gbwh4A3myPgkGvJjoK5lhPreEYyKJQ2FrJLOr8zC+LxGXDIuS/8y7SvTXknz
ql41AEOYnhjEFeOjuOefgpkp3thI0g2PTqClNA3XHR+gTzzBjqWImYQx+D69i8CkQkwywzB/G5Jt
vtzO63l4fZznQWYAJicn4PfgKg7qmaNneFKoyAWxntirdAglzf0sgIjnlh9lx64wOQiPfCKQFeeP
R75RwvI8WI5OTKG3qQSmpwywf/9+HDW9gJLGThZAJb84Nn/7wvqkw7wxnj99br5U8+fNnz/fAPAG
vre5AhdM9aGkpASjC1ao7hzEGAtYc8tK1/P6uvg5mz9d9pfva2laKO64egtlZv58iV6uUzByM5OI
D3TFoYPKUFJWwW33AIjHJyCWbmv+uuev59V1vpz26nTZOl7Of2kARMwYjiE17BkOqe7BvgMqcA6I
xfTMDCsvd4TywsvOy3W9vv4frvvlPCY2PDUmhttDe0TnVGFybFgIGqlBj7HvoC7quiXjTUXxUNqz
B4lFTSzNyNx6xMwoNhQn4a6rF4qzYvHAMxQ5icF44BUulLU3lls+PG/6K2mkw3Pj0vn87+sG4PX6
zg3K/GXnD3OD0ttYgtvOj1BelA37ew/Rx+rEkCzda+llw/Onvb5O2Tj/SwaAWDJ8WAMwCaPdexFT
2iuM9bTWITuvEI3t3ehvKYem8k6cNjfHrp3b4JdYBpcrWvjNV5tgoH0IG/cZoa2tCYYae3HijDkO
7N4Gl9BcuF45iN9/uQpefhG4e+McjM6YQWXbGlxxCUdh7BPoW9wRtiVDYgD4fkzj8VVj/Muvfoe7
volsB1jjzlw/f3CRF3SedzFrJKbY3zHWa+F/ec9nfHKa9QzGWE9rSghq4uERduxGhPWOsooiZkGa
97h472uMNfy8H1qfG4njJlcxwHrYvBGZbwBG2LSmghis/Ow/sUXDGH3jrDfFGsNxFkg5jZkB2HxA
HT288zIr+dHkyydVcNlV8suIvHciZvmeZD0/fg4neX5ZsB5l2+b5HGM9NKG3xXrlU5P8jYwxTLNg
LevlywwAMIOrx7bjv/yv/4iEsg5h3XZGO/Ff/pd/QHyZ5DbKOFs/37epqQl0NNejtbsfz+2NoXVe
coyHxKwM9dRg7/oVMLJyQHpaOh7ammHFRmXU9Ayz7M+yIMSCIesJTsmO88y00BjzKwlCr5EFIt7g
8DxNTc9KjjVrVHgPdm6f2F++T/z4zRkAdgz4rzoeP7gdepecUVpSjKsm6th6yBhidihn2Xb49vh5
FLY3No5pth9jrJc3NTHOeqOjGBV6ycwwsO3zcjsxNcPKwRS62xpR19KFwjgfnLp4l5VidixYmeDH
jy/Pzzlfjvf8E7xu42/frId/ZAzSEuOhunUtTl9/LpSDWbbPwn6wc8K3PSrNwxDLO387RXa1gZcz
bmZmhDyz88XKGn+WZpLlRThm7FxLAthLAzDKylF9ThC+/Ho9wlNzkZMejXXffwnfxBLYnjmEmz6p
wjni504kErP9Ysef1Wt+xWCUlRfeG+fbGWbrHWfHm1/VEf6y/RQNDQvnideZU0d2wzEomw1K3qbx
vHmCNfb/C57Flwjj3reMeeMPt1iJQZ9gx5Lv7xRbd09HM+rbupHoeR2Hztgh+Ik1DlvcE9IJ9Y0d
R1n94tvmBrefX3Vg54cfB17P+gd4uZh3Ltmx4mVynOeXBflJ9peXi9cNwA/qOzsjbWVJMDhphZHJ
QZw/YYzUijY2eVbSbvV3obqhFaUJL7BN9QiG2Qnk03ndGmF5kZVVnt+x7iqcPH4apW2DmGVpeNnk
eeJ/+fnkx3zuPLJ9JANALBk+rAGYgonybvhntwpjOVHPcURdCV/s0Ya/y238+jdfQF9fH3s3rYbR
RWc42BjjdjD/lb5x7FE9iGeuzvjtv/5JSKO8cyM0jK7j1hVd2LxIENYX/PQWDh81hMbONThw2h55
0W7Qt7wrzJPBG+0B0TBEzQUwND6PwuxYHNQyRP8Ey91IH5xsjmPj5i3QOnUVPSxd0FMrNr4ZSlon
UNvRj7TQh9i+bSO27ldFalU70oKdYXP/udDA3b1uicTcMty/ZgotbTVs2LgFIUmlcLXWwj/+0z/j
cWSO0BjMNwC8YXK+egbesVm4dloHHnG84ZxFbvQzKG3dgR2bNmCzxkkW/MS4ZaqDPTsP4KsvP4db
RCZcbxpDea8qPAISERlwD8oqqtA5YYaqzgGUpgRBgx3bXTt342lIKlqrc6F/5CD27dqOq47PMMwa
ZX5Z86UBmITdeUN8sXItbriFY2a4GfqH9mLdps1IKW1FkMtNHGK9ygMq2ojIqEF5RjCcPcMR9PgK
jl99IOR5kvmTqEeXse/wBTbOLAWPeoya8jL0drfjyml1HFTSQFBsJtzvnsUmdpxVDM6itX8YD6+f
gW9yGaaYgbCwtkV5WQmM9FRxcO8e7NqljIKGHhQnB0Bdje/THjwJTGCNzcSrBmBKjLNsGZWj5kjJ
KUZXRysKi4pZcBuCm+MlKB9Uhf7ZK2geZOegKhWah7Zh45YdcA/LQoj7DTh5RbHzI8L1a5eRWVCE
84bK0FA1grOzE576+MOKGaR/+u9/gPmli6wnGyjsm9stCzz2TxTO//RYLw7v3ACPJMkVLM4sK1OV
NU0oSQvEgX27ccL4BvKLUnHk4E5s2rIVd1gw6qnLhun58xhgjWeC/3089ItFUuAjlt+D2L1xA8ys
H7BeZz8cbUygorwfakdOoLy5TzATMgMwMj6F5oI4rFixFvZPAlBV34ymunI0t3fB4YIO1u1gx3Hb
Zlg5BWBY1IUb509B5ZAq1LVPoqK1DyFPr7Ke+37ccPJFVnog1NWVoXpEF3FFDZga7oDlsYPYu3M/
Pv/ySzxPKGPHWnI5/fldS/zt21U4d9OFjY3A3EATK1Z9JxiP9BA3aBxQhrKSGtxCstBemY6bD58j
Jegh9C85INHvHr5ftxFq+7bjiJElBllDlB35FLu2r8fmvcqILW5ATqgLTlk9QFdzEav3xmjuE8P7
4RXhXOqZWrLxIWRF8qse+7F71z48j8gQysV8AzA0zMzia/Wd2xePa0fwj7/4Z5icM8H//MUvoHnJ
EQ/tzaHC8nvn9j04PHFDcWYMNqxbAbWDB7B3rzqq2vrgevssPOMKMTXQANub9vB6cgO/+Md/whnn
INQUxkJLSxkq2toIy6lEH+vYnDJQZ+d+B8yuOqJ/hJXZHjIAxBLhQ98CSPO/jZU71FHX0SP8Il9p
6AP8af1uBHs9wdoNKsgrKsOTmxfh9CIad64YwCm8iKXqwDYVFfj5PMPa1buQmV8Cb2dr2D0Kwh0L
DVx9nozZ3hJ8/tlfkFRUAT9bExwwtkNW+GNon78lbFcGD7zjbMOxT63x3cYDCPR/gb///o8IK+lB
ptcNfL9eGUWl5bA8a4ob162xYfUWpBaWwfHqRVjfsMOe9ZsQnFqIwPtW2Kl6hjUYxlBlZoFzTGM3
fGMyobHjK5g4BCLqsTXW7D+OnAQfbNmlidoe1vNkPTmZARCxHvNkXx22fP932D3xxRn17dilZ4Op
8U7sXruamYFchD6+hN2HTZhBuokdKgYoryyG+s6VeMKC+tE9f4HpXS+UJfriT7/7E85fvoa9a77E
AUMrXDq8F+t3auOZ9xPE5BTB9dJRfPb3rfDwdodbcAQG2bZfNwBXTh+FrvEZmFveQGZ8AIzYsK76
PsQWNiHI7SabbgXNHd9j1zErpATeh/Y5e4S52c4ZAB7vH18wxBlLN3440FKWDh1VVRzRO4UC1iPf
vfLfccsnAXHP7LF+ozKKSytw7rAyTKwewlR/K+z9WM+yqxg7lVWRmZ6Ir/72J0SkFODRJX0cMbWB
uQYLmnt14eHlgoCEDKFhmjMAokHW0I9jZnwALg5W0D50EFvWb8ST0FTkR7jiP373V1y+eg3rvvwD
9FmZMNXci9P2nsiLD8TpS3a4cEIZJ67zW1FiqB/cg7C4BKz98l/hFl2IhOfXoXbGGkl+97Fb4yzK
c8OwbY8W+ge7sX/rRkQVtbFzNoGxgWqorNmFrEYRZliD6vfIFmoaWrB+Eoh4r+v403drUNnQDIN9
m1nAfI5iFozWr96B588fYcvO7RhgW/e5fQomt57B/dpRbFQ2QkVhLjPEm3Hv4UN885vfsQD+CPfd
n6CssUvojcoMAC9PPKTUFyfBxPAE9mxYi33KOqjuEOHGGRVs07+KgsRgfPndBhTUNODejQu4eNUG
G778D1x6FAZHs73YefSCYBRXf/Z7HDltAUO1rfh6sybu2Z6Dsu45VJYXYM/Gb+EazUy51AC42plD
zeAUTptfRF5mPE4an8Yx7X3wiClAasgTnLloASP1nfhu12EUpARjv74pkkOeQt/CAbGet7Fm20GU
FBZBZ9cWXHN8CJXNG+EVk4sod3us2qiGdtYTP629G3/96jvWc09AVaInfvvbz2DJzuWmr/8MXVYG
T+3fiF3MqLl7PkZISi7GWbmYbwD4tbQY16uv1PeAvA60ZPthwzZ1VNaV4MC2HQjPKof+nr/iuK0r
WovisEtNB9lpsVi14jskZRXitok6jl9wwrnjO3HtRTLQX4ldSkrIyEln5ugAkvPYufr2rzhoYA4z
/f34bMU+PL5liT/+fgWeeHrgsa8/egZH0EsGgFgqfGgDwC81e92zwI7d27BlyzZosAbyoMEFDE2M
4Z6VAbayHutW1rgWNHfjBeu1eSRUsGV6oH3sGJpFY3jmYIot23dhK2s40qrb4H33DJwC01kJFsPq
pBp27dmNvft34JT9M5Qm++G8gyQYyeCX7WbHB2GivQN71PRgaHQC+zd9B4MrD+FmcxqGV14I6Wan
x/DU9jTr+V8RxjE7hXifO9ix/6RkfKgKh1jv2+ryKbaskzDJRO8AfKPTYHxUFRnNE+gpDMIGNQOU
Zkbh0JFzwqXjIdbrlxmASXbcM4Lv4avv1+LkCSOcOH4Ef/t6K1LSYlhvTEfopYirEnHk1BnYnj0F
i/uSy/63Lx6Fs080Th/ZjvCSPpSEOOK3v/8eVjbWMDM2gPF5B7S0NuD+bWuYnNLCaQtHtPV04NnD
2zh3/jh0jS6hqUfMeoKS2xEyA3DJUBPWj31wi+2TkrIangWGw0hjFyLT8nHumDpOXbLBBf1D2Gdw
GclBj4X9Dn16bc4AjE/NItP/Ljbu14Pwo8yTwyjNTsTqrz/DPe9wZpC2oaBrFv43T+P4lWc8BSqi
HkFDmwU91tt+ElfNOpF1OKCuibTEaKgdPSGk6cgNwK69h1Hf0ghn+6swPqkJ0yvOGBifxEC/xADw
B8wGuxrg6urGQriE4YoErGQB1vriafztm62wYcfH5Lg+rly9ygLZXuS2S26z9PV2wfrUfpy/HySM
62kdQFgM6yke2I461ibmBd2Bznl7FMR6Q/uUvZDG3OAIrK5cgd5JS4wwQzkkGsIsK4PGLGgKwYHR
29kKH6eL+Ms2TYR53cGhkxZs6jCUNu1EXockAJzX3o/L1tZQ1lAXxsMenMVZh+dwtz8DOy/JZftr
R/fD1jUSBcmhsLC6hIPq6ghOLMXkxPicARgdH0deQjAC4vOEZTj3TNSgaXoXd2yM4BxWAEy0YNsB
JYRFRkPn0AFY2jqwwLsO55384GypDZsXKZhoTMGffvV7mF+2xqWzp3HC5ByOaWrAKSBXWOclY3U8
CMuZMwAuNsYwsn0Ml9sW2LvvAO4/D4SFgRLcw1LhwMqavukF2JkZYsN+XeQkhUDT+BIzAK7CFYAw
95s4fVtS37yum0KVmXwVjTNCxwDTbdizZi1q2Gai7pzA//a//w80swoR/9gCv/vbBum51MO5ay5o
aazCHbsrMDp+CBfsXFlbMon+PqkBEK4MDf2gvmuY3cNgYxaUNc3YxsZw5KAGKjtFOKOzBc9TGzHd
mg1l7WNIjwuB2vEzPEeoTXCDlrYxTp9Qxf2IErbeFuw/qIyy6nIc1j6BqpoCfPefv2f17wouXzTD
IXUDlLBgGPjsAS5amkBD11i4cjPIyiwZAGJJ8OENgISJMclTya/De6WSZpkvP4UZtl7J8MsKM8TS
jEtHhTQzQpMhwO+jypbn91znz+OMsAVLYt2xdstB1hRLmOoowMoVa/HCywPrV3wPm+s3sWHjNjx5
4QmlDd/jnPUN7Nu6GdcfusFAaROMzl+Fgdpu1rg6IifGHV99sR7Xba/gX//9V6xhzoHeoW2ILBtA
c9ozfL1HG9UFifjsP76Ad2KR0DvhQZc//Dc7McAa4PV4HP3yLQgr/T0wsLwNMx0l1gu7Br19m/DF
bn3kxPli5febYHftBn7zy3/Gw8AkGKisgGt8FUSNudizeRMcHrnh1OFDsHP1wQvnm7hm/xCXz2hj
zfbD8Hz2BBev3Ma9m+b441/Wobh1CKPioXkGYApnWE/rglsCEt3O4//657+hjfW+VLeugG9oJDZ9
82fYP/HAWZ3dWK9hjgQ/J2ietUfAQwtoS58BGOT3lsf7YXp4L7ap6cLJ6R5uWJjjl//yr3gSGAW1
Xd8ipnwQTbkhWPv117C9fgubVq2Co28SXK2PY8MePViwAPPrrzcJD39+9/e/4MJ1B6ju3IgLd93g
4XQDdrcfsyCkhq83aKF3YkZoTGUGYGqsH2fUN+O7fYfh6OSECwY6OHT8Mgqy47Fzy1Y8fOqBIyzw
PYlIw8NLuth4QBdWZsexV/csvB7bYcWqvbCzMsW//OdniE1MxLZN36K4B8j0uY4DxldRkRyA37Pe
XHppKwoiH+Mf/7+/wJPIfOZp+e2UQeEByOrsUKz49mtcsLHFg3vO0N6+En/cpotQDztsVTsqHCd7
1pPctv8wbC3PsF6pGopK87D9u29Yj/w6Vn/xK5y85QP/O2fw5SZl2NtZYeXmvQiKjMSF0+Z4xnr/
K//2Ga66RHOXOmcAxianUZMRiC//+hcYWdri3l0HViY2wyM8G9fOqML6OTMlg1VYvW07XB454tuv
v8EzLy/sX/c5jO29cNtsP0zu+GFmrAv6+3fC/Po9XD93HCdsHyHB/x5WrtqJ69bX8M//45/hGsOC
n/QZgHuX9HDI4ilqU93wD/+//46S9gGcVF6Nhz5hUN34Jc7efICb5nr42yZVZMf7Q0nvDOL9H0Dd
1A4xz+zwyz9/j5u3b2LV2o0ITs7AyQMboX/akpXjA9h/zBr5yb7YuUsdj25aY5uyAQpzErFnyxbc
d/WAvroKHD2D4GJvA3vHpzDVV8KqnQYYYm3DgNQAjE3OoCzh+Q/q+3ffrkZUXBS+/f2XzDQlQ3Pj
KpxlZkLzwEo8jCpnRiiNbU8DOanR+O1vfoVLNxywb/Na3PCMwfMbp7B2x2FWt3TwL39dKRjTHV9+
CduH3jDXV4OhpT0cr5pB96wtYkK9YHr2Glwe2OAPf/gaCaUdzHj3v9KeLQXIACxTPpYB+FgMs/0s
SI1BYHQKxqQPko2PiRHm9wIFdR2stx4IM1NTuAcnYZodl7qSeJw9a4q7TwMwxnq4nQ0FsLIwwxWH
+2gbHGVBRwRP5+uwYIHqua8/KusaERMeiOq2QXQ3lMAzKFx4Dczt1g24BSQKlUkwACzoinra4OXp
icbuIeHVpOHRcdQXp8MnLAFdTRW4fP4cHJwewD8iDpNTE4j2foSzF6/iiZsbiivrERvmg4KqFuFB
rpqSJJwzM4Wdoyf6WW+wvjQdVpZmuGBhi/LGbvS2VsD++iWYn72I1LxKlg/JQ2wyAzA6OozEqGAk
FtSip7EEvv7RGB0bQrDvc9SxnlFhUhDOmpnhtssjhMRnoK4sD5HJ2SjPT0VUSo7QOHDzNjQ8ismR
Xni5OcGMpb/l8hwRkTEoLqtEeLAXKpt6MMVMW15qEEzZcX7gG46xaRbI22phd+U87O8/QUBUEqrz
4rB5xyZcuWyLm87eEE9NorY4BZfZsb94+TrK6tsxzvL88haAiJmAEUwM9cDzqbOwbVuHp2jrG2Zl
cwZFmWHCeb3rGgwRa6QmxJ1wdb4KM3Y8i+u6hOc/Htpb4eptZ3gFhqCmthaB/l5o7R9FY1kmQuJS
MTzQDSfW8wxNr8FEezbWrt+Eyp7JuTdIhAcB2blorsyE9eULMGPH2i8sCjGJmSgrTEdgRIzwMObo
UBdc7tnA9IIFsqqahYf9sqN8YX7BEq7MdOZXNOKJrSH2aBnA2sIaUTnVmBgXI8jrPtsvczx5HoJB
dpz5A2UyA8Bf0+SvhzaVZ7FtX2TH9hz8Y3PYsZ5BSkww0kvqMTrYAS9fP7T29iPS8wHL3wXcc3uC
1PwKZCeFIiG7hNWJSXS3lMHWygznrZxQ2zWImakRBLjexXmLa3D18EBxTZvw4CA/53msLoUm5WO4
txE+XkEQsfIdE+SJIlaX6ouScMHcDDce3Id3eByaassRGpOI2vJ8RCRlor48D0537dl5OQfv6Gzh
FkZ3cymuXTHDpZt30SkeQ1KIF0JSJM8BeTy6j7KWfmaoY4Rz6fA4EOKJcVTkxePSBTNctr6FqmZ+
a2R47hYAfzC3OCP+B/U9PNAL2SU18Hd2EJ6hyYkNgr39IwSG+qGwph3i7gYEhkWiuakeHo8dcfHc
eTi4sO1NTWGoox43r17ADWcXeAeFoUc0gtgXj+HwMICdhzY4XD/HypU9Ktr7WR1vxL07V2Fufo7V
k3zhYU96CJBYMiw3A8D3YWh4RHj6mgdAoeFmEp5KF54ollTMWTafX00YGZN+qIj1tviT8+IRSc+H
I/l+gEi4983hVxz4U8k8CAwPDQr3+GdZsOPBnjMzOT4XdIVti4aEKxSy95L5NP5eNX9Kn7+KJIO/
GsjnT827mMEb4Ek2YXRY8r71qCyfmBFuM8jeeeYIr/ANvazc/ElpvowsLzx48uEJ/gQ2C6o8iM/M
sHyzbU7PzAr54z1MAbaz02w/+FPj/LUy/vQ+/8uX58eSHzN+2XXuwgsLvvzpZ/7EOQ9GwyxY8n0Z
lx5ntnPCceXBW4LkaLYVx0LnhCkkU1nZYusennfseSPPtzffAMxtW3ZC2HKS7fF34aXXhaTncZAd
D1kyfnz4uZDB3xjg5Z0/Kc+vNvFzzvdZlmZssBWWpzRwxdGLmURmXvh+S8X3jR8TGXzf+dsXfNq0
cB4leZRte0L6Bsm49OTyesR5ZHcat7yThOEp6ZPtrFhJYPsgfFuA7bPMAMxte2zetnme+brZuRsf
FbOyKilvYlYnmZeVwP7yt1n48eF/eV7mlx3Z0+7cDAuw/MnKnHBcmWHg368Qjic7FiI2bZIl5mnm
6g6Dl2H+xswUK9v8jQvJmxcvtzMzJX0LYt40Sbljx4+XL5YHfl5H2Pnkr2ZK4OeSH2/Jtwg4vF7w
YyEzAHxY9sYHz69wnJh4WeRvffCjzo8TP0b8YEzL6hS/msXOHX9jRbbrsu2J5pXVGdbG8Wn8dh6/
TcivRMng6+FXxWTwcsDTkgEglgzL0QDIGsyPJf6FMllj9DHF88DzIgRPOfM/qgb6hUZH7jypeL75
uZSZGHlpFloiZgL6uttRWVXLgt6IJBDLSfc+EvaLBbDePtaD/JH183R83z92eV5q4seFG4APWS7e
Vjw/3AC8fmvyY0MGYJmy3AwAr4S8YeCV8GOJB1150z+GeF545ZY372Oqp0f6TXc582Ti+ea9vA+9
Dzxv3Dz19i7eNnvZvnMTIG+eTHyf+b7zYyBv/nLVxyoXbyOeH97+yMzAxxAvuzyYz4cMwDJluRkA
Ds8riUQifSzxKwC8ffwY4iaAXyGZDxmAZcpyNAAEQRDLFd6W86tr8yEDsEwhA0AQBLF8IANAzEEG
gCAIYvlABoCYgwwAQRDE8oEMADEHGQCCIIjlAxkAYg4yAARBEMsHMgDEHGQAlg+z7F9//wC6e3rR
09tHIpGWqnokf3kbutCQASDmIAOwfBgdHUNlVY3QsPT29pNIpCWsmpp6Fqjf3Ob+XMgAEHMsFQNQ
npUEN1cXPHr0iOkxSlmgysrJxLDsp/3ektrCbJTXdUjHZlGek4uO/le/erVcGRkZRXtHp3SMIIil
DA/+ZACIRWVpGIApGO7ZBCVtQ5w9e5bpHNLzi5GaloThH7kCNtHXgsBwyW+my7ipuwX/9d83YZjt
E/9hHMON2+GdXC/MW+5wA9Da1i4dIwhiKdPdzT+HTQaAWESWhgEYg4meAcpfSTqGnPxCDA32IzE2
FPcfP2E9+wY8e+SAq1ftUNncg1jXC/jVb79AdF6NdBngsc15fPPdKly+HyCMm+7ej7Ccdoi6auFk
ZwObazdR3igCxvsQHxeBx3dv40lwEmrL0mF11QZlzZKKUZgSChsbGwQllwjjudERyC5uEoYVFTIA
BKE4kAEgFp2lYQBmcEZlG1Zv2Q0VFRUYnLXGUHc9Dh3WQWVFIb79+x9g7fQEl3XVsHmvLm5ft4az
bzjive3x5TcbkVTSIF0PcPviWTwPjYWh5gHkNXXAWk0T0fmtiPG9i9NmF2Flpo/1miZorsnBf/7h
t7C0vo5Vf/8z9uka4/JpbaiaXUdhchi2btgFKysr9ncdnscVoCQ5AQUVrdKtKCZkAAhCcSADQCw6
S8MATOK0lhruPA9HRkYG8orLMdVbC10jI5QVZePwSRMhVXNRHAyPHMGly9bwC8/FQH0WjprcEObJ
uGV+Es9SmtBZFA5N/RM4oayLuII2ZER7Qk9XG3qHVfHbNQeQlRkHLWNzYZmH5ofhHs9MxEQ9jE5b
wu7MMXyxYjuOsG0p7diAcw6eQjpFhwwAQSgOZACIRWep3AI4rqaBxBqRdJzRWwHVw0dQXJAJVV19
jLNJeenJSM4sRISHDf7w2T6UFCZj11ZttPW/LLjXjI/CMTBPGH5wWQf/2//635BWVAmNtd/ANToP
mdFu+PdvdyIlJRLqBieFdLdPaeJpdBXQkQOtY5fw4r4N9qgdQ1lZGWxMDPEiqgDi/j6IxGNCekWF
DABBKA5kAIhFZ6lcAXC+cRN5DfPWL2rB9Tt30VBXiet3HTHDJhXG+2Df3p04sP8g3MKyMDU5BN1d
O3DDNV6yDMP3kRNCMyTPBMyK66G25wCK2saQGeKMnbv3QlfvCLTOXENFRT5u3nsgpAt8ZI+YvBag
vxo2N10wMzOCO5YG2LuXpTe7hu7RSUS53EdIQpmQXlEhA0AQigMZAGLRWRoGgPgQkAEgCMWBDACx
6JABWD6QASAIxYEMALHokAFYPgwPj6CtXfaRJIIgljKSLwK+GqgXAjIAxBxkAJYP4+MTqKisRnNL
G1pa20kk0hJWRWUNBgfnPRi9QJABIOYgA7C8mJiYwAg71/x3AUgk0lLVKMbG+btPCw8ZAGIOMgAE
QRDLBzIAxBxkAAiCIJYPZACIOcgAEARBLB/IABBzkAEgCIJYPpABIOYgA0AQBLF8IANAzEEGgCAI
YvlABoCYgwwAQRDE8oEMADEHGQCCIIjlAxkAYg4yAARBEMsHMgDEHGQACIIglg9kAIg5yAAQBEEs
H8gAEHOQASAIglg+kAEg5iADQBAEsXwgA0DMQQZg+TA1NYXaugY0NDajsamFRCItYVXX1GGYtb0L
DRkAYg4yAMuH4eERNDW3YGZmlkQiLXF1dHSjt/fVQL0QkAEg5iADsHwYGRlFa1u7dIwgiKVMd3cv
C9RvbnN/LmQAiDmWhgGYgvfTpyhrE0nHfyaTfbAxM0dRi1gYFbWU4cFtd4wLYwQZAIJQHMgAEIvO
0jAAYziqchARxR3S8bcjyMURHlGF0jHGWAv+9n//AzYduSaM9hSEY/sKNdA1CAlkAAhCcSADQCw6
S8MAjOP0EV3ElnVJx1nhbyyDid5haGpqwvSKM4bHJxDj9QAamho4pH0SpdVl2Pf1v+E/vlJC/cCk
ZKH+apw8dgJa2qp4HFWC2dYsqO4wxOiEGA9szgrr0j5ijIYuMfLjX+C4kSH279qNa4/dYWV2BDtV
tNA+Oov+lhKcOHaEpddBcFo1W/EgnKwc0L7wz+N8UMgAEITiQAaAWHSWqgForcrCFcsLsLW1xRdf
fo4XMYnQXPEVzK3vwsvHFyVN7XA8dxRnbnhibIrtAGO2rwK6+mdRV1OIQ2pHkJeRgCNKxhga7cOj
O1bCug7u+AbHHQMQeN8UqzXPoiAzFH/4998iJDUDV0+o4daLMJw9sB1KR8xge+U0fvfHL5DfOoSO
lnZMzAibUVjIABCE4kAGgFh0lowB0D2KrNYJ6TiQEeQOrcPHcPmyJb77+9/xKL4cLaUpuHrFBse0
jiEspQped63xMKxIugQ3AJXQVD8O3lFPeXEXWzdth562JdqbKnBC9zBb12VoKW3GYRsP+LtehVNY
AUvZBUPtY+AWIvLxLdjY34Py6u9gdNYSl69chsZBDeQ1vs0+LH3IABCE4kAGgFh0loYBmMSx3Ztx
7LwdHjx4AA//cDid18cu9VMICPLDX//8Z9g9C4WjnS38/LyhsWUlLjoGI9zZEhv2GKFtQGIcZnvL
sG+PJlqEOwIT0Fn37/i3L7VRlRuF1d+tg7+/P3T3r8O+sw/g5XwOVh4JbNONOLRbBfyxQS+7s7B6
EIyHVw1w9II9fD3uQVv3LLrY/idFJGDwpT9RSMgAEITiQAaAWHSWhgEAkoOew+LiBZw7dw7Wd1ww
ONSPR7esYGlzHe4vfFDdMYDStFA2/zwcHrxg4R0Qt5bC6vI11HWPSlYy1oeoyHiIpySjPTV5cPcM
Z0OziAtwEZZ19XiGpIJq1JRmIreqFZgZQmxkDLMgQE1+BrLK29jQOB7cssa5C1YobeX5H4K/mw96
x9igAkMGgCAUBzIAxKKzVAwAsfhwA9DW/m5vWhAE8XHo6ekjA0AsLmQAlg/cANTVN7IKPU4ikZa4
mlva6EuAxOJCBmD5MD0zg6bmVkG8cSGRSEtX/Dc7xsYX/jNmZACIOcgAEARBLB/IABBzkAEgCIJY
PpABIOYgA0AQBLF8IANAzEEGgCAIYvlABoCYgwwAQRDE8oEMADEHGQCCIIjlAxkAYg4yAARBEMsH
MgDEHGQACIIglg9kAIg5yAAQBEEsH8gAEHOQASAIglg+kAEg5iADQBAEsXwgA0DMQQaAIAhi+UAG
gJiDDABBEMTygQwAMQcZgOXF0JAY/QODGCCRSEtag4MizMzMSGvuwkEGgJiDDMDygf/GeEVlNTo7
u9HZ1UMikZasulFVXcfa3AFp7V04yAAQc5ABWD6MjIyivaNTOkYQxFKmr2+A6c1t7s+FDAAxx1Iy
ANMT08LfmXG2vZoqDJaWYKi+WZjGmezvxli/SDr2Y8xgYqAfM9Nsx96aWUz09bL/pcxMYaK3n+2X
dPwTgBuA1rZ26RhBEEuZ7u5eMgDE4rIUDMDMyADaXrijyOY2RM1dGEz0Qfzazcg5qo8sLTXkW9zA
xNgsBrNj0J5RLF3qR5gVoei8MfpbR6UT3oZxZO9ag8J7YcLY7EANcrROYnhEGP0kIANAEIoDGQBi
0VkKBmB2rA9Fx1UR9vf16CxpRV+kB0qcgqQzJ1BxRgdlHtGYHhZhQjzGJ6I/MxldabmYYXmfHh7A
SEsjelKSMNTSy+ZPoODMMQx0TmJ6sAtdcbHozS0XVjfSWIfpKWEQo2yZCfGEZATDKNRXQ+yOQ8w4
iJgfaETWwaMYGWfrF3Wjm62jJ7tESDkt7sdoewt609IwJprAeGsVurML564ejFQXoSM+GZPSVQ+V
lmNiRLrRjwgZAIJQHMgAEIvO0rgFMI3B4jx0Z2RgbGgCvaFPUezgI53HAldeGPKtH6Mj6CGq/GPQ
5mKPzKPGKDQ2RENcLgYTXyB6xVoW9E2QonQQvSW1KLUyx0BjO2pvXkLR+XPIPayF2tAk1N08j/pY
ZgYmu5CtbwBxHzcUnH6UXLqGJm9X5J67gZmJHuRqncSoWIRaewsUCuvQRHVwCgaTPRG7eSfyTxxH
8n5lFFteQMqubWhMKcNgUghyDE6g8Jw58s/bYXRwDM1Pn2Go++NfSiADQBCKAxkAYtFZig8Bdgc8
RvEdX+kYK7A5wYIB6Ax+zAxALDp9HiBLzxh1z/wwUNeJntAHKHB4LqTt8LBB0fU7KLO1xGDbIDqD
3JgBOIsctd3IuHAfo5WpKLrphsG0IBTdeCosI2EABcZmGBmeRoP9JVQ+ckOh0TmMjo2z7bqj6MJZ
5GruRca5e+iJ9kDBbcn2cjVUMSACxKl+KL3jguJjmkhVN0CpxUUkrFuDpowaId1SgAwAQSgOZACI
RWcpGoAu/4coui25AjA7MoCS42qoCc9Fd8h9lD0NwWhrMwbLKtDocAFpR6zRGeWOghuPhfQN9mdR
8dAdZTes0BEfjXQVTfSVlKLx9nmkGtqyFKyA2lxCtuEZdFfMfyJ+APmGpzDYM4tZUQsy961H/B4j
iKryka6kht6SEjQ7WSD9tAO6It1Q+jiQLTOLopMnMDTKlo5+gTJHd5Sa6qLkng9EpYUovXAJfbX8
lsTSgAwAQSgOZACIRWcpGoDBRF8krN+MLB1tZKodQqmDG/j7AV2B91ETnIBO34fI1NZBju4R1Aal
oD/JC/FbtiD7sBYyDS5gtHcQFdcvo7+mAWVmusjWM0COtiqyL94T1t/jfRMJB0+9fOJfYBDF5y0w
2C55cLAv1Blx27QwJupl69Bj6ziGnMOHkGfzFL0JPqjwCGepZlB6/hzEIzzPbNqTSIzWZLJ8qCFT
5zAKrtzD5OgkGpzuQ9Qhv3J9SMgAEITiQAaAWHSWogGYnZ7EeFcHRpqbMdbzcpszE2OYnpS8Kjje
3oyRDknvutvfEUX3nmO0tQWyD2dNjUgL88w4hpuaMTU6zpafwOzUJJru26AmIFUyf45ZTLNjMMuf
KpQyt47ZiZfrYBVlZnIC0xOTwixhGbbI7BSbNiZ56m9mZBDDzW3CMGeitxfTUwv/Ra93hQwAQSgO
ZACIRWcpGoB3pS/mGaq8o6RjP053sAsydE5jbPjjB+QPzfDwCH0IiCAUBP4hoN7eVwP1QkAGgJjj
UzAAki74y577jzEzPi4dWn6MsX3nnwJua+9EO4lEWtKqrKoVfhNgoSEDQMzxSRgA4q3htwFEQ2J2
Xkgk0lKWmLW5vF1daMgAEHOQASAIglg+kAEg5iADQBAEsXwgA0DMQQaAIAhi+UAGgJiDDABBEMTy
gQwAMQcZAIIgiOUDGQBiDjIABEEQywcyAMQcZAAIgiCWD2QAiDnIABAEQSwfyAAQc5ABIAiCWD6Q
ASDmIANAEASxfCADQMxBBoAgCGL5QAaAmIMMAEEQxPKBDAAxBxkAgiCI5QMZAGIOMgDLj5mZGRKJ
tMTF29TFgAwAMQcZgOXD1NQUiouLUVZWRiKRlrjy8/MhFoultXfhIANAzEEGYPnAK3BRURFaWlrQ
1NREIpGWqHgd5Wb99UC9EJABIOYgA7B84BW5pKSEDACJtMTF6yivqz/W5v5cyAAQcywNAzCJe9dv
ILfh5frLMsLgGhQrHSMWAjIAJJJiiAwA8UFYGgZgHMcPqSGypFM6zqaMDKF/8OWyIyOj0iEJPE+v
Mzo2Lh3izP4gzSgbn5IOT09NYWJiUjq2PCADQCItDTU2NqK9vV0QH5aNt7W1CcNkAIgPwlIxAKeP
6CK2rEs6DuRGe+DW8wiM9tRC9+BebNuyAafsXDA41IubF05AQ0MD+qbX0DsyCedrJ7FP6RA2rl8F
++fx6GupwVFNNaiqKOG4hQNGJyYQ9Pg6VNQ1oHbEAAV1PWjMjIKjo790a8sDMgAk0tJQR0cHIiIi
kJGRga6uLnR3dyMxMVEQNwJkAIgPwlI1APGe13HeyRUPzY/DzN4X4sEeON13gsMlU/zt8/W4fPky
1n/1e1y84w5Tg/244p6C3toErFM9ikjPh/j+62146OGHyOQMVGeG4Y//8hnOsWUO71uDFfuOYXJ6
CuPjE9KtLQ/IAJBIS0O8p5+bm4srV66gsLBQMAJWVlZC/eTzyAAQH4SlYQDGcFr3KHLap6XjQIrf
bVy+/xiXdXTgk9YmTOvqbIadkTrW7z0MFxcXXDE1xuMXIbC8YIiMlklAVIFNKrpoFw8jNToMDxxv
QmW/EXyeOOGrr9bj0WMX3LG1xOlLt4X1LTfIAJBIS0P8Mj/v+fMn/S0sLHD16lVUVlais7OTbgEQ
H46lYQCmYLhnE/ZpG+Ls2bOwcXSFv6sdzO54oDjaA+s37MLZM0bYqnYMiQlRUFXahpv29jiopIKE
nCqcMz6EqAoR0FuIDcwAhIUH4pjBGdhdu4LVa5WQnVuI04d34by1PYwOq+C2Wwy6KnIRGJgs3f7y
gAwAibR0xAM9D/jcBJSXlwu3BWTzyAAQH4SlYQCA8qwkuLm64NGjR3geEInGpgZU1DUL84ozYtn0
x6jtknwUo7U6T0iXXFwvjJeX5KNHPAVMDCEzvwTTM5NICPcVlimpl9xWmBC1weXxI/hGpwnjfQ0V
SE0tFoaXC2QASKSlJ37Jv7W19ZVpZACID8JSMQDE4kMGgERSDJEBID4IZACWD7wil5aWzj1kRCKR
lqZ4HeV1lQwAsaiQAVg+TExMICcnR2hYeO+CRCItTfE6mpWVhYGBAWntXTjIABBzkAFYXvDzKBKJ
SCTSEhdvO/mvAi40ZACIOcgAEARBLB/IABBzkAEgCIJYPpABIOYgA0AQBLF8IANAzEEGgCAIYvlA
BoCYgwwAQRDE8oEMADEHGQCCIIjlAxkAYg4yAARBEMsHMgDEHGQACIIglg9kAIg5yAAQBEEsH8gA
EHOQASAIglg+kAEg5iADQBAEsXwgA0DMQQaAIAhi+UAGgJiDDABBEMTygQwAMQcZAIIgiOUDGQBi
DjIABEEQywcyAMQcZAAIgiCWD2QAiDk+tgHgy42Pj5NIJBLpHTUxMSFtSd8eMgDEHB/bAPA0AwMD
JBKJRHoH8fb451xhJQNAzLEUDMDg4CCJRCKR3kHcBIjFYmlL+vaQASDmIANAIpFIiicyAMR7QwaA
RCKRFE9kAIj3hgwAiUQiKZ7IABDvDRkAEolEUjyRASDeGzIAJBKJpHgiA0C8N2QASCTSchJvyxRB
PLjLy79MZACI92apGgBesEkfXvw883Mm75yQSIoskUgktGE1NTWorq5e0qqqqkJDQ4OQZ3n7wkUG
gHhvlqoBaGlpESpAY2Mj6QOqvr4enZ2dP9rwLKR4+SCRFkpi8dAbyy6fz8t2dna2EGArKyuXrCoq
KpCXlyd3P2QiA0C8N0vNAMhcek5ODsrKykgfUOXl5SgoKEBJSYlwvuefl8VSW1s7M3utaGltI5He
W82sLPX09so1ATIDUFxczModS9vcvGTFO0C8HvIg//p+yEQGgHhvlqIB4IWTV9LWVhYYWEUgfRjx
411XVycYAd6wzD8vCy1eLjo6OpnxqGTbljTcJNL7qrauAZVVNay9+mH5lRmAoqIiobw3NTUtafE2
kAwAsagsVQPAKyl3wvIqBmlxxI83vz/6oQxAe3uHEPz5j5oMs+2RSO8rEStbNbX1rPz+8DmWn2cA
GtHU3IK+fkmwHRzoR0szm87KbW9vD5r5fLnLvb/IABCLzqdkAPglwP4ByXq6OtrZtMWrnD+qxkah
N9I/b7+6uzqE6XLTL6Iam5rR3d2D9tZmNDbKTyPTxzAATU0tQtmSl4ZEelfxtmMhDUBLazt6Olvw
5N4NGBkZ4aq9Mxo7BtBUmQt3T2/UNbWzeiN/2fcVGQBi0fkUDAB/eK29qwdtdaVwvnMTtrZ2iEwr
YOvpWfCgy7fVygJXb0/XG9fNg39DVQmeOt+Fna0tbO3sEJaQzSpRl7C8vGUWR81oa65HREQ48spq
0Nby48eTDABJ0bWgBoD1/Pu7WmB2WAkrthyCg6Mjju7fip2qZijICMWWfQdQ3twnXB3g6xYN9AlX
BNo6uiBi43xabzcr482sM9DP27ZBZsRb3roNIANALDqfggFoZRWuriQZu1evgoqWPk4bG2Dliq9w
wyWYFdxudDJzwPMxIDUEfJxvY4hVnp6uduFtg/bObohZmsH+PrbORnSwcV7B+np72HCXsPzQ0CC6
WG+6NDMRrp7h6O3vRTvbtmw54dIgy097Vx/yIz3wx//4E46eMMbJ43r45rtV8I1npoStb5CvizVQ
3WzbvFfe0yf5Wc++3m6hcejs7pXmtxdt3GywZfj0HpbnjrYWtLR1oo/tVzNroAYGRWz7InS283ug
bWy/+jHI8t3W1oreAdY4jHZg+7bNuB+WzRozflXkh8dPJjIAJEXXQhoAXo9zIlywdsse1PeOCW3k
YHsNnB48RlKUH/Zr6KCpV4xI7wfQ0TmMs9fuo71nANkJwTihq4PDh3XhGZqO5poC3L5hhRMnTyEq
oxidHW1yt/e6yAAQi86nYAAG+ntgaaQE7UvOmJiaBtsd1OXGMMf+CD1Dw8iI9Ye5mRkcXP2YW+9H
fFQg3F0fw8zUDKHxOcyti5CXGi6ksXN+hq6+AaTFh+KeowOcnz5HUnQozpmb48LlW6ht7sDtM/vx
b//5FeKL61GeHTO3XGtnj2AC2rt6kR7kgkNHLSU7yXCy1IHmlYforCuG7cVzMD97HhGJeawS9yDg
xUO2DlPcd/NHd28/EiN9cNbcDPb3nyEnNR7PvINY8O9G4PNnSCusRXV+AjMgfmhva8QdWwucMb2E
tJJ6NFcX4rn7Y9jY3UBBRRWe3b8Bi0sX8P36zXCPzUcfGQDSJ66FNADdLMAG3L0C/aPX0D8yJLni
19KOyRmgOs0fynrHERvkjW/++i0uWF/DlpVf4sTVBwjydMTxEyY4f0ILn23Yj+SEEPz1L7/HVQdX
FFfUoK317W4/kAEgFh2FNwDNrejpqITO5t0ISa+CqK+LufMAwaVHpOYgN84fG79fA9NLlti6dgVu
ugTg/NEd+M9vduHSGT18vUUVaWkJ2L16LU6es8Dezatw0eEZbp5Vw59XboObhzssz56A0ekLOLRr
LdTOXscj6+P4YsVW+Af6YN/6jXPLGV12Rk8/66UzA5AX+QyrVmyCw/2HeOBoj/Wrv4J7ZBYCXe2g
o2sAs+Ma+G6PBsL8n+GrP37JzIUVjMwvIjE+HOs++ytOnLsMIxNTPH/2ENt3HURFTSn+9P/+n7j4
KBLet09D4+RlXDPRxraDR3HhpA7WbdZBbPgL/OmPv8X5G06wNTXClu0HYW1xGv/2m8/wIqmYDADp
k9dCGoCOnn4k+97B9v066BmdRl9vLwZ62hAVG4f0GF/onDSGo6Up/uNP30NXXxcHlXbhmJkVnj26
C9VDh6CrfgC//moLAoI8oa5vgE7RJDre4lkcmcgAEIuO4huAFlYpm6C/bwvuh2YDU6OI8HWF0RFV
fL5PC3cszfDr330NLR1t7N66DvqnLWF26ggcg1lacR22Kx+C1QUz/PZXf4UmS7NvxyYcOmaOy+cM
cP1FHDDeD3tLExxU1cDuTSvw7SFTpEd64cTlh0jycsAv/+WzueW2qxmisasfXT19KIzxxOd/+CsO
6x/FYZ3DeOgdwY7FIII9nHBIVRlaB/fhl39djai0TFge14e2/klctXuI0vJS2J81hIrmUZy3sEdJ
WSnOGOngvOVlqCltg+mFyzA+cQxPvb2wb80uFLaPsaM4gZOaO2B+6SJrlMwwi3Fob9kJ3/RGNm8E
hw7ux6PwHDIApE9eC2kA+C21npZKHNq2CirHLBEbH49bZkfw/WZNZCaHYJ/WYYR4PcHadRsRnpSK
S4ZHcPPuY+xf8xUsnX0Q6nYD/+NPK+Dj54HdqmqoaZW+QSBnW/JEBoBYdD6FWwA9vf0IcbPBF99v
Q3hCJqprauF+3Rj/sV4JLx7dxqp1W5GUk4drZ47h5j1PnD2pCnvvJIw252H1DiU4Oztg7ep1LBjn
4q7lKVy56Qbrc4dx2TUCzVmB+MsfPkdERiHszbXxl90GSAhwwY79JxHl9wgrVqyVLmcMk0tO6Ozr
RUd3H9ICHmK3mgnE7NiOsErK96m/oxLbv/wzLB8GINH/Pv7tz9/AIyQavj6BSE1k2/nX38LS4TkC
/QORkRGP9X/+T5yy80Psixv4v3/xK/jGpsNk/0r8ca0W2jpboLrmG1g+8ENBUiA2rd6GBw8dsF/n
KAbY+TpzcAdOXHFBaXowfvuHP8M1poCeASB98lpIA8CfBeLP+DRVFeKMoS5279nDjPoJZJWydqks
DdY3HdDeOwDPB1bYuWs3tE9cRGVTJxICWd3fvRs6eno4fu4aUlLicOPOXdS1dLE6Jm878kUGgFh0
PgUDwF916+vthLfjNWzcsA6bNq5nvXIdHDW3QSOrwHevHMe6DRux86Au8svr4HTjAp5FZmGwuRj6
J0yQV9sKt9vmWM2c/FYldaQV1sDN6Qoe+MVD3NMMKxNNbNy8Gcoq+3Hk4h3UV+Rgy4pVuO8VD8/7
l6TLqSE6nT/g0y48BZwfH4AzF66jqasbLUI+m9HV3QX/R9asx7ABB5QPYLfWCcQlJ0Lv4C5s27YN
R4yvoLSsBOb6B7F561Yoqxsgs7wF9XmR2H/gEGp6RvD0mjH0z92GmFXK3HhfbN+8FquZCbnlFoOq
3EiYWlqjrW8Y5ZmR2LNhJbaxhmnrPnWEZ5Wj+ycePiIDQFJ0LawBkL7109YhBFve/vG//IFb4dZj
d7eQhndABgYkam1pRmdXrzQ9C979vWhtbZOmfbc3gMgAEIvOp2AAuLgJ6GX562hvEyp3L6t8vfzd
+2Y23NvHKmELunp6hcrb2tYuVFS+TAcL2Pxp+h5pms7uHnSxQMkrLU8jVHRW+FvZOvkbAPz7As2t
rawh6ZCzHH+qX1LJ+auA7Swvr+SxsYmto1d4Qr+9swu9zBDwp/x72F+eZ/6+fkcHG+9hpkG6vQ7h
6X6eB5aGP2DY0YnuTradBsnbDN0sH3x/envZMiw/7e08D/ythi7hLQO+fv7mwdtcevwYBmDuQ0DD
YhLpvcVftVtIA/AxRQaAWHQ+FQMgE19GkHT49emy4fnT5aVpmjedD8vmyeYLw9L586fPl7xpsunz
l3k5Lk3z2nxZmpfzpOmk0+Wmmzdv/rQfE0/3IQ0A/xRwaVkl2y7vUbEGmUR6T/HgX1lVK5gBeWWO
DAAZAGIen5oBIP18fUgDIBO/CiBcbeFXZUik9xUrS/yKH29HXi9rMgPAAyv/MSBuApay6MeAiEVn
KRsAXglkPVjS4osf79ra2g9qAHj5IJEWUvKCv6yscQPAfw5Y9pO7S1W8Dubm5srdD5nIABDvzVI1
ALzw895odXU16QOJH+/S0tIP+nPAJNKHEm9beNDkv3jJyzo3u0tVPH/8eaI3mRkuMgDEe7PUDIBM
VVVVgguW545JiyduAPjtAH7e5J0XEknRxdsyRdBPXYUjA0C8N0vVAMgqAenD60Nd/ieRSD9fZACI
92apGgASiUQivVlkAIj3hgwAiUQiKZ7IABDvDRkAEolEUjyRASDeGzIAJBKJpHgiA0C8N2QASCQS
SfFEBoB4b8gAkEgkkuKJDADx3pABIJFIJMUTGQDivSEDQPpY4l8547/exhsyEon0qmR15PV6IxNP
QwaAeC/IAJA+hnjDxhuVsvJK1NTUCb/iRiKRXor/Uib/xUzehsqrQ2QAiPeGDADpY4iXC+FXAFvb
pSWBIIj5dHX1oKGxiQV5MgDEIrG0DYAIQ6zwDY1IfphmaIIV0tkZDLNlhmdmMDQ6gkHppbIPJrY9
0cgoxONjH37bn5B4uWhra2fqkJYEgiDm093di8amZjIAxOKxZA0Av/clGkRLXCya8ysgZvmrdXNE
uqY2MvX0kGFoitYKVjm4CZhLP+9+2Y+NvzJ93vy5afOGXxsfGp9AR0Y0yp4FQzQx8XJ50juJDABB
/DhkAIhFZ6kagKHxcXRlxyFh3UrEqRujt6sHBSZHUeD4Ah35+ah5cA3Jx86gf5QV6OkpiFj+xBOT
GBoWY2hsnGmUaUK4SiAaHRN67EOj4xCzwszTililEg3znvw4256IzRuFaEgM8dQUhtj+Cn95mhG2
7OQES8/msUoywvLcEvQQKSetwfeMr0de/kk/LjIABPHjkAEgFp2lagBEw2PoqytC/sXTyLe7z4L4
CArPmaGhuAPTbDlxewGStXXR1dKGUuvzyDh8GFmnLdHV3oP2xGBkHdVFmuZh1GWWo7csEzknDJCm
pomq0GhUONqjqbQdXenByL1ylwX7cZTYWKC5tA41D22RfEAJWWY2rJIMo87DAen6+ij3CkFjkDvS
NLSQsm8XMm2eoLsoDWUPfSBixkPePpDeLDIABPHjkAEgFp2l/AzAQH8fBkWs8IsGWC+fGYAzekjY
rYoc45NIObAXxe6hGOxvR9kdO5TevYOUPZtR+NQfRSe1kHbCArV+vmgtq0D5FWMkqBqgxs8PzVl5
qHS8gmK3EFTfM0P42gNoL85C1snTqPF4hFRtY3TX16PknCHyb7uh6JI+cp180ZEajBRlPbRX1aLC
5jTSzG5DNDKEnoZmDLJ9lJd/0ptFBoAgfhwyAMSis5QNAL/3LmLLi8TDGJ4aQoHZCRTc9UBLUjxa
88rAi2t3bhwyj59AqQPrqSvvRs5tbwz21KHi3l3knTmNYic/ZiTaUP34PgoumKPA1hUdBXHINjZC
vo0tih1uI9PwOMq8Q1HjZIO8O0GY4evN9EPGmbMotLVAfUknOqKeIsPcSbj60BnviXTzG+BVb3iG
9f5ZRZSbf9IbRQaAIH4cMgDEorOkDYBMoiFmAETIPWGA6pQqjLHlxGOjEE/PoCX4ERL2HkJ9WATS
D2xHlvUD1Lg/RLmbJ4pM9ZFmZIVa3xcocXZF+c3ziFcywAAzFBk7vkHKxSfor01D6K//E3WFHegr
ikHS7l0ovf+ArUsFlQEJKLQ0RGVSFYZaC5G6Zy9K7j1E+v5NSDa5jb7WWjTEpmNwZFR+vklvFBkA
gvhxyAAQi45CGAD+kN7wIJrjY9FR0yo86CdMZ8ZgSDyAeu/HKLC5gSpPb7TkV6KnPBvF1pYovv2A
VSIR+hvLUGpvzdLYo62qGcMTE2hNCEdzYQ2GRB3MIPihp3OQmYxJ4Qn//EsXUBUYLzz015IYhfaa
Fgyz4c6sOBRaXUXlcy80ZRWjpywXtcHxGBwdey2/pJ8SGQCC+HHIABCLjmIYAKaBQSEgDw2zysCG
JdMHJFcHZiA8nc+/DSAeGxGe3OfjXMKT/GK2D7Lx0WGh4gyxgsrTDg7y5WcgGpJsg39rQFjXNH+w
j6UT3iwYkiwzLp3HtzM+KnmLYHKcbgH8DMkMQHt7JzuiBEG8Tk9PHxkAYnFRGANA+qQkMwANDU0Y
Gx/HOIlEmhOvEy0trH7QlwCJxYQMAOljiP8WAG+EqqprUc1/C4BEIs2J14nKqhp0d/e88QeByAAQ
7w0ZANLHEm/YeAPGezhiVk5IJJJUvE6wukG/BkgsKmQASCQSSfFEBoB4b8gAkEgkkuKJDADx3pAB
IJFIJMUTGQDivSEDQCKRSIonMgDEe0MGgEQikRRPZACI94YMAIlEIimeyAAQ7w0ZABKJRFI8kQEg
3hsyACQSiaR4IgNAvDdkAEgfS5IPAQ2xMiLCEBsmkUgvxesGfQiIWFTIAJA+hnjD1tvbi4rKalRX
Sz59SiKRXqq8ogpdXV2CQZZXh8gAEO8NGQDSxxAvF62tbWhqasHU1BSJRHpNbe2d9GNAxOJCBoD0
McTLBf81wLa2DmlJIAhiPj30c8DEYrOkDQAr4EOjYxgaFs/95v7Q2Lj0t/3Z9oZZxRiQs9zr4ssO
DWOY7ecwc9ZDoyPv9hv+PB8TU9LtSrYtEovebtsLKZYP0cgoxBPj75b/JSgyAATx43R395IBIBaX
JWsAeNAdn0BPdSW623owNCKGmAXvrqJ0lNpfR6nzY3S3swowxoO5nOXniwX/wZ4WVLu7oDogEM15
JWx9bDl5aeVoaHQYbakxKL11CyW37FH26Bl6e4cw9IaKuVgSDY+gt6oIjSnZwrC8NIoiMgAE8eOQ
ASAWnaVqAIbGRtFVmI50VRWkmVqhp38Y7bFeSNi5H0W3HVF85SyS9mqjtbZD6BHzost759woDIpZ
b396RjJtdlqY3uB2Gyk6p1jwTEZrcQUzE2w+y/Mw276YFVo+LFxVkF5hGJ6akPayRWwdoyg4eRgp
umdQcd8ZuUY6yDh/HQNj08J2JFcFZiAS8SDNjqMwzvLCr1DwKw+y8dERYVt8Ok83PD0pbEM8xY4T
mzY0PimkG56ZkhwD6Tjfv6HRcYyx4Y4oVyQdswSv9uJJxb0SQAaAIH4cMgDEorNUDYBodAK95elI
Ud6OVAML9Pd1I1tXBbUZdRhny/FgWO/rjsb8OgwNtKDU1hK5l2zQ0dCDgeYK1Ph5odTOBiUPfdDf
3YC0rSuRpHMRLdnpaCuvQWd+CsofOaPiqTvqo8JR8cARhded0VaQjSJLc1SFJQlmYFDEDMDkEArP
maGhpEfI88REC5I1NdHZMYhGfw/km5ujxMkD/UOj6G8oRbGNJfItr6Gtug2ivhaU37FF7lkLNOUW
oyHYD+313eivKUC1XwSGJibYfnigva4DHRkRyD1tgjL3QLbtCbQmRaDMyQHVYQnoKc9BweXLyDU+
iszLzuitLUG1TyQGmTHgxkPeMVzKIgNAED8OGQBi0VmytwBEQ+jvbEN3QwN6mlvQW1+ATNaD7xma
EALewMCg0Dsemx1C3jF1ZF++jfKbFkg5ch7NiQGIXrEaZS7uSD90AKU+4cg/eggZZndQ4WSJQtcg
1D64gFgVXTQnxSBFaROyr9xBnoEa4vapo+LhbSQqq6GjhQWqkWGMzIyi6KwRMowvocrVFfkmusi0
sEd/RyOKrl5Eye3bSDuwGyV+kSg5rcsMyzmUO95GXXImKq+fY+vSQ8V9J1QFhaPUhpkFrwQ0uF9B
6Dc70dveiHQdHdQE+iJV5SAqnz1D5iEVlD2PRomFLpKOnkVjZCDS1bVQ6vr/b+88nNu4EjS/df/E
1V3d7m3N5vOMd2d2Z5xkW5asHKlAZUoklZOVqGhZwYpWlmVZopKVJStbOTFngjkBRCQyQDArcWXN
d+81SJj2gB7KFGk18P2qviLQ6PC60f3e73UAT0EzexLSVuxRll2VlI16lV4KoAAQ8vNQAEiX81rf
BCimbXz8RDkV3uDVIzM2Gg67bJDFzvrie/gsRjiz7yF1wlzIkr0QyVs2G0Vf7kHu1r1oFu8r93+O
wpO3of96O8oua2C9/jWKjn8Hw9GtKLmaiedoRPaiOfA0AM4bh8R0x5TpchcsgqVYHHxPxPorAvAJ
0mYuQcmOrSg9JHv7zai3V6Jo/afIXbYUKcMHInfPOXiLkqCJi0P+hq0wPciFtyIb+cuXIW/dRlRe
S4Ez/Rpy136O4p2bkbV8DYq2b0Vx/AlUHtyOvF2XlXWoKbiOzKUrUbh1LUyFLlSnX0JG3B5RVlEp
ZFxB+tKtyiUA5VIBLwEQEpJQAEiX81oLQCANaPq+Gbo9q5E8dSkchaVwJN9EckQkzJka5E4bj5Kz
t2G/dwGp0QtguHICmZ9uVM4QlG9dhoJvrqNi62ei4U+C5eIuFBy5Av3B9Sg4eQ9Pn7mRMScWDmcz
rOf3IGfjQTFdIzKnzxICYPMLwPMm5C9ZAH2aHv8t5vn4z/77C6wX9iFh9DR4KrTImzMJmWu/gi35
IaxZ+SjfshgJYz5BVVoqLImZMJ3aibu9xqHa60XW6I+RsvRLeAoScOt3/wGdmK8n+TySxolyFBWj
eMV8FHx5EkWb46BNKEedLhUpkVNgzStCycppSJq/GfVN9fDojEKSmoJsr9c/FABCfh4KAOly1CEA
Io2PRGNcj8pDu5AeMwUZM2ZDfydb9IJfoLokFTmzYkTjPwvmLANqtBkoPfEtmsRObbl8AvoH2eLv
GRgeFsGZdg36exmw3jkPfWKeWLdqlMV/BY/nMVwpQhQu3BHTNaD864NwGt3KI4hNzxpR+c0RWHJ1
aHr6SClPQ9Nj1HurUPJ5HNJnzkXu8pXQ3UiB7f4FZMROQebcxagq0MOdfR9ZM2ORMW0OdLfS8Fis
r/7wDlRcS8OjJjvyVn0Kp7lGSMZjGL7ZhdQJ45G7Zjfq6sX7c/Ewayrx5PtnQiD2I21KDHKXLkXZ
+bvwFqej7NAF1D/zXxL5i+31mocCQMjPQwEgXY5qBKC+Tunt+u/ab1YeCZR/lccFnzaL4eK9HPbs
CRqELMinCJTP5O8IPH6EBuVvk3L3vfJeXlqQTwzUicbombyRrs7/mfIbAS3DWn+CU75/Kt7LA7H1
kUMxb/m0QZMsT7NYvhAROa18dFGKh1IWUQZ5976/rCItz+83NovP5eOLDY3K+viX06g8DSCnlesi
lyWnVZYpluefh7z08cI/rdgWL/17Bq9R5H4hfwnQarXje7FOLxiG+VFcLg9/CZB0LeoRACaU0vq/
AOTvncvfPdczDBOIPCbKynVwu+X/AqAAkC6CAsD8WpESIPcP+ZdhmB+n9dgIduzIUABIp6EAMAzD
qC8UANJpKAAMwzDqCwWAdBoKAMMwjPpCASCdhgLAMAyjvlAASKehADAMw6gvFADSaSgADMMw6gsF
gHQaCgDDMIz6QgEgnYYCwDAMo75QAEinoQAwDMOoLxQA0mkoAAzDMOoLBYB0GgoAwzCM+kIBIJ2G
AsAwDKO+UABIp6EAMAzDqC8UANJpKAAMwzDqCwWAdBoKAMMwjPpCASCdhgLAMAyjvlAASKehADAM
w6gvFADSaSgADMMw6gsFgHQaCgDDMIz6QgEgnYYCwDAMo75QAEinoQAwDMOoLxQA0mkoAAzDMOoL
BYB0GgoAwzCM+kIBIJ2GAsAwDKO+UABIp6EAMAzDqC8UANJpKAAMwzDqCwWAdBoKAMMwjPpCASCd
hgLAMAyjvlAASKehADAMw6gvFADSaSgADMMw6gsFgHQaCgDDMIz6QgEgneZ1EAC5IzMMwzAdj6yP
/1r9GgwKAAnwawvAixcvlHkzDMMwLxfZKL8scjoKAFH4tQWAEEJI90EBIAEoAIQQEj5QAEgACgAh
hIQPFAASgAJACCHhAwWABKAAEEJI+EABIAEoAIQQEj5QAEgACgAhhIQPFAASgAJACCHhAwWABHid
BUD+SBDzekV+z6RrCbbdmfBLV0EBIAFeRwGQ8yotLUVJSYnyl3k9UlZWhvz8fNjt9pZvirxKZKXP
fZ6RKS4uRkVFRcue8WqhAJAAr6MAyOnkAVBVVcW8RrFardBqtTCZTC3fFHmVyEq4qKhI2c7Btj8T
PrFYLIoMdsUZNwoACfC6CoC04GAHBvPrRTZMOp1OqZzIq0dWwrLSpwAw8hiTZ9woAKRLoQAwHQ0F
oGuhADCtoQCQbiEUBMBqt8Nqs/0wTLy2eTywud2oep0rU2tLOT1uUf4fyml1ukQcqBLrJdfB6nS+
/Hq0ztslppXvRYVSZRPz83hhddiV91aHs2X5Hv/yqsQ4P51Pm1AAupZfIgBOsa94vV645D7yV76/
jscKt9jv7G32yfZiEXGKZdvEuMpfa/DxfnHEvmazO5R1bI1b2ac7v64Wiyi7yw2nOB7kPi1jF8fE
D8tx/cU0VnEMOVuPFVk2h8P/Xrz+6bidCQWAdAuqFgBxkFjFAVxlMogDRjR4TiECLtGg2U3Q3rmJ
insJqHKK90qDF2T6zkYu3y4bUVGG1gpALEdpUO1CSNpbppzO6RblqoL23m2U330gGnvx3uUQjbID
poJs6DI1qDJqoUtMRGVmJkx6U8cbBpvDP++7N1GZXaiUz+oQlZm5EhU3b8BQpofN64a5rFCMcwfl
YpiyPFG5BZ1fSygAXcvLCIBFNNK1dbUo1qThypUrSNcUoaa2RnzW2YbICrvVgmyxzxnMVqVBl8vy
igbALl67hEC6xX4q9wE5vhw3MyMNZdpKFBXmQ28S+3Y7EiAbXI+3Gq6WBjfYOD+NTci8oaIUd+/c
wtWrV3Ht2jU8TMlUGuJg479MHKIchbnZKC7XwyGOV7ksbUkB7ty6qWzThLRs+OrqhQjJbSD3f1EW
XQXyC8R3JDsZIrqyEhQUlP64A/IKQgEg3YKaBUA2luZiDXJXf4qMzXtg1IvhZVlInTweSVNikTJ5
ApJnrhAHrWyoRe9XVD52X7W/ty17yEIebML07V6PmJ9slF3KMLvPJ177e8lVovdh99X4G/mWytXm
9ijj2EQPwVxWAG1SZosEiM9E5SgbbaNWNNiiUrG6xfxrxPwcPwiBXE6VVoP02ElInByjlDNxymzo
tWJZ1lIkRw6F5uQlaD79BCmLVqHg6BFUFmiF4AjZqPa1lFfOS1TQbddJDpPr5TAjZ/lsJIydIDIe
RTczYHcbkB4zXrwfh4ejo1Eptknhpjg8HDEO6XNnIWf/CSFPXjG9v4zBQgHoWl5GAGp8XpzYvQ7v
vNcL4ydMQN8PemLT3vNwV3tFw+ZSjtVqsU/K78opZNMrGm45zCX2a4fY/2Qv2mI2K6898nVLg+z0
+KDNuYV/+c3/xrZz99FQUw23w4p7t27D5PRCk5KIjPwy+MRyZGPeWOPGkYNfIj0zDVNjxuJhsR1P
muqUswc2IcdyOWYxb5c4rmp9HiTfv4u8MoMiAe7WMrUIgVPIu3zvbSPUNfV1uLDnM/zrm28hMnI0
IiIisGTDXnhqG0UZquF1uxQZqBHT1YgyWcUxKnvxHiHhPtHIuUXv3CWOwVpxDLY9O2EVklzjNGBE
zzcwYuEmsZxGNDTUYO/yGXjzTx+KbToOg/p8hJlxG8UxLI5/Ma27ugZJ3x7A+Gmr4KgRy2uow/kv
ViF62gZ4GhpEI+n70frIcvzF9yC2Wdv1ay9yfAoA6XJULQCid2/OfYiH/d/HncFRMBiqkLs8Fhlf
HIej6TGc9aLCWrsU+RcewtlYA+3Nyyg6fQHmKieqTFroc7JQ8d0VlN54AKuoMIz5OajMSEXJydPQ
F2uVRr5KX4KSE8dQdjdFNPKisa32QJ94G0UnzsBi86L04DrcHTQJelGpydPrVcYCJA0fgMztJ+AQ
PTR94i0UfnNaEQIpB7Lcdp8buatmIm1DPOyNTXA21aNw8xKkrtqBstN7ca//BJRePY37H/ZDwcX7
MJUWwWzyN+xl355CyfV7olISZfHYUHH9IorOXITZLHv9QjKsQlxEmYuOH4ftGaD7dhtSPv0CFef3
IWnup7A/fgLdnevQFxYiZ/F8ZG7aB12qEJiaOtHw/HylRAHoWjoqAA63DyUp3+L9Dz7Cg3wznjU3
ozz1KibEzEaFsx5VugIcij+Iy/dTxTFbgwJNJhIe3EF8/GHklhpRmp+OzNxipZEsK8jGQ9HTdQiZ
lvOuq6/F11tWYtr0aERNj4O7sVkcF3fw7h/+iK1Hz2HmyN6ImP05SsuKkZxwFxcvX0aWphCWijzE
xoxB/MmLOHFcHD82cZyU5SE1W6NIQE52FvLzUjHiw7cxZeU+1DU2IO3+NVGmQ8gRZWoQy83PThLl
jsd34lhzKJc0hACIY+jwpuVYsetCy1YSDVi9D3k5Gbh98zsxbhJcdhNOHI7HySu34RENc1mRBqnJ
CThx9BiySyuR8eAajp+9LGTeKbatfxt6fHVIvHgAM2fPwJhxk5FSYsPTRzXYtGgWNh65JZbyPWps
Wozu+x62nrqHOiEvigCc348xMSsCAnB2y3JExXyOxuZHuPvdt4g/dBhZeUKQxOeGco2yPpfvyu+h
Vvke7t6+jss37ojOgRCXlu8zWCgApFtQ9SUA0dhZKktRfucmyu/dh1lUfKnR06HTit6+0hi29pA9
KNr1GRLGRSF1ahSS534OfeYd3Ov9AdLmL8HDIUNQdCsDBZvn486ASKTNmIKE2EWi0S5D1vxZSF+2
EikxMcg/dwfaq0eQMHosUmdEI/mTFchd+wluvdsPpYka2OvqYC5IxIOef0TKyt0oPbUfiWPGIW3O
NLHsWdBXWEQvXhz4JlHOydOgqxCNutOmiIxVl4mUqFnIWr0Id97ujYw4UZb/egdZm/cgfckclKUV
IG/NPCTFzEBiZARyDp1HycGdSJkxFxkL5yJt6ecwW2UFJ89uiF7eoybobp7Dg4GDUPwwByW7V+NB
RKRYhijPql2iwXcjZ/kcJM+ci+Rxo5C+4QCsXiEwwbZzSygAXUtHBaBa7Gff7lqNWQu3ofHpI+X7
cIgetq+2DsaiFIwZ0BPjY6fjw7feQ/z5JGxfMQm/+cP7iI0eiz4Dx+HIvi0YG7MQj/+7GcunReKz
r6+grkb0nm1OOPW5iJkYjXKLFfOjhuNSpgHa1DP4t3/8Z0xZtBJDP3wTH0QuxIEdK/HbP/wn1m7Y
iKgp43HtYSqmRPRAzyHjMXZoL0yeuwGXjm/H5CXrxQH9DIvnxOCTz7dg4J9+h4HTVuPSN/sxfEgk
liyciRETZ+Lh/dsY2asXZi9YiMgJUbiTUwavEGZ5BuCcWNf/en8AFi9ZhHnz5iO7pBKbF0bizR59
sfurr7AgOhLDxkZjQM/3sHrHt7h4aA1+8+afMHncSLz51juYOiMGPd5+E5uP30R9TbXYhlbU17nx
2bwYnE8sxfFNc7F81ylRiT3BliWzsWb/JdTXelHf9Agndq5A1LJdqG+obTkD8DXGTV0ZEIBzW1di
9sJduHd2P3qIMi6YOw0zVm5CeUkepo2OwMwFSxAxZDCOXUnEzlWT8du3e2LzvqOwC4Fv71KJDAWA
dAvqvglQ9FhbbmyTp8ZtlmIhADHQltnEAeYQli0iT7eXZyJxxHjR4Lrh/b4BGXNjkLtnN1I/WQy7
6CWXHdyA9M2HkL9tGXJP3IX3iV00rLOg2bsTd9/9CBkrViFlwkgkzZ6HlOhpKL5fCE9zg5CILFRc
PYWMz/bA3tSgnOJ31LmQs2olytNzkBE7BcUJpajGn5G7NBbZh6/CIXpkVlnOyaKcJVX+cooeXVVZ
MpKjFkCbcBOpM9fB8dgpxpkDvc6E7E8XouD4MSRNmA1Lw3PY7UboHlxBQp8+SIydi8yFc3D3YyEh
qSX+swxSAER5DKn3RVnikLV9P/LWLUfaiu1iWTZkzpqErH3nFUlwPHoKe1U+EoXU6EqrYJP3LgTd
1hSArqajAuCtq8flL9cgdv5GNDU/FT1J/017bl81TmyKQ2T0WmV+RbcOYWzUVKxYNhufH5O9WmBZ
zABsPfgN5k+djtsP7mHK2AnINbjhtFlF77keKZf242//9jcYOWYs3vin/4MJK/aLglVj1uRYaKp8
iF+3FPuvZOPGkTWYsfZLMcdnmDNtLC7dfojoqFG4U+wB6isxJmIA1q5fhbmffSHGeY7lorHdcuaW
aASX4EqKBkuG98I7vYZhxvQYvPX7N7Bh99dYMjkS0XOW48sDJ5BfblCuy9cI2Tmz81P0GjoRe7/c
gy++2IbiCgPWLJyIPaIcpqSz6NcvBg1iKdVlCRg1KhKfr1uGGetFuR9bhVSI49fShJvxGxAdtwN1
otG2CeF2aDPx9r/9Br0HjcBHb/8Ob/SegEbReH0RNwdrv76MhrpqND15iiNbF2Pyij0BAUg49xUm
TFuDalGv1TY14vLO9Zg5fxeyH5zDiCEjsWrdVly5m45L+9fj//79f2DqzJkY2rcHIqcvxbqVs7Hl
+C28ePaIlwDI64G6BaBtrEpPX7N6FlLitqHKKaTApkfmnOko+PYy0qLGo+hurmg8y0UvOAr58fuR
Jnr2tqbnKNm7BhlbjyBv+zLkXUiEy1OBlOmzkX9wHx6OGIuKtBwUH9iO3F1fI0P05nO/uSnmU4nC
4ydQejoeKfPWwVojGnGrEA+fFZlzZ6P4biqyZk9GrjjgnfVOpMeOQ965+8olBLvPi/zNi5G8cAMs
dhdsDgtyFsUKCTkCY9p3SJy0VJRfi+TIaOjyy5C1Yh4Kz59HUuQkVOqcYpy7YtlHkDxmBHIPX0Tl
/atI/2QpdMUG2NwuWCo00GzaDpOjHhbNLSRETkXRN18idekmOJ49Qe6yOcjaGY+ir7+GvsIGU+pl
PBwbA4PRKaSp/caHAtC1dFQA7GLf1mtu48N338WJG9moET3/lAsHMHLKPJza/wUGDo2G+/EzXNv3
mWisFmPdiplYtus0mhsdmDzkIxy7m4drh7dhcL+BWL3tsNLLlsdPQ60bcVNHYcXu48hMT8e9C4fw
/kcDUWrQIXrYaNwvMmLHounYcPguLh9ajdnrvsSLR9WYHj0aF4UAREX2x/lkLWwFdzBsWCR271iH
iOkr8LjBjVEDP8Dm0zewbvZUHBa94ZVRAzFl8UZkpt3HJ7FT8c2lu0hOSERy4k30/N2bWLlT9MLr
ff5LABuXYsHGY2IL/VkMa8ATMXz53LHYfTEN+qTz6NljIIqd9ci/cRTDR07GF5tXYPHWQ3jkKUfU
iNHIMdfh292fYaroydfW18In5nF653KMmbEMWZmZyEp9gKG9e+BMYgH2rpyHT/ddQFNTPSrzktC/
x1s4cC0dtdVuODzVKEm8IJb3MdLEcdNY68T8cR9j0eZTMGoLcfdeIi6f2IHf/64Pdm5ehw97DcK9
tCzs+3wZNu44ivUrp2PzsetoEPVUsO+1bSgApFsIHQEQcbhgNZQga+Es0eiNReKY0UhfJWTAUwvd
d0eRMHI4Hg6PQPbOMzDl3EX66vWw1T1F6aFtyN53GoX7N6DgSjKcLi3SPlkAXYEWhUIKEseOR+KE
ySi5K3ocufeQPCFSzGcY0jd+BVNBKh726Y/88/dhEw27vcaLws1LkTBxCSoeXEPy+JF4GBEhZGO7
0tgrlbs8M2GtRO6KBUgYPQaJkaPE5xthdtXBmHwFqfM+FwKgQ/qMhagsKkfOujiU52hRdnQbEkaM
wIOIkSi6Liq/e2eQNC4SiePGI2vLATGNfJzQDqvDLHr8cWJ9RyJh1DgUnHsgpKMK2Ytn48HgwUie
txpmmwNFO9ciIWKEkJyRKLic0ObmwuChAHQtHRUAGZ/Phzvn4tH7o94YMnQI+n7cH0e+TUK9+J6X
zRiJD/v0Q4+eQ5GkMWD36hj8/t0P0P/jnpg4Zy2qfI/gKk3A7//lt7iQqoXP4xRS4RZScQ9jR09C
oblauWnucaMXcTGjsOfcbWyZORbDJn+Kc19vxrvvjMTmDauwZu83aG4Q4yycjptJWZg3qa9Y5kf4
4IMPsPHAVdj1uRj+3nsYOHgA3urxIQ7ezMTZrYvw9odRePjgO0QO7YOI4YMwftYq5OSkI2b0IIyM
HI0hERNxM60YHrcTvtoanN6zAcu2HEVtnZBsISp1ojHetGoW9l1IwLPGauz6bAbe+6A33nu/F05e
z8WloxuxcvcJNLgqMDc6FrkmH67Gb8WSDfGK7PhcRsyPGocTtzViHWvxSNR9Z3cuxcxPd+Lkzs/w
+z+9h8FDBott+jE27T0jev4+//V6IfjVYlvt2zgHH7z/IQb2/QhDJ06Hzl2Lh98eRJ++fTF65FDE
frIepioL1i+cgH5DItBnwDDcSBJysWkR9py5rZQ/2HfaNhQA0i2ElACIg0Y+7mb3umAsyIOhqES5
NCDvkJd3+1t0ZTAUimHKtW4zLAaDcp+AxWSExWjy/zX7T81Z9HrlVLrsURvzNcpjePJOf/kEQJVR
B0N+ofIIonym3qwtg0krx5cVt4wZxmJRkbvlTYGVMOQViNfy0cCWil2UU96QZBcVgakoX5SpWJSp
5UkBsyiHwdhSBlE+Ma4sp8Ui18EDU3EBTBWVyu8DyMcNLdpS/zp5vKLhaNkO8kkAr5h3YZ4YVz7y
J5ctHzG0wqDJ8z8m6BRpOz+5TWS55PTthALQtbyMAMhH6uSNZlaTTjSeOdCZ/E8GyLvbvaLh1OTm
osJYhedPGrFq/gRsiL+Ayooy0Yv1Kjf/JV46gEnTFsHsqYNNzE8u06SvFN+v2Bfs/kfspExaTAZU
6PSiATSiUOxn8lgqKS6GVgwzmuSjqVUwGPQwm80iJpSVFCCvqAwesT855RMAlfKxuWLlUUKjyQKb
zYzCgkI45DVwk5DgXA1sLg+qxfhWs15Zl0pRbtn4y/1MKZfRCIM4Plu3i2yMjWKZRpNZKaN8IqEw
T4Misa/7fNUwic+U8cV4BnEcy2WbxbEdmIcoZ0V5hTKtf3vKRx+rUF5RAaPRgKKCfKUcpTqD8qil
fLKgdbvLY6tGLKNMHFs5oux2l/+xRnkJRlde5B/mdMHlcinrIL+HcoP4rqo9SlmUMrfO62dCASDd
QkgJQGvEQS4fEZRpO1z5waDWYXIc5dldcXCLv8pjdPJ9ayXTUgkG5tXm2ri/ly2vtbe8l5/L6Vs+
V+YnKgX/69Zx23zemrblDDTeYljLslrLoFRUbZfVWjZlnL9cT39ay/3DuLLyUoYFyhpknJ+JrDwp
AF3HywhAa2RjLX+Ax952/xTfsxymXEMXDc+ujXE4cOkhGkUP2imkVKu5i8G9euHYd2nK54H5ieXK
f/QUeC8i56880if2QfncvCybfGJAPgMvf/xHPh8vx5HD/eM44JT7VMv0drF/ymFyvjYxjr9s/v21
texyuBQaOf1P10Wm9Zn7tsPkuHI65b0sk1xf5ZgT0tBSNvmZXK4sixxmbzMPZXjrMSc/F+VSyijG
kWXwb7/2jgu5DfzjBMogYpfr3jpMkZcfvgf5/kdl/iuhAJBuISQFgOmSUAC6ll8iAB2JnF/bxs4i
esBmi7xx0PVXz/owv04oAKRboAAwHQ0FoGvpWgFoO0/ZW/9xj5p5vUIBIN3C6yoAcudvrbiY1yOy
0aisrKQAdBGyEpbiK7dzsO3PhE+kBFAASJfzugpAXl4eKioqlP8/z7wekb3/goICGI3Glm+KvEpk
JazRaIJueya8Ul5erhxrFADSpbyOAiCRN89ICw5mx8yvF3m3d0OD/NkV8qqRx5C8YS7YdmfCK7Lu
k08WdAUUABLgdRUAQgghrx4KAAlAASCEkPCBAkACUAAIISR8oACQABQAQggJHygAJAAFgBBCwgcK
AAlAASCEkPCBAkACUAAIISR8oACQABQAQggJHygAJAAFgBBCwgcKAAlAASCEkPCBAkACUAAIISR8
oACQABQAQggJHygAJAAFgBBCwgcKAAlAASCEkPCBAkACUAAIISR8oACQABQAQggJHygAJAAFgBBC
wgcKAAnQ1QLQ1NTU8o4QQsivjazPKQBEoSsF4MWLF/D5fIoEyOkZhmGYXzeyTqYAEIWuFACJnLah
oUH5jGEYhvn18+zZs5Ya2g8FIEzpagEghBDyekMBCFMoAIQQEt5QAMKUVykA8lQ/IYQQddHc3Nzu
DdsUgBDmVQmARAoAr/czDMOoK/X19UpDHwwKQAjzKgWAEEJIaEEBCGEoAIQQQtqDAhDCUAAIIYS0
BwUghKEAEEIIaQ8KQAhDASCEENIeFIAQhgJACCGkPSgAIQwFgBBCSHtQAEIYCgAhhJD2oACEMBQA
Qggh7UEBCGEoAIQQQtqDAhDCUAAIIYS0BwUghKEAEEIIaQ8KQAhDASCEENIeFIAQhgJACCGkPSgA
IQwFgBBCSHtQAEKYlxGAurq6ll2CEEJIONDc3EwBCFU6KgAyXq9XEQGGYRgmPCLP/FIAQpSXEYCG
hgZlZ5BnAhiGYZjwSFNTU9A24aehAKiMjgqAtD8pANXVPvh8NQzDMIxKU1NTC19HI8avFRIQrF34
aSgAKuNlzgCUV+hgtTlgtzsZhmEYFcYm6nBLlVXE1qFUiZSWaVFbW/dX2wkKgMroqADIU0Amc1XL
bSGEEELUSlNTIx49aupQnj17BqvVrpz9pQCEGC8jAEaTpWX3IYQQokaeP3+uXNevr6/vUOSNgBaL
VbkUQAEIMSgAhBASPlAASAAKACGEhA8UABKAAkAIIeFDewLQ2Nio5KfDKQAhDAWAEELCh2ACIBv5
8vJy6HQ65fVPP6MAhCgUAEIICR9+KgCy119RUYGkpCQler3+R2cCKAAhDAWAEELCh7YCIBt6l8uF
5ORk5afenU5n4HWrBFAAQhgKACGEhA9tBUD+uqts7N1ut1LHy0gJ8Pl8ymcUgBCHAkAIIeHDTy8B
yIa+7Sl/+bq18ZehAIQwFABCCAkfgt0E+HOhAIQwFABCCAkfKAAkAAWAEELCBwoACUABIISQ8IEC
QAJQAAghJHygAJAAFABCCAkfKAAkAAWAEELCBwoACUABIISQ8IECQAJQAAghJHygAJAAFABCCAkf
KAAkAAWAEELCBwoACUABIISQ8IECQAJQAAghJHygAJAAFABCCAkfKAAkAAWAEELCBwoACUABIISQ
8IECQAJQAAghJHygAJAAFABCCAkfKAAkAAWAEELCBwoACUABIISQ8IECQAJQAAghJHygAJAAFABC
CAkfKAAkAAWAEELCBwoACUABIISQ8IECQAJQAAghJHygAJAAFABCCAkfKAAkAAWAEELCBwoACUAB
IISQ8CGYADQ0NAR9LUMBCGEoAIQQEj78VABqa2uVv7Lhb2xsVD5rHUYBCHEoAIQQEj60FQDZ4Dsc
Dmg0GuW1HJabmwuPxxN4TwEIYSgAhBASPrQVANnrl6+zsrKUhj87O1v52/oZBSDEoQAQQkj48NNL
AK09/czMTOTk5Cjv294HQAEIYSgAhBASPgS7CVA2+vK6vxzeKgStoQCEMBQAQggJH4IJgIzs9bft
+beGAhDCUAAIISR8aE8A2gsFIIShABBCSPhAASABXkYAdHqjsvM8f/49wzAMo8I8e/ZMEYC6uvoO
pbGxCQajGdXVPgpAqNFRAXgiPjeZLNAbTDAaLQzDMIxaI+ryjkY2/pWi8ydvDpTtQLD2oTUUAJXR
UQGQefbsKZ4+lXnCMAzDqDatdXnHIs8a/LXGX4YCoDJeRgAYhmEYpr1QAFQGBYBhGIZ5FaEAqIxw
FIDm5mbmF0aeCgy2TZmuiTz9Gux7COV05FQz83qGAqAywk0AZOViMBhQUVEBrVbLvETKy8thMpmU
RinYtmVebeR2drvdKCsrg06nC/qdhFrkPiZ/kY77mDpDAVAZ4SYA8pnW/Px86PV65iUjG6HCwkL2
0LopsjcsZbW4uFj5G+w7CaUYjUbl2LTb7TzTpNJQAFRGOApASUkJrFYr85KxWCwoLS2lAHRTpADI
My5SvGw2W9DvJJQiG355tkP+e1oKgDpDAVAZ4SoAVVVVzEvGbDZTALoxrQIgT43LBjLYdxJKkZIj
9y8KgHpDAVAZFIBfHouI3eFCTU0NfNVe2LqskrbC7fGI+fuXWWW1Bd4HH79rQgHo3nS1AFgsVXC6
Pcr+2xqf1yM+s/x4XLG/ebphf6MAqD8UAJVBAfhlkafDvTW10Jfl4tiRIzh38TqqXNVwO+xKxRps
mqCx2kXF6/uZytUKm8WA1JRUaA1mpZKsMlUiLSUFerM8dRpsmq4JBaB709UC4HDYoElPxOmTx3Hk
yFEcPXoUZy/fgMnqCOxXVtH4W41a3Lp9S1TsdtTW1sDeRfscBUD9oQCoDArAL4u72oecGyfR5/23
MX5KDCaMGYHB42dAo7Oivq4ONaKidDkdcDg9yr/YVHpWQhqsdgdq6uS/3qyDy+WE06LDuTMXYbS5
4BCf1YrP6mUla7MqvX2rzQmPMRcjB43ArZxKVHu8MJckYtTAoUgpFxWyKIecf43P65+/rXUetUpF
bWs9Q1FT3WlZoAB0b7pWAKxorHcjbuJgvNNrMGKiJ2PixImYt3ITzK5a1In9pUqIrK+2Hm5TKb46
cABavQEXz12EXuyrXXE2gAKg/lAAVAYF4OVjtYleu7MSY/v3wNajt/H99/+NJw1ubFy5EKeuJyEt
4TqOHzyKxKwSlOYnYOuWLTh78yGqRaNsLCvE0b27sG37PmjKHci9FY9/+oc3sPdyCmpcBsR/tQ27
4o+JSlbIgV30vhQB0CBy2Gjczm0VgCSMGToCOcZqFGTewhdbt+Lk2WuwOqvhqKrA4f3bsePAURjE
+8riLJw/exanD5+F0eS/2SrYOnUkFIDuTVcLQIPPhgVTJuF0orbl/8QJvm9GYfo9nLt0Gw2N9bh+
4RySMzXI0eQh5foR/PM//D9sO30HXo87yDw7FwqA+kMBUBkUgJeP3emFNvs6BvcZjkJbHZw2OdyK
uoZHaHLq8PEf/icGjpmOsyeOYcyIgVgQtwx9Pu6FfWfv4dLhzZgUOwNTxw7DsKiFuHXpIN74tzex
/fglrF8QjcjYWZg6cSjGzFoNq8cHu90vAGMixuCORq8IgKU0GRMjJ+Jh8gP0+cO/Y+7iOEyaGotE
TQk2LpyMkVNmYHpUBCYt+gI3T2/D//q7v8XqtftgsdhFJUsBUEu6/AxAnQvLp0Tg/b7DMDU2BpMn
T8a2o1dh12ZhSP/+WL9pLfoPjkR2VgrGjB+Lb45+hd/+6xtYfeAiqr1eWIPO95eHAqD+UABUBgXg
5WNzuGEufICBHw9AlqkGPo9TuSnPIiprQ0k2Rg35ACmmRtzZvwp/909/wNTp0zCo1/uIXrQFibfO
IWpKFKZNGIV/f38gSsoKERM9H3l5yfjPv/97jJoYjYljhuOP7wxEptYOj8sFj0mDUf2G416BGXW1
dXBo0zBqwCikFRZj2dTxiJrzCbYcOAxN6i289Y//gBHjp2DS2BHo0SsSX+78DGNnLMCj538WFWzw
9eloKADdmy4/A1DrRFx0JKbFbcDZMyeVewBuPEhHw5PnyP1un6jE/wdOpujx1KZBRGQk8grzETMh
BnlmD5z2V10eCkAohAKgMigAvyBWG+pqnFg6eQjGzVkDvUk0jHlJGNKvN05cuoHxw9/HrQIH7h/b
hHd7jkBydi62rFqALXv3Y8RHf8Sa+PNIOLUPb/cchNy8DAzpOwJ3ku5j4LvvYe+Z27h5Zh+ipi9C
eZW8L0Be57ciZsB7mL0xHi6nB6e2xaFH/8koq9Ti2qXvkJx0G73+9CbmrdiEyP59sPPEDdw5fwDT
F6zF8a/WYGjULHhqGkUjEmRdXiIUgO5Nl58BqLVj3oTR2HHqvtifPcoyTGJf9rqrsGnxDPR+rydm
Lt8Bhz4Pw0aOQEZOBob2HoAb2RVwO+1B5tm5UADUHwqAyqAA/LLIswCOygIsnj4Gvfv0Rb/+fbFq
+yG47QbMmz4Ot7INqHebsT4uGn36D0T/iMlIKtHi9J6V6NunHyLGjMCQSbNQaanC/OH9EbtkJ25e
iseAgb3Ru/cgbPnmIjwtp1ldbi9yk65jZP9+6N+vP/r3HYYbyflwGfIxfeIwDB0WgcixU5FaZMTD
iwcwYFBvfCzmsU3IRNKVrzFr6Rq4vLUUAJWlqwWgrtaN7XHT8E6PD9G3b1/06dMHI6KX4NtTBzBx
2iK43Q7MnBCJI6fPI27pEhRVmrBw9CDETl+L6urO31T601AA1B8KgMqgAPyyyMcA7U43amq8qNTp
YDRZlDv/lbujlcraf0e+z+f/3Obw+E/nezww6ithstrglL0o+ddug15vgNfng9Wsh95oVa6xtj6P
LZfl9lTD47BDq9PCJpZb7XHBZneI+TmgEw2E/D0Ct1O8lxWzxYBKQ1XgOu2rajwoAN2brhUAf2Qj
bjD4f+ZZplKvR2WlHla7E06XEw6bVdk35fKtVjucYh80GgxB59XZUADUHwqAyqAAdDKiYpQ/YSor
r9Zh8nXgBqnA560VuFU03P7xW384yCpft3xus9lhbzOvtpHj/XhesgL/y2E/modYxqv6gSIKQPem
ewTAv/+0Rtl32+wzcp/zN/4/vG+7r7/KyPlSANQdCoDKoAAwHQ0FoHvTHQLwOoUCoP5QAFRGOAqA
rGSUHjjzUpGVNAWg+9IqAJWVlYHeeShHNvzy3wFTANQbCoDKCDcBkMnLy1POAsjGjOl4ioqKUFBQ
wP/V3k2RAiD/Ra5Go1H+S16w7ySUItcxOzubAqDiUABURrgJgOy9er1epUclKxqm45HbTN79zTMA
3RO5nevr68NuX21sbOQ+ptJQAFRGOJ4BkL0L5uUje6Ts/XdvZEMot3uw7yNUw8ZfvaEAqIxwFACG
YRjm1YcCoDIoAAzDMMyrCAVAZVAAGIZhmFcRCoDKoAAwDMMwryIUAJVBAWAYhmFeRSgAKoMCwDAM
w7yKUABUBgWAYRiGeRWhAKgMCgDDMAzzKkIBUBl79sdfEe0/vn/+vfLlMQzDMMwvicRg81IA1MKm
zV/cc1Q3QCesTZobwzAMw/ySGEXjn1dcSQEghBBCCCGEEEIIIYQQQgghhBBCyGvK3/zN/wdXgoc2
p0bICQAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load = {
	
	$MainForm.MaximizeBox = $false
	
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$comboboxO365countrycode.SelectedItem = "US"
	
	$comboboxO365HidefromGAL.SelectedItem = "False"
	
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateAnActiveDirect.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunADSyncAfterUserCr.CheckState -eq 'Checked')
		{
			If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$SyncServer = $textboxADSyncServer.text
				add-logs -text 'LOG: DirSync Enabled'
				add-logs -text "LOG: Running DirSync on $SyncServer"
				add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
				Try
				{
					Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
				}
				Catch
				{
					add-logs -text "WARN: $_"
					Add-Type -AssemblyName System.Windows.Forms
					[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
				}
				add-logs -text 'LOG: Done'
			}
			Else
			{
				add-logs -text "WARN: ADSync Server text box is empty"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
			}
		}
		#If DirSync is not enabled
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				
				#User is going to be disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop) )
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
		
		#### ACTIVE DIRECTORY USER CREATION PORTION ####
		
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
		
		
		
		#### OFFICE 365 USER CREATION PORTION ####
		
		
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunADSyncAfterUserCr.CheckState -eq 'Checked')
		{
			If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$SyncServer = $textboxADSyncServer.text
				add-logs -text 'LOG: DirSync Enabled'
				add-logs -text "LOG: Running DirSync on $SyncServer"
				add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
				Try
				{
					Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
				}
				Catch
				{
					add-logs -text "WARN: $_"
					Add-Type -AssemblyName System.Windows.Forms
					[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
				}
				add-logs -text 'LOG: Done'
			}
			Else
			{
				add-logs -text "WARN: ADSync Server text box is empty"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
			}
		}
		#If DirSync is not enabled
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				
				#User is going to be disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}


$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}


$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateAnActiveDirect.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = $textboxUserLogonName.text
		$comboboxO365Domains.SelectedItem = $comboboxDomains.SelectedItem
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		If ($Modules -eq $Null)
		{
			add-logs -text 'WARN: MFA Module was not found'
			$InfoMessage = "Exchange Online MFA Module was not found, please make sure you have downloaded and installed it from your tenant https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/mfa-connect-to-exchange-online-powershell?view=exchange-ps"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		
		$labelconnectionstatus.Text = "Connected"
		$labelconnectionstatus.ForeColor = 'Green'
		
		$Global:O365_Pre_Req++
		#Create just an AD User
		If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD nad O365 User (w/ ADSync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD And O365 User (no Sync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 User no adsync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 user with ADSync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		$comboboxO365HidefromGAL.SelectedItem = "False"
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunADSyncAfterUserCr_CheckedChanged = {
	If ($checkboxRunADSyncAfterUserCr.Checked -eq $True)
	{
		$groupboxNoAdSync.Enabled = $false
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
		
	}
	elseif ($checkboxRunADSyncAfterUserCr.Checked -eq $false)
	{
		$groupboxNoAdSync.Enabled = $True
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged= {
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
		
	If ($Global:ExternalLog -ne $null)
	{
		$console.Text | Out-File $Global:ExternalLog 
	}
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found on local system'
			$checkboxRunADSyncAfterUserCr.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found on local system'
			$checkboxRunADSyncAfterUserCr.Enabled = $True
			$groupboxADSync.Enabled = $true
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Enabling ADSync CheckBox'
		$checkboxRunADSyncAfterUserCr.Enabled = $True
		add-logs -text 'LOG: Enabling No ADSync Groupbox'
		$groupboxNoAdSync.Enabled = $true
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateAnActiveDirect_CheckedChanged = {
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Organizational Unit Tree'
		add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
		$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName
		If ($null -eq $OUTree)
		{
			$InfoMessage = 'Could not load Organizational Unit structure'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$comboboxOUTree.Enabled = $false
		}
		Else
		{
			add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
			Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
			add-logs -text 'LOG: Done'
			$comboboxOUTree.Enabled = $true
		}
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$textboxUPNDomain.Text ="Not Available"
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$comboboxDomains.Enabled = $false
		}
		Else
		{
			$comboboxDomains.Enabled = $true
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {

		$textboxSamAccount.Text = $textboxUserLogonName.Text
	
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
		
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
		
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	$comboboxOUTree.SelectedText = ""
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunADSyncAfterUserCr.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	$comboboxMFA.SelectedItem = "False"
	$comboboxO365countrycode.SelectedItem = "US"
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""
	$textboxo365city.Text = ""
	$textboxo365state.Text = ""
	$textboxo365zip.Text = ""
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHub_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSyncAfterUserCr.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$Global:O365_Pre_Req--
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	$labelconnectionstatus.Text = "Not Connected"
	$labelconnectionstatus.ForeColor = 'Firebrick'
	
}



$saveLogAsToolStripMenuItem_Click={
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged={
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}




$versionToolStripMenuItem_Click={
	$InfoMessage = "
Version Number: $Version
Build Date: $Builddate
Author: Brad Wyatt
"
	$InfoTitle = "Build Information"
	Show-MessageBox_psf
	
}


$changelogToolStripMenuItem_Click={
	Show-ChangeLog_psf
	
}

$labelChangelog_Click={
	Show-ChangeLog_psf
	
}

$externalLogFileToolStripMenuItem_Click={
	# Class Details:  https://msdn.microsoft.com/en-us/library/system.windows.forms.savefiledialog(v=vs.110).aspx 
	$SaveFileDialog = New-Object windows.forms.savefiledialog
	$SaveFileDialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$SaveFileDialog.title = "Log File Location"
	#$SaveFileDialog.filter = "All files (*.*)| *.*"   
	#$SaveFileDialog.filter = "PublishSettings Files|*.publishsettings|All Files|*.*" 
	$SaveFileDialog.filter = "Log Text File|*.txt"
	$SaveFileDialog.ShowHelp = $True
	$result = $SaveFileDialog.ShowDialog()
	$result
	$Global:ExternalLog = $SaveFileDialog.filename
	
	$labelLogFile.Text = $global:ExternalLog
	
}

]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>