<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
pKBrdR39E3NoIY5eQ1USssrGyKhpIftwhrR7EnPzk4gJcCNtkYbuJUd00Bsn5yfwxMEW585J41ls
DlZXlpEa/RRykqS+iw7oHyPHH//JBvq37mqogJW2Otm30rC+cg9jM4sY7a7DJUtdyMkr4KbLc0yT
v2NFTjiUFKSgpGGJqt5B5MR44UlIAvkbLzIBwIzZNhkTADuMj00AUOZnJtHR0clP/TLUgU3NzGFp
YZ7/SB0x6siWl0kPl/xSL0pYpeKAODk6jL5M4+bkQOWe3SdlKdwd9hvu1l9YewaeOB/6iNz6Jwpo
75yGFcZIz3lpaZHsnxnuZkJ6xz8VDGtFV5dJ3s/uSp/EDLeeVcyQ5dbK0icGaE+cvqOAPt430N0I
az1p3HwSSXrnK1w7OOPWMfVyOcrLpwXWNZJuE31Wfg36nP3k1DS3b+iz83R//Ow9AHR71tWx9mw+
fTpikUxz+5ZsL20n/UY4fdxy/uWD+6ucqPilfbj+iYG1/be2OvqOAboNC8SB81jlRiloHrc8qWdm
3VMaa+tbv7+JguDatPa+AcrsNBFMc4tYnCftJ/UwAcCM2fYYEwA7jI9RALwL9CZA6hioA9tNNkX2
d297PdLSszA0Ps3dCS+o3K8x+jpcuv+oAKDTgsrsNqPbSQUAPWb22jcQmDH7NSbIL2w0JgB2GLtB
AFAHRi/qu8oGBzEyOs7t+9GRYQwKKvMrjfb+6Wtx6auA6bSgMrvN1raZvgKZigB6TDNjxkyw0esr
PWeoeN7oEwQZEwA7jPcVAHQYmarCtV7U+q/K/dI0/d3KadqutZ7dWi92J03T3zdNbyy7XdPr7dfU
I2ia/m5mmv7+O6bfZOvnb/f0entT/rvYZurYTLu2anq9vSn/XWwzdWymXVs1vd7elP8utpk6NtOu
XztNjd4zQ3+pYKbXW0G+Yb0xAbDDeF8BUFhYiLKyMlRWVr78XZuuqqpCRUXFz/Lp71r+Wpny8vJf
nKa/b5qm5aqrq7lfWvebptfqpL9ry74pf236l/Jp3XR5QeVp/voyb5umv9RqampeTq/l03KbmV6/
fmo7ZfvWT9Nl3jS9tv435a+18WPcvrV8usxa/sbptfW/KX+tjWz7tn/76Ly35W+cXlv/m/LX2rjT
ti8nJ4fr6C0sLHCjZ0wA7ELeRwCsrq6ipKSEm2YwGAzG7oMKDnrTLBMAu5j3FQBUKdJfBoPBYOw+
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</Preview>
  <Form>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
V/90vvwPYfjHdgdOAwA=</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load = {
	
	$textboxADSyncServer.Enabled = $false
	
	$datetimepickerDATE.Refresh()
	
	$radiobuttonNever.Checked = $true
	$datetimepickerDATE.Enabled = $false
	$datetimepickerTIME.Enabled = $false
	
	$datetimepickerTIME.Text = "05:00 PM"
	
	$MainForm.MaximizeBox = $false
	
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$comboboxO365countrycode.SelectedItem = "US"
	
	$comboboxO365HidefromGAL.SelectedItem = "False"
	
	$labelTimeLeft.Text = ""
	
	$global:ExternalLog = "$env:TEMP\MUC.txt"
	$labelLogFile.Text = $global:ExternalLog
	
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items "Domain Users"
	$comboboxPrimaryGroup.SelectedItem = "Domain Users"
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateAnActiveDirect.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
					
					Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
					If ($comboboxPrimaryGroup.Text -eq "Domain Users")
					{
						Add-Logs -text "LOG: Primary Group set to Domain Users"
					}
					Else
					{
						$PrimaryGroup = $comboboxPrimaryGroup.Text
						Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
						Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
						$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
						Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
						Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
					}
					Add-Logs -text "LOG: Done"
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
					
					Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
					If ($comboboxPrimaryGroup.Text -eq "Domain Users")
					{
						Add-Logs -text "LOG: Primary Group set to Domain Users"
					}
					Else
					{
						$PrimaryGroup = $comboboxPrimaryGroup.Text
						Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
						Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
						$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
						Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
						Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
					}
					Add-Logs -text "LOG: Done"
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunADSync.CheckState -eq 'Checked')
		{
			If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$SyncServer = $textboxADSyncServer.text
				add-logs -text 'LOG: DirSync Enabled'
				add-logs -text "LOG: Running DirSync on $SyncServer"
				add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
				Try
				{
					Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
				}
				Catch
				{
					add-logs -text "WARN: $_"
					Add-Type -AssemblyName System.Windows.Forms
					[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
				}
				add-logs -text 'LOG: Done'
			}
			Else
			{
				add-logs -text "WARN: ADSync Server text box is empty"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
			}
		}
		#If DirSync is not enabled
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				
				#User is going to be disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										If ($Automap -eq "False")
										{
											Add-Logs -text "LOG: AutoMapping set to False"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
										}
										Else
										{
											Add-Logs -text "LOG: AutoMapping set to True"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
										}
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop) )
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										If ($Automap -eq "False")
										{
											Add-Logs -text "LOG: AutoMapping set to False"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
										}
										Else
										{
											Add-Logs -text "LOG: AutoMapping set to True"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
										}
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
		
		#### ACTIVE DIRECTORY USER CREATION PORTION ####
		
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
					
					Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
					If ($comboboxPrimaryGroup.Text -eq "Domain Users")
					{
						Add-Logs -text "LOG: Primary Group set to Domain Users"
					}
					Else
					{
						$PrimaryGroup = $comboboxPrimaryGroup.Text
						Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
						Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
						$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
						Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
						Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
					}
					Add-Logs -text "LOG: Done"
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
					
					Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
					If ($comboboxPrimaryGroup.Text -eq "Domain Users")
					{
						Add-Logs -text "LOG: Primary Group set to Domain Users"
					}
					Else
					{
						$PrimaryGroup = $comboboxPrimaryGroup.Text
						Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
						Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
						$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
						Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
						Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
					}
					Add-Logs -text "LOG: Done"
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
		
		
		
		#### OFFICE 365 USER CREATION PORTION ####
		
		
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunADSync.CheckState -eq 'Checked')
		{
			If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$SyncServer = $textboxADSyncServer.text
				add-logs -text 'LOG: DirSync Enabled'
				add-logs -text "LOG: Running DirSync on $SyncServer"
				add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
				Try
				{
					Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
				}
				Catch
				{
					add-logs -text "WARN: $_"
					Add-Type -AssemblyName System.Windows.Forms
					[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
				}
				add-logs -text 'LOG: Done'
			}
			Else
			{
				add-logs -text "WARN: ADSync Server text box is empty"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
			}
		}
		#If DirSync is not enabled
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				
				#User is going to be disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										If ($Automap -eq "False")
										{
											Add-Logs -text "LOG: AutoMapping set to False"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
										}
										Else
										{
											Add-Logs -text "LOG: AutoMapping set to True"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
										}
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										If ($Automap -eq "False")
										{
											Add-Logs -text "LOG: AutoMapping set to False"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
										}
										Else
										{
											Add-Logs -text "LOG: AutoMapping set to True"
											Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
											Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
										}
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}


$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}


$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateAnActiveDirect.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = $textboxUserLogonName.text
		$comboboxO365Domains.SelectedItem = $comboboxDomains.SelectedItem
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: $((Get-ChildItem -Path $($env:LOCALAPPDATA+"\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse ).FullName|?{$_ -notmatch "_none_"}|select -First 1)'
		$Modules = $((Get-ChildItem -Path $($env:LOCALAPPDATA + "\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse).FullName | Where-Object{ $_ -notmatch "_none_" } | Select-Object -First 1)
		If ($Modules -eq $Null)
		{
			add-logs -text 'WARN: MFA Module was not found'
			$InfoMessage = "Exchange Online MFA Module was not found, please make sure you have downloaded and installed it from your tenant https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/mfa-connect-to-exchange-online-powershell?view=exchange-ps"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		$EXOSession = New-ExoPSSession
		Import-PSSession $EXOSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		
		$labelconnectionstatus.Text = "Connected"
		$labelconnectionstatus.ForeColor = 'Green'
		
		$Global:O365_Pre_Req++
		#Create just an AD User
		If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD nad O365 User (w/ ADSync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD And O365 User (no Sync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 User no adsync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 user with ADSync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		$comboboxO365HidefromGAL.SelectedItem = "False"
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunADSync_CheckedChanged = {
	If ($checkboxRunADSync.Checked -eq $True)
	{
		$groupboxNoAdSync.Enabled = $false
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
		
		$textboxADSyncServer.Enabled = $true
		
	}
	elseif ($checkboxRunADSync.Checked -eq $false)
	{
		$groupboxNoAdSync.Enabled = $True
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
		
		$textboxADSyncServer.Enabled = $false
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged= {
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
		
	If ($Global:ExternalLog -ne $null)
	{
		$console.Text | Out-File $Global:ExternalLog 
	}
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Enabling ADSync CheckBox'
		$checkboxRunADSync.Enabled = $True
		add-logs -text 'LOG: Enabling No ADSync Groupbox'
		$groupboxNoAdSync.Enabled = $true
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateAnActiveDirect_CheckedChanged = {
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Organizational Unit Tree'
		add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
		$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName
		If ($null -eq $OUTree)
		{
			$InfoMessage = 'Could not load Organizational Unit structure'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$comboboxOUTree.Enabled = $false
		}
		Else
		{
			add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
			Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
			add-logs -text 'LOG: Done'
			$comboboxOUTree.Enabled = $true
		}
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$textboxUPNDomain.Text ="Not Available"
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$comboboxDomains.Enabled = $false
		}
		Else
		{
			$comboboxDomains.Enabled = $true
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {

		$textboxSamAccount.Text = $textboxUserLogonName.Text
	
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
		
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
		
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	$comboboxOUTree.SelectedText = ""
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunADSync.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	$comboboxMFA.SelectedItem = "False"
	$comboboxO365countrycode.SelectedItem = "US"
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""
	$textboxo365city.Text = ""
	$textboxo365state.Text = ""
	$textboxo365zip.Text = ""
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHub_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$Global:O365_Pre_Req--
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	$labelconnectionstatus.Text = "Not Connected"
	$labelconnectionstatus.ForeColor = 'Firebrick'
	
}



$saveLogAsToolStripMenuItem_Click={
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged={
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}




$versionToolStripMenuItem_Click={
	$InfoMessage = "
Version Number: $Version
Build Date: $Builddate
Author: Brad Wyatt
"
	$InfoTitle = "Build Information"
	Show-MessageBox_psf
	
}


$changelogToolStripMenuItem_Click={
	Show-ChangeLog_psf
	
}

$labelChangelog_Click={
	Show-ChangeLog_psf
	
}

$externalLogFileToolStripMenuItem_Click={
	# Class Details:  https://msdn.microsoft.com/en-us/library/system.windows.forms.savefiledialog(v=vs.110).aspx 
	$SaveFileDialog = New-Object windows.forms.savefiledialog
	$SaveFileDialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$SaveFileDialog.title = "Log File Location"
	#$SaveFileDialog.filter = "All files (*.*)| *.*"   
	#$SaveFileDialog.filter = "PublishSettings Files|*.publishsettings|All Files|*.*" 
	$SaveFileDialog.filter = "Log Text File|*.txt"
	$SaveFileDialog.ShowHelp = $True
	$result = $SaveFileDialog.ShowDialog()
	$result
	$Global:ExternalLog = $SaveFileDialog.filename
	Write-Host $result
	If ($result -eq "Ok")
	{
		
		$labelLogFile.Text = $global:ExternalLog
		
	}
}


$radiobuttonExpireOn_CheckedChanged = {
	#Enable the Date Date / Time picker
	$datetimepickerDATE.Enabled = $true
	#Enable the Time date/time picker
	$datetimepickerTIME.Enabled = $true
	
}

$radiobuttonNever_CheckedChanged = {
	#Disable the Date Date/Time picker
	$datetimepickerDATE.Enabled = $false
	#Disable the Time Date/Time picker
	$datetimepickerTIME.Enabled = $false
	
}

$datetimepickerDATE_ValueChanged={	
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$datetimepickerTIME_ValueChanged={
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$checkedlistboxGroups_SelectedIndexChanged = {
	$Items = @()
	$Items += $checkedlistboxGroups.CheckedItems
	$Items += "Domain Users"
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items $Items 
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>