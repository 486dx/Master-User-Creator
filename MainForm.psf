<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
hKgbCoBKoQAQQoi6oQCoFAoAIYSoGwqASqEAEEKIuqEAqBQKACGEqBsKgEqhABBCiLqhAKgUCgAh
hKgbCoBKoQAQQoi6oQCoFAoAIYSoGwqASqEAEEKIuqEAqBQKACGEqBsKgEqhABBCiLqhAKgUCgAh
hKgbCoBKoQAQQoi6oQCoFAoAIYSoGwqASqEAEEKIuqEAqBQKACGEqBsKgEqhABBCiLqhAKgUCgAh
hKgbCoBKoQAQQoi6oQCoFAoAIYSoGwqASqEAEEKIuqEAqBQKACGEqBsKgEqhABBCiLqhAKgUCgAh
hKgbCoBKoQAQQoi6oQCoFAoAIYSoGwqASqEAEEKIuqEAqBQKACGEqBsKgEqhABBCiLqhAKgUCgAh
hKgbCoBKoQAQQoi6oQCoFAoAIYSoGwqASqEAEEKIuqEAqBQKACGEqBsKgEqhABBCiLqhAKgUCgAh
hKgbCoBKoQAQQoi6oQCoFAoAIYSoGwqASqEAEEKIuqEAqBQKACGEqBsKgEqhABBCiLqhAKgUCgAh
hKgbCoBKoQAQQoi6oQCoFAoAIYSoGwqASqEAEEKIuqEAqBQKACGEqBsKgEqhABBCiLqhAKgUCgAh
hKgbCoBKoQAQQoi6oQCoFAoAIYSoGwqASqEAEEKIuqEAqBQKACGEqBsKgEqhABBCiLqhAKgUCgAh
hKgbCoBKoQAQQoi6oQCoFAoAIYSoGwqASqEAEEKIuqEAqBQKACGEqBsKgEqhABBCiLqhAKgUCgAh
hKgbCoBKoQAQQoi6oQCoFAoAIYSoGwqASqEAEEKIuqEAqBQKACGEqBsKgEqhABBCiLqhAKgUCgAh
hKgbCoBKoQAQQoi6oQCoFAoAIYSoGwqASqEAEEKIuqEAqBQKACGEqBsKgEqhABBCiLqhAKgUCgAh
hKgbCoBKoQAQQoi6oQCoFAoAIYSoGwqASqEAEEKIuqEAqBQKACGEqBsKgEqhABBCiLqhAKgUCgAh
hKgbCoBKoQAQQoi6oQCoFAoAIYSoGwqASqEAEEKIuqEAqBQKACGEqBsKgEqhABBCiLqhAKgUCgAh
hKgbCoBKoQAQQoi6oQCoFAoAIYSoGwqASqEAEEKIuqEAqBQKACGEqBsKgEqhABBCiLqhAKgUCgAh
hKgbCoBKoQAQQoi6oQCoFAoAIYSoGwqASqEAEEKIuqEAqBQKACGEqBsKgEqhABBCiLqhAKgUCgAh
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</Preview>
  <Form>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
dD/9P9XyKzdEpAMA</Form>
  <Code><![CDATA[#region Control Helper Functions
function Toogle-LicenseStatus
{
	If ($null -eq $Licenses2Add)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
#If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
#If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($Licenses2Add.Count -ge 1))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($Licenses2Add.Count -ge 1))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Get-DictionaryPassword
{
	param
	(
		
		[switch]$O365
	)
	$Dictionary = @(
		"Honda";
		"Staple";
		"Battery";
		"Civic";
		"Chicago";
		"Winter";
		"Cubs";
		"Bears";
		"Snow";
		"Train";
		"Shoes";
		"Blue";
		"Bike";
		"Ring";
		"Watch";
		"Computer";
		"Neck";
		"Laptop";
		"Monitor";
		"Toilet";
		"Baseball";
		"Football";
		"Soccer";
		"Phone";
		"Carbondale";
		"Saluki";
		"Swim";
		"Lake";
		"Puppy";
		"Watch";
		"Royals";
		"Basketball";
		"Letter";
		"Paper";
		"Sticker";
		"Kitten";
		"Marker";
		"Highway";
		"Wire";
		"Keyboard";
		"Frisbee";
		"Disc";
		"Hawk";
		"West";
		"North";
		"East";
		"South";
		"Water";
		"Ice";
		"Dirt";
		"Taco";
		"Mouse";
		"Deer";
		"Speaker";
		"Hand";
		"Green";
		"Purple";
		"Pink";
		"Boat";
		"Toilet";
		"Sting";
		"Fish";
		"Bee";
		"White";
		"Grey";
		"Shoes";
		"Carpet";
		"Bed";
		"Pillow";
		"Sears";
		"Mustard";
		"Relish";
		"Ketchup";
		"Milk";
		"Apple";
		"Orange";
		"Flower";
		"Lotion";
		"Plane";
		"Desert";
		"Sand";
		"Beach";
		"Clouds";
		"Wagon";
		"Hair";
		"Internet";
		"Track";
		"Golf";
		"Sledding";
		"Market";
		"Window";
		"Door";
		"Deck";
		"Cards";
		"Shelf";
		"Santa";
		"Tack";
		"Building";
		"Tennis";
		"Power";
		"Sox";
		"Wrigley";
		"Tea";
		"Juice";
		"Plant";
		"Geneva";
		"City";
		"Kansas";
		"Missouri";
		"Midwest";
		"Great";
		"Box";
		"Crane";
		"Michigan";
		"Illinois";
		"Garbage";
		"Cougars";
		"Route";
		"Bridge";
		"Mountain";
		"Message";
		"Fire";
		"Taxi";
		"Bus";
		"Color";
		"Sharpie";
		"Ball";
		"Square";
		"River";
		"Navy";
		"Pier";
		"Grant";
		"Park";
		"Lincoln";
		"President";
		"Wrigley";
		"Soldier";
		"Forest";
		"Bulldog";
		"Police";
		"Taco";
		"Deep";
		"Dish";
		"Pizza";
		"Fire";
		"Ice";
		"Lion";
		"World";
		"Shoe";
		"Ant";
		"Bug";
		"Hair";
		"Beard";
		"Light";
		"Wave";
		"Field";
		"Toll";
		"Tax";
		"Money";
		"Bill";
		"Pot";
		"Pan"
	)
	If ($O365 -eq $True)
	{
		$word1 = (Get-Random $Dictionary)
		$Num = Get-random -Maximum 99 -Minimum 0
		$WChar = @(
			"!"
			"@"
			"$"
			"%"
			"&"
			"?"
			"#"
		)
		$Wildchar = Get-random $WChar
		
		$Word1 + "-" + $Num + $WildChar
	}
	Else
	{
		$word1 = (Get-Random $Dictionary)
		
		$word2 = (Get-Random $Dictionary | Where-Object { $_ -ne $word1 })
		
		$Word3 = (Get-Random $Dictionary | Where-Object { ($_ -ne $word1) -and ($_ -ne $word2) })
		
		$Num = Get-random -Maximum 99 -Minimum 0
		
		$Word1 + "-" + $word2 + "-" + $word3 + $Num
	}
	
	
}

function Reset-Form
{
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	
	$ADDescriptionReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription
	If ($ADDescriptionReset -ne 1)
	{
		$textboxDescription.Text = ""
	}
	
	$ADOfficeReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADOfficeReset -ne 1)
	{
		$textboxoffice.Text = ""
	}
	
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	$comboboxOUTree.SelectedText = ""
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	
	$ADCityReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADCityReset -ne 1)
	{
		$textboxcity.Text = ""
	}
	$ADStateReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState
	If ($ADStateReset -ne 1)
	{
		$textboxstate.Text = ""
	}
	
	$ADZipReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADZip -ErrorAction SilentlyContinue).ADZip
	If ($ADZipReset -ne 1)
	{
		$textboxzipcode.Text = ""
	}
	
	
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	
	$ADDepartmentReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment
	If ($ADDepartmentReset -ne 1)
	{
		$textboxDepartment.Text = ""
	}
	
	$ADCompanyReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany
	If ($ADCompanyReset -ne 1)
	{
		$textboxCompany.Text = ""
	}
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	
	$ADLogonScriptReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADLogonScript -ErrorAction SilentlyContinue).ADLogonScript
	If ($ADLogonScriptReset -ne 1)
	{
		$textboxlogonscript.Text = ""
	}
	

	
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	$textboxEmployeeID.Text = ""
	$textboxemployeenumber.Text = ""
	$textboxemployeeType.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunADSync.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	$comboboxMFA.SelectedItem = "False"
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""

	$O365CityReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City
	If ($O365CityReset -ne 1)
	{
		$textboxo365city.Text = ""
	}
	
	$O365StateReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State
	If ($O365StateReset -ne 1)
	{
		$textboxo365state.Text = ""
	}
	
	$O365ZipReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365Zip -ErrorAction SilentlyContinue).O365Zip
	If ($O365ZipReset -ne 1)
	{
		$textboxo365zip.Text = ""
	}
	
	
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

function Update-DisplayNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatDisplayName -ErrorAction SilentlyContinue).UserFormatDisplayName
		#Create an array that we will use for formatting
		$DisplayNameFormatString = @()
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%Firstname% %LastName%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatDisplayName -Value "%FirstName% %LastName%" -Force | Out-Null
		}
		
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text
			}
			ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
			{
				$DisplayNameFormatString += $textboxInitials.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$DisplayNameFormatString += $space
			}
			ElseIf ($_ -eq "EmployeeID")
			{
				$DisplayNameFormatString += $textboxEmployeeID.text
			}
			ElseIf ($_ -eq "EmployeeNumber")
			{
				$DisplayNameFormatString += $textboxemployeenumber.text
			}
			ELseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.text
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$DisplayNameFormatString += $textboxUserLogonName.text
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$DisplayNameFormatString += $textboxEmail.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.Text
			}
			ElseIf ($_ -eq "UserPrincipalNameDomain")
			{
				$EmailFormatString += $comboboxDomains.SelectedItem
			}
			ElseIf ($_ -eq "UPNDomain")
			{
				$EmailFormatString += $comboboxDomains.SelectedItem
			}
			Else
			{
				$DisplayNameFormatString += $_
			}
			
			$textboxDisplayName.Text = [String]::Join('', $DisplayNameFormatString)
			
		}
		
		
	}
}

function Update-EmailTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatEmail -ErrorAction SilentlyContinue).UserFormatEmail
		#Create an array that we will use for formatting
		$EmailFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$EmailFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$EmailFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$EmailFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$EmailFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$EmailFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$EmailFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$EmailFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$EmailFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$EmailFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$EmailFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.Text
				}
				ElseIf ($_ -eq "UserPrincipalNameDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				ElseIf ($_ -eq "UPNDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				Else
				{
					$EmailFormatString += $_
				}
				
			}
			$textboxEmail.Text = [String]::Join('', $EmailFormatString)
		}
	}
}

function Update-SamAccountNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatSamAccountName -ErrorAction SilentlyContinue).UserFormatSamAccountName
		#Create an array that we will use for formatting
		$SamAccountNameFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$SamAccountNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$SamAccountNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$SamAccountNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$SamAccountNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$SamAccountNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$SamAccountNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$SamAccountNameFormatString += $_
				}
				
			}
			$textboxSamAccount.Text = [String]::Join('', $SamAccountNameFormatString)
		}
	}
}

function Update-UserPrincipalNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatUserPrincipalName -ErrorAction SilentlyContinue).UserFormatUserPrincipalName
		#Create an array that we will use for formatting
		$UserPrincipalNameFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$UserPrincipalNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$UserPrincipalNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$UserPrincipalNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$UserPrincipalNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$UserPrincipalNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$UserPrincipalNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.Text
				}
				ElseIf ($_ -eq "UserPrincipalNameDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				ElseIf ($_ -eq "UPNDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				Else
				{
					$UserPrincipalNameFormatString += $_
				}
				
			}
			$textboxUserLogonName.Text = [String]::Join('', $UserPrincipalNameFormatString)
		}
	}
}

function Set-DarkMode
{
	$labelCountryCode.ForeColor = 'White'
	$contextmenustrip1.BackColor = "44,44,44"
	$contextmenustrip1.ForeColor = 'White'
	$MainForm.BackColor = "44,44,44"
	$MainForm.ForeColor = 'White'
	
	$labelLogFile.BackColor = "44,44,44"
	$labelLogFile.ForeColor = 'White'
	
	$labelconnectionstatus.ForeColor = 'LightCoral'
	
	
	$richtextboxregistry.ForeColor = 'White'
	$richtextboxregistry.BackColor = "44,44,44"
	
	$groupboxStatus.ForeColor = 'White'
	
	
	$tabpageSettings.BackColor = "44,44,44"
	$tabpageSettings.ForeColor = 'White'
	$groupboxADGroups.ForeColor = 'White'
	
	$menustrip1.BackColor = "44,44,44"
	$menustrip1.ForeColor = 'White'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "44,44,44"
					$_.ForeColor = 'White'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'White'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "44,44,44"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'White'
	$copyOffice365UserToolStripMenuItem.BackColor = "44,44,44"
	
	
	$groupboxInformation.ForeColor = 'White'
	$linklabelBradleyWyatt.LinkColor = 'DeepSkyBlue'
	$linklabelGitHub.LinkColor = 'DeepSkyBlue'
	$labelChangelog.ForeColor = 'DeepSkyBlue'
	
	$console.BackColor = "35,35,35"
	$console.ForeColor = 'White'
	
	$buttonExit.ForeColor = "white"
	$buttonExit.BackColor = "35,35,35"
	
	$buttonCreateUser.ForeColor = "white"
	$buttonCreateUser.BackColor = "35,35,35"
	
	$groupboxADUser.ForeColor = 'White'
	$groupboxADUser.BackColor = "44,44,44"
	
	$groupbox2FA.ForeColor = 'White'
	$groupboxOffice365User.ForeColor = 'White'
	
	$tabcontrolUserProperties.ForeColor = 'White'
	$tabcontrolUserProperties.BackColor = "44,44,44"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
		

	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
	}
	
	#GENERAL PAGE
	$groupboxADSync.ForeColor = 'White'
	$panel1.BackColor = "35,35,35"
	$labelDisplayName.ForeColor = 'LightCoral'
	$labelPassword.ForeColor = 'LightCoral'
	$labelConfirmPassword.ForeColor = 'LightCoral'

	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
				$_.BackColor = "35,35,35"
				$_.ForeColor = 'White'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'White'
	$buttonGeneratePassword.BackColor = '44,44,44'
	$buttonClear.ForeColor = 'White'
	$buttonClear.BackColor = '44,44,44'
	
	$textboxPasswordGen.ForeColor = 'White'
	$textboxPasswordGen.BackColor = '35,35,35'
	$maskedtextboxpassword.ForeColor = 'White'
	$maskedtextboxpassword.BackColor = '44,44,44'
	$textboxConfirmPassword.BackColor = '44,44,44'
	$textboxConfirmPassword.ForeColor = 'White'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Flat'
	$comboboxDomains.ForeColor = 'White'
	$comboboxDomains.BackColor = "35,35,35"
	
	$comboboxOUTree.FlatStyle = 'Flat'
	$comboboxOUTree.ForeColor = 'White'
	$comboboxOUTree.BackColor = "35,35,35"
	
	$panel2.ForeColor = 'White'
	$Panel2.BackColor = "35,35,35"
	
	$datetimepickerDATE.ForeColor = 'White'
	$datetimepickerDATE.CalendarMonthBackground = "35,35,35"
	
	$datetimepickerTIME.ForeColor = 'White'
	$datetimepickerTIME.BackColor = "35,35,35"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "44,44,44"
	
	$groupboxaccountexpires.ForeColor = 'White'
	$labelUserLogonNameUPN.ForeColor = 'LightCoral'
	$labelUserLogonNamepreWind.ForeColor = 'White'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'White'
	$checkedlistboxGroups.BackColor = "35,35,35"
	$textboxPOSIX.ForeColor = 'White'
	$textboxPOSIX.BackColor = "44,44,44"
	
	$textboxSearchGroups.ForeColor = 'White'
	$textboxSearchGroups.BackColor = "35,35,35"
	
	$comboboxPrimaryGroup.FlatStyle = 'Flat'
	$comboboxPrimaryGroup.ForeColor = 'White'
	$comboboxPrimaryGroup.BackColor = "35,35,35"
	
	$groupboxPrimaryGroup.ForeColor = 'White'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'White'
	$groupboxHomeFolder.ForeColor = 'White'
	$comboboxDriveLetter.FlatStyle = 'Flat'
	$comboboxDriveLetter.ForeColor = 'White'
	$comboboxDriveLetter.BackColor = "35,35,35"
	$textboxhomedirectory.ForeColor = 'White'
	$textboxhomedirectory.BackColor = "35,35,35"
	$textboxprofilepath.ForeColor = 'White'
	$textboxprofilepath.BackColor = "35,35,35"
	$textboxlogonscript.ForeColor = 'White'
	$textboxlogonscript.BackColor = "35,35,35"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "44,44,44"
	$tabcontrolO365.ForeColor = 'White'
	$textboxADSyncServer.ForeColor = 'White'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365userpassword.ForeColor = 'LightCoral'
	$labelO365userconfirmpassword.ForeColor = 'LightCoral'
	$labelO365DisplayName.ForeColor = 'LightCoral'
	$tabpageO365General.BackColor = "44,44,44"
	$groupboxADSync.ForeColor = 'White'
	$textboxADSyncServer.BackColor = "35,35,35"
	$groupboxNoAdSync.ForeColor = 'White'
	$comboboxO365Licenses.FlatStyle = 'Flat'
	$comboboxO365Licenses.BackColor = "35,35,35"
	$comboboxO365Licenses.ForeColor = 'White'
	$panel3.ForeColor = 'White'
	$panel3.BackColor = "35,35,35"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$textboxo365passwordgen.BackColor = "44,44,44"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Lightcoral'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'White'
	$tabpageO365Account.BackColor = "44,44,44"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'LightCoral'
	$panel4.ForeColor = 'White'
	$panel4.BackColor = "35,35,35"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{

			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.BackColor = "44,44,44"
	$tabpageO365Address.ForeColor = 'White'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'White'
	$tabpageO365Groups.BackColor = "44,44,44"
	$labelO365Groups.ForeColor = 'White'
	$labelO365Groups.BackColor = "44,44,44"
	$checkedlistboxDISTROo365groups.ForeColor = 'White'
	$checkedlistboxDISTROo365groups.BackColor = "35,35,35"
	$labelSearch.ForeColor = 'White'
	$textboxO365MailGroups.ForeColor = 'White'
	$textboxO365MailGroups.BackColor = "35,35,35"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'White'
	$labelSecurityGroups.BackColor = "44,44,44"
	$checkedlistboxO365SecurityGroups.ForeColor = 'White'
	$checkedlistboxO365SecurityGroups.BackColor = "35,35,35"
	$labelSearchGroups2.ForeColor = 'White'
	$labelSearchGroups2.BackColor = "44,44,44"
	$textboxSearchO365SecurityGroups.ForeColor = 'White'
	$textboxSearchO365SecurityGroups.BackColor = "35,35,35"
	$tabpagesecurityGroups.BackColor = "44,44,44"
	$tabpagesecurityGroups.ForeColor = 'White'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'White'
	$labelsharedmailboxes.BackColor = "44,44,44"
	$tabpageo365shared.ForeColor = 'White'
	$tabpageo365shared.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.ForeColor = 'White'
	$groupboxSettingsSharedMailbox.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'White'
	$checkedlistboxsharedmailboxes.BackColor = "35,35,35"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "White"
	$tabpageO365Attributes.BackColor = "44,44,44"
	$comboboxO365HidefromGAL.FlatStyle = 'Flat'
	$comboboxO365HidefromGAL.ForeColor = 'White'
	$comboboxO365HidefromGAL.BackColor = "35,35,35"
	
	$comboboxOWA.FlatStyle = 'Flat'
	$comboboxOWA.ForeColor = 'White'
	$comboboxOWA.BackColor = "35,35,35"
	
	$comboboxActiveSync.FlatStyle = 'Flat'
	$comboboxActiveSync.ForeColor = 'White'
	$comboboxActiveSync.BackColor = "35,35,35"
	
	
}

function Set-LightMode
{
	$labelCountryCode.ForeColor = 'Black'
	$contextmenustrip1.BackColor = "WhiteSmoke"
	$contextmenustrip1.ForeColor = 'Black'
	$MainForm.BackColor = "WhiteSmoke"
	$MainForm.ForeColor = 'Black'
	
	$labelLogFile.BackColor = "White"
	$labelLogFile.ForeColor = 'Black'
	
	$labelconnectionstatus.ForeColor = 'FireBrick'
	
	$richtextboxregistry.ForeColor = 'Black'
	$richtextboxregistry.BackColor = "White"
	
	$groupboxStatus.ForeColor = 'Black'
	
	
	$tabpageSettings.BackColor = "White"
	$tabpageSettings.ForeColor = 'Black'
	$groupboxADGroups.ForeColor = 'Black'
	
	$menustrip1.BackColor = "White"
	$menustrip1.ForeColor = 'Black'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "White"
					$_.ForeColor = 'Black'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'Black'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "White"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'Black'
	$copyOffice365UserToolStripMenuItem.BackColor = "White"
	
	
	$groupboxInformation.ForeColor = 'Black'
	$linklabelBradleyWyatt.LinkColor = '0, 0, 255'
	$linklabelGitHub.LinkColor = '0, 0, 255'
	$labelChangelog.ForeColor = '0, 0, 255'
	
	$console.BackColor = "White"
	$console.ForeColor = 'Black'
	
	$buttonExit.ForeColor = "Black"
	$buttonExit.BackColor = "White"
	
	$buttonCreateUser.ForeColor = "Black"
	$buttonCreateUser.BackColor = "White"
	
	$groupboxADUser.ForeColor = 'Black'
	$groupboxADUser.BackColor = "White"
	
	$groupbox2FA.ForeColor = 'Black'
	$groupboxOffice365User.ForeColor = 'Black'
	
	$tabcontrolUserProperties.ForeColor = 'Black'
	$tabcontrolUserProperties.BackColor = "White"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
		
		
	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
	}
	
	#GENERAL PAGE
	$panel1.BackColor = "MenuBar"
	$labelDisplayName.ForeColor = 'FireBrick'
	$labelPassword.ForeColor = 'FireBrick'
	$labelConfirmPassword.ForeColor = 'FireBrick'
	
	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'Black'
	$buttonGeneratePassword.BackColor = 'White'
	$buttonClear.ForeColor = 'Black'
	$buttonClear.BackColor = 'White'
	
	$textboxPasswordGen.ForeColor = 'Black'
	$textboxPasswordGen.BackColor = 'White'
	$maskedtextboxpassword.ForeColor = 'Black'
	$maskedtextboxpassword.BackColor = 'White'
	$textboxConfirmPassword.BackColor = 'White'
	$textboxConfirmPassword.ForeColor = 'Black'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Standard'
	$comboboxDomains.ForeColor = 'Black'
	$comboboxDomains.BackColor = "Window"
	
	$comboboxOUTree.FlatStyle = 'Standard'
	$comboboxOUTree.ForeColor = 'Black'
	$comboboxOUTree.BackColor = "Window"
	
	$panel2.ForeColor = 'Black'
	$Panel2.BackColor = "MenuBar"
	
	$datetimepickerDATE.ForeColor = 'Black'
	$datetimepickerDATE.CalendarMonthBackground = "White"
	
	$datetimepickerTIME.ForeColor = 'Black'
	$datetimepickerTIME.BackColor = "White"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "White"
	
	$groupboxaccountexpires.ForeColor = 'Black'
	$labelUserLogonNameUPN.ForeColor = 'FireBrick'
	$labelUserLogonNamepreWind.ForeColor = 'Black'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'Black'
	$checkedlistboxGroups.BackColor = "White"
	$textboxPOSIX.ForeColor = 'Black'
	$textboxPOSIX.BackColor = "White"
	
	$textboxSearchGroups.ForeColor = 'Black'
	$textboxSearchGroups.BackColor = "White"
	
	$comboboxPrimaryGroup.FlatStyle = 'Standard'
	$comboboxPrimaryGroup.ForeColor = 'Black'
	$comboboxPrimaryGroup.BackColor = "Window"
	
	$groupboxPrimaryGroup.ForeColor = 'Black'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'Black'
	$groupboxHomeFolder.ForeColor = 'Black'
	$comboboxDriveLetter.FlatStyle = 'Standard'
	$comboboxDriveLetter.ForeColor = 'Black'
	$comboboxDriveLetter.BackColor = "Window"
	$textboxhomedirectory.ForeColor = 'Black'
	$textboxhomedirectory.BackColor = "White"
	$textboxprofilepath.ForeColor = 'Black'
	$textboxprofilepath.BackColor = "White"
	$textboxlogonscript.ForeColor = 'Black'
	$textboxlogonscript.BackColor = "White"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "White"
	$tabcontrolO365.ForeColor = 'Black'
	$textboxADSyncServer.ForeColor = 'Black'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365userpassword.ForeColor = 'FireBrick'
	$labelO365userconfirmpassword.ForeColor = 'FireBrick'
	$labelO365DisplayName.ForeColor = 'FireBrick'
	$tabpageO365General.BackColor = "White"
	$groupboxADSync.ForeColor = 'Black'
	$textboxADSyncServer.BackColor = "White"
	$groupboxNoAdSync.ForeColor = 'Black'
	$comboboxO365Licenses.FlatStyle = 'Standard'
	$comboboxO365Licenses.BackColor = "Window"
	$comboboxO365Licenses.ForeColor = 'Black'
	$panel3.ForeColor = 'Black'
	$panel3.BackColor = "MenuBar"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$textboxo365passwordgen.BackColor = "White"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'Black'
	$tabpageO365Account.BackColor = "White"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'FireBrick'
	$panel4.ForeColor = 'Black'
	$panel4.BackColor = "MenuBar"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.BackColor = "White"
	$tabpageO365Address.ForeColor = 'Black'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'Black'
	$tabpageO365Groups.BackColor = "White"
	$labelO365Groups.ForeColor = 'Black'
	$labelO365Groups.BackColor = "White"
	$checkedlistboxDISTROo365groups.ForeColor = 'Black'
	$checkedlistboxDISTROo365groups.BackColor = "White"
	$labelSearch.ForeColor = 'Black'
	$textboxO365MailGroups.ForeColor = 'Black'
	$textboxO365MailGroups.BackColor = "White"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'Black'
	$labelSecurityGroups.BackColor = "White"
	$checkedlistboxO365SecurityGroups.ForeColor = 'Black'
	$checkedlistboxO365SecurityGroups.BackColor = "White"
	$labelSearchGroups2.ForeColor = 'Black'
	$labelSearchGroups2.BackColor = "White"
	$textboxSearchO365SecurityGroups.ForeColor = 'Black'
	$textboxSearchO365SecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.ForeColor = 'Black'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'Black'
	$labelsharedmailboxes.BackColor = "White"
	$tabpageo365shared.ForeColor = 'Black'
	$tabpageo365shared.BackColor = "White"
	$groupboxSettingsSharedMailbox.ForeColor = 'Black'
	$groupboxSettingsSharedMailbox.BackColor = "White"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'Black'
	$checkedlistboxsharedmailboxes.BackColor = "White"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "Black"
	$tabpageO365Attributes.BackColor = "White"
	$comboboxO365HidefromGAL.FlatStyle = 'Standard'
	$comboboxO365HidefromGAL.ForeColor = 'Black'
	$comboboxO365HidefromGAL.BackColor = "Window"
	
	
	$comboboxOWA.FlatStyle = 'Standard'
	$comboboxOWA.ForeColor = 'Black'
	$comboboxOWA.BackColor = "Window"
	
	$comboboxActiveSync.FlatStyle = 'Standard'
	$comboboxActiveSync.ForeColor = 'Black'
	$comboboxActiveSync.BackColor = "Window"
	
}

function Copy-ADUserAttributes
{
	Add-Logs -text "LOG: Setting Description"
	$textboxDescription.Text = $UserTemplate.Description
	Add-Logs -text "LOG: Setting Office"
	$textboxoffice.Text = $UserTemplate.Office
	Add-Logs -text "LOG: Setting Office Phone"
	$textboxTelephone.Text = $UserTemplate.OfficePhone
	Add-Logs -text "LOG: Setting Email Address"
	$textboxEmail.Text = $UserTemplate.EmailAddress
	Add-Logs -text "LOG: Setting Home Page"
	$textboxWebPage.Text = $UserTemplate.HomePage
	
	Add-Logs -text "LOG: Changing the OU for the user to $((($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)")))"
	$comboboxOUTree.SelectedItem = (($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)"))
	
	Add-Logs -text "LOG: Checking Password Never Expires status"
	If ($UserTemplate.PasswordNeverExpires -eq $true)
	{
		Add-Logs -text "LOG: Setting Password Never Expires to True"
		$checkboxPasswordNeverExpires.CheckState = 'Checked'
	}
	Else
	{
		Add-Logs -text "LOG: Setting Password Never Expires to False"
		$checkboxPasswordNeverExpires.CheckState = 'UnChecked'
	}
	
	Add-Logs -text "LOG: Checking Password Change Ability"
	If ($UserTemplate.CannotChangePassword -eq $True)
	{
		Add-Logs -text "LOG: Setting User Cannot Change Password to True"
		$checkboxUserCannotChangePass.CheckState -eq 'Checked'
	}
	Else
	{
		Add-Logs -text "LOG: Setting User Cannot Change Password to False"
		$checkboxUserCannotChangePass.CheckState -eq 'UnChecked'
	}
	
	Add-Logs -text "LOG: Checking Password Change statue"
	If ($UserTemplate.PasswordExpired -eq $True)
	{
		Add-Logs -text "LOG: Setting User Must Change Password to True"
		$checkboxUserMustChangePasswo.CheckState -eq 'Checked'
	}
	Else
	{
		Add-Logs -text "LOG: Setting User Must Change Password to False"
		$checkboxUserMustChangePasswo.CheckState -eq 'UnChecked'
	}
	Add-Logs -text "LOG: Setting Street Address"
	$textboxStreet.Text = $UserTemplate.StreetAddress
	Add-Logs -text "LOG: Setting PO Box"
	$textboxPOBox.Text = $UserTemplate.POBox
	Add-Logs -text "LOG: Setting City"
	$textboxcity.Text = $UserTemplate.City
	Add-Logs -text "LOG: Setting State"
	$textboxstate.Text = $UserTemplate.State
	Add-Logs -text "LOG: Setting Postal Code"
	$textboxzipcode.Text = $UserTemplate.PostalCode
	Add-Logs -text "LOG: Checking Group Memberships"
	$checkedlistboxGroups.CheckedItems = $null
	$CacheGroups = "$env:TEMP\MUCCacheGroups.txt"
	$click = 1
	($UserTemplate).MemberOf | ForEach-Object {
		$GName = (Get-ADGroup $_).name
		Add-Logs -text "LOG: Adding User to the Group: $GName"
		
		$GName | Out-File $CacheGroups -Append -Force -ErrorAction SilentlyContinue
		$checkedlistboxGroups.SelectedItem = $GName
		$index = $checkedlistboxGroups.SelectedIndex
		$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
	}
	$click = 0
	Add-Logs -text "LOG: Setting Job Title"
	$textboxjobtitle.text = $UserTemplate.Title
	Add-Logs -text "LOG: Setting Department"
	$textboxDepartment.Text = $UserTemplate.Department
	Add-Logs -text "LOG: Setting Company"
	$textboxCompany.Text = $UserTemplate.Company
	Add-Logs -text "LOG: Setting Profile Path"
	$textboxprofilepath.Text = $UserTemplate.ProfilePath
	Add-Logs -text "LOG: Setting Script Path"
	$textboxlogonscript.Text = $UserTemplate.ScriptPath
	Add-Logs -text "LOG: Setting Home Drive"
	$comboboxDriveLetter.SelectedItem = $UserTemplate.HomeDrive
	Add-Logs -text "LOG: Setting Home Directory"
	$textboxhomedirectory.Text = $UserTemplate.HomeDirectory
	Add-Logs -text "LOG: Setting Employee Type"
	$textboxemployeeType.Text = $UserTemplate.EmployeeType
	
	Add-Logs -text "LOG: Done"
	
	
}

function Copy-O365UserAttributes
{
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force | Out-Null
	
	If ($Licenses2Add.count -gt 0)
	{
		$Global:Licenses2Add = New-Object 'System.Collections.Generic.List[System.Object]'
	}
	
	$CopyUser = $CopyFromO365User_comboboxcopyuser
	add-logs -text "LOG: Copying attributes from $CopyUser"
	
	$UserObj = (Get-Msoluser -All | Where-Object { $_.DisplayName -eq $CopyUser }) | Select-Object -First 1
	
	add-logs -text "LOG: Getting the UPN Domain of $CopyUser"
	$UPNDomain = ($UserObj.userprincipalname).split('@') | Select-Object -Last 1
	add-logs -text "LOG: Setting the UPN Domain to $UPNDomain"
	$comboboxO365Domains.SelectedItem = "@"+$UPNDomain
	
	add-logs -text "LOG: Copying Country Code"
	$comboboxO365countrycode.SelectedText = ($UserObj).CountryCode
	add-logs -text "LOG: Checking MFA status of $CopyUser"
	If ($null -eq $UserObj.StrongAuthenticationRequirements.State)
	{
		add-logs -text "LOG: Setting MFA to False"
		$comboboxMFA.SelectedItem = "False"
	}
	Else
	{
		add-logs -text "LOG: Setting MFA to True"
		$comboboxMFA.SelectedItem = "True"
	}
	add-logs -text "LOG: Copying City"
	$textboxo365city.Text = ($UserObj).city
	add-logs -text "LOG: Copying State"
	$textboxo365state.Text = ($UserObj).state
	add-logs -text "LOG: Copying Street Address"
	$textboxO365street.Text = ($UserObj).streetaddress
	add-logs -text "LOG: Copying Postal Code"
	$textboxo365zip.Text = ($UserObj).postalcode
	
	If (($UserObj).PasswordNeverExpires -eq $true)
	{
		add-logs -text "LOG: Copying Password Never Expires Flag"
		$checkboxO365PasswordNeverExpires.CheckState = 'Checked'
	}
	
	If (($UserObj).BlockCredential -eq $True)
	{
		add-logs -text "LOG: Copying Disabled Account State"
		$checkboxBlockCred.CheckState = 'Checked'
	}
	

	
	add-logs -text "LOG: Getting all licenses assinged to $CopyUser"
	$currentlicenses = ($UserObj).Licenses.accountskuid
	foreach ($currentlicense in $currentlicenses)
	{
		$TenantSku = Get-MSOLAccountSku | Where-Object { $_.AccountSkuID -match $currentlicense }
		
		If ($TenantSku.ActiveUnits -ne $TenantSku.ConsumedUnits)
		{
			$lic = $currentlicense -split ":" | Select-Object -Last 1
			#lookup skus in hashtable and convert to friendly name
			$FriendlyName = $Sku.Item("$Lic")
			If ($null -eq $FriendlyName)
			{
				add-logs -text "LOG: Copying The License: $_"
				$obj = [PSCustomObject]@{
					'Name' = $lic
				}
				$Licenses2Add.Add($obj)
			}
			Else
			{
				add-logs -text "LOG: Copying The License: $FriendlyName"
				$obj = [PSCustomObject]@{
					'Name' = $FriendlyName
				}
				
				$Licenses2Add.Add($obj)
				
			}
		}
	}
	
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	Toogle-LicenseStatus
	
	add-logs -text "LOG: Checking Mail Group Membership for $CopyUser"
	Get-MsolGroup -All | Where-Object { ($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") } | ForEach-Object {
		If (Get-MsolGroupMember -All -GroupObjectId $_.ObjectID | Where-Object { $_.EmailAddress -contains ($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:")})
		{
				If ($checkedlistboxDISTROo365groups.Items -contains $_.DisplayName)
				{
					$_.DisplayName | Out-File $CacheDistroGroupsFile -Append -Force -ErrorAction SilentlyContinue
					add-logs -text "LOG: Adding User to the Distribution Group: $($_.DisplayName)"
					$checkedlistboxDISTROo365groups.SelectedItem = $($_.DisplayName)
					$index = $checkedlistboxDISTROo365groups.SelectedIndex
					$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
				}
			}
		
		
	}
	Add-Logs -text "LOG: Getting all Security Groups $CopyUser is a Member of"
	Get-MsolGroup -All | Where-Object { $_.GroupType -eq "Security" } | ForEach-Object {
		If (Get-MsolGroupMember -All -GroupObjectId $_.ObjectID | Where-Object { $_.EmailAddress -contains ($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:") })
		{
				If ($checkedlistboxO365SecurityGroups.Items -contains $_.DisplayName)
				{
					$_.DisplayName | Out-File $CacheSecurityGroupsFile -Append -Force -ErrorAction SilentlyContinue
				add-logs -text "LOG: Adding User to the Security Group: $($_.DisplayName)"
					$checkedlistboxO365SecurityGroups.SelectedItem = $($_.DisplayName)
					$index = $checkedlistboxO365SecurityGroups.SelectedIndex
					$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
				}
			}
			
			
		}
	
	
	
	$UserObjMailbox = Get-Mailbox (($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:"))
	Add-Logs -text "LOG: Gettings GAL status for User"
	If ($UserObjMailbox.HiddenFromAddressListsEnabled -eq $true)
	{
		Add-Logs -text "LOG: Hiding User from GAL: True"
		$comboboxO365HidefromGAL.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "LOG: Hiding User from GAL: False"
		$comboboxO365HidefromGAL.SelectedItem = "False"
	}
	
	Add-Logs -text "LOG: Getting Outlook on the Web (OWA) Status for user"
	If (((Get-CASMailbox (($UserObjMailbox).GUID).Guid).OWAEnabled) -eq $True)
	{
		Add-Logs -text "LOG: Outlook on the Web (OWA): True"
		$comboboxOWA.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "LOG: Outlook on the Web (OWA): False"
		$comboboxOWA.SelectedItem = "False"
	}
	
	Add-Logs -text "LOG: Getting ActiveSync Status for user"
	If (((Get-CASMailbox (($UserObjMailbox).GUID).Guid).ActiveSync) -eq $True)
	{
		Add-Logs -text "LOG: ActiveSync: True"
		$comboboxActiveSync.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "LOG: ActiveSync: False"
		$comboboxActiveSync.SelectedItem = "False"
	}
	
	add-logs -text "LOG: Done"
	
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force | Out-Null
	
}

function License-MUCO365User
{
	$licenseforuser = @()
	#$Lookup = @()
	Add-Logs -text "LOG: Getting License selected for user"
	$Licenses = $Licenses2Add
	Add-Logs "LOG: We will be adding the licenses, $Licenses2Add"
	Add-Logs -text "LOG: Getting AccountSKU Domain"
	$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
	foreach ($License in $licenses)
	{
		Add-Logs -text "LOG: Looking up SKU for license"
		$Lookup = $Sku.keys | Where-Object { $Sku["$_"] -eq "$license" }
		Add-Logs "LOG: License lookup is $Lookup"
		If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
		{
			Add-Logs -text "LOG: No SKU found during lookup"
			$BackSKU = "$LicenseDomain$License"
			Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
			$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
			If ($CheckSku -ne $Null)
			{
				Add-Logs -text "LOG: Assigning $BackSKU to User"
				$licenseforuser += $CheckSku
			}
			Else
			{
				Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
				$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
				Add-Logs -text "WARN: Assigning $ReLic to user instead"
				$licenseforuser += (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
			}
		}
		
		Else
		{
			Add-Logs -text "LOG: Found the SKU for the license"
			$Lookup | ForEach-Object {
				Add-Logs -text "LOG: Checking License $_"
				$BackSKU = "$LicenseDomain$_"
				Add-Logs -text "LOG: Looking up $BackSKU in tenant"
				Add-Logs -text "LOG: Verifying $BackSKU in tenant"
				$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
				If ($CheckSku -ne $Null)
				{
					Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
					$licenseforuser += $CheckSku
				}
				Else
				{
					Add-Logs -text "WARN: $BackSKU was not found in tenant"
				}
			}
		}
		Add-Logs "LOG: OUTPUTTING $licenseforuser"
		$licenseforuser | Out-File "$env:TEMP\MUClicenseforuser.txt" -Force
		
	}
}

function New-MUCUser
{
		
	add-logs -text 'LOG: Converting password to SecureString'
	add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
	$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
	#Get disable account boolean
	add-logs -text 'LOG: Checking if account is disabled or enabled'
	$disabledaccount = ($checkboxAccountIsDisabled.checked)
	#If account should be disabled
	If ($disabledaccount -eq $true)
	{
		add-logs -text 'LOG: Account is disabled'
		add-logs -text 'LOG: Creating user'
		Try
		{
			New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
		}
		Catch
		{
			add-logs -text "WARN: $_"
			$InfoMessage = $_
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		$User = Get-ADUser -Filter * -Properties * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
		add-logs -text "LOG: User has been created"
		
		#Check if Account is set to expire at a specific time
		Add-Logs -text "LOG: Checking if User account expiration is set"
		If ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text "LOG: User account expiration is set"
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			Add-Logs -text "LOG: Done"
		}
		Else
		{
			Add-Logs -text "LOG: User account expiration not set"
		}
		
		$Proxys = @()
		add-logs -text "LOG: Getting user proxy addresses to set"
		$Proxys += $textboxproxyaddress.Lines
		If ($Proxys -ne $Null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text "LOG: Adding proxy addresses"
				add-logs -text "LOG: Getting user proxy addresses to set"
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
			}
		}
		Else
		{
			add-logs -text "LOG: No proxys were found to add"
		}
		add-logs -text "LOG: Done with Proxys"
		
		
		
		add-logs -text "LOG: Getting user employeeType attribute to set"
		If ($textboxemployeeType.text -ne "")
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
		}
		Else
		{
			add-logs -text "LOG: No employeeType to add"
		}
		add-logs -text "LOG: Done with employeeType"
		
		add-logs -text "LOG: Getting user employeeNumber attribute to set"
		If ($textboxemployeenumber.text -ne "")
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			Set-ADUser $User -EmployeeNumber $textboxemployeenumber.text 
		}
		Else
		{
			add-logs -text "LOG: No employeeNumber to add"
		}
		add-logs -text "LOG: Done with employeeNumber"
		
		add-logs -text "LOG: Getting user employeeID attribute to set"
		If ($textboxEmployeeID.Text -ne "")
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			Set-ADUser $User -EmployeeID $textboxEmployeeID.text
		}
		Else
		{
			add-logs -text "LOG: No employeeID to add"
		}
		add-logs -text "LOG: Done with employeeID"
		
		#Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		$groups = $checkedlistboxGroups.CheckedItems
		If ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $Group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
				Add-ADGroupMember -Identity $Group -Members $User
			}
		}
		Else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text "LOG: Done"
		
		Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
		If ($comboboxPrimaryGroup.Text -eq "Domain Users")
		{
			Add-Logs -text "LOG: Primary Group set to Domain Users"
		}
		Else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
		}
		Add-Logs -text "LOG: Done"
		
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		If ($comboboxOUTree.SelectedItem -ne $null)
		{
			
			add-logs -text 'LOG: Specific OU specified, moving user'
			$CanocicalName = $comboboxOUTree.SelectedItem
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$User | Move-ADObject -TargetPath $OUTOMove
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
	Else
	{
		add-logs -text 'LOG: Account is enabled'
		add-logs -text 'LOG: Creating user'
		Try
		{
			New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
		}
		Catch
		{
			add-logs -text "WARN: $_"
			$InfoMessage = $_
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		$User = Get-ADUser -Filter * -Properties * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
		add-logs -text "LOG: User has been created"
		
		#Check if Account is set to expire at a specific time
		Add-Logs -text "LOG: Checking if User account expiration is set"
		If ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text "LOG: User account expiration is set"
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			Add-Logs -text "LOG: Done"
		}
		Else
		{
			Add-Logs -text "LOG: User account expiration not set"
		}
		
		$Proxys = @()
		add-logs -text "LOG: Getting user proxy addresses to set"
		$Proxys += $textboxproxyaddress.Lines
		If ($Proxys -ne $Null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text "LOG: Adding proxy addresses"
				add-logs -text "LOG: Getting user proxy addresses to set"
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
			}
		}
		Else
		{
			add-logs -text "LOG: No proxys were found to add"
		}
		add-logs -text "LOG: Done with Proxys"
		
		add-logs -text "LOG: Getting user employeeType attribute to set"
		If ($textboxemployeeType.text -ne "")
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
		}
		Else
		{
			add-logs -text "LOG: No employeeType to add"
		}
		add-logs -text "LOG: Done with employeeType"
		
		add-logs -text "LOG: Getting user employeeNumber attribute to set"
		If ($textboxemployeenumber.text -ne "")
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			Set-ADUser $User -EmployeeNumber $textboxemployeenumber.text
		}
		Else
		{
			add-logs -text "LOG: No employeeNumber to add"
		}
		add-logs -text "LOG: Done with employeeNumber"
		
		add-logs -text "LOG: Getting user employeeID attribute to set"
		If ($textboxEmployeeID.Text -ne "")
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			Set-ADUser $User -EmployeeID $textboxEmployeeID.text
		}
		Else
		{
			add-logs -text "LOG: No employeeID to add"
		}
		add-logs -text "LOG: Done with employeeID"
		
		#Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		$groups = $checkedlistboxGroups.CheckedItems
		If ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $Group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
				Add-ADGroupMember -Identity $Group -Members $User
			}
		}
		Else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text "LOG: Done"
		
		Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
		If ($comboboxPrimaryGroup.Text -eq "Domain Users")
		{
			Add-Logs -text "LOG: Primary Group set to Domain Users"
		}
		Else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
		}
		Add-Logs -text "LOG: Done"
		
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		If ($comboboxOUTree.SelectedItem -ne $null)
		{
			
			add-logs -text 'LOG: Specific OU specified, moving user'
			$CanocicalName = $comboboxOUTree.SelectedItem
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$User | Move-ADObject -TargetPath $OUTOMove
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
}

function New-MUCO365User
{
	add-logs -text 'LOG: Checking DirSync option'
	#If DirSync is enabled
	If ($checkboxRunADSync.CheckState -eq 'Checked')
	{
		If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$SyncServer = $textboxADSyncServer.text
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text "LOG: Running DirSync on $SyncServer"
			add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
			Try
			{
				Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text "WARN: ADSync Server text box is empty"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
		}
	}
	#If DirSync is not enabled
	Else
	{
		add-logs -text "LOG: User is not being AD-Synced"
		
		add-logs -text 'LOG: All required parameters are valid'
		
		#Check to see if the user is being enabled upon creation or disabled
		
		#User is going to be disabled
		add-logs -text 'LOG: Checking enabled status of user'
		If ($checkboxBlockCred.Checked -eq $true)
		{
			#If user is going to be disabled
			add-logs -text 'LOG: User is Disabled'
			add-logs -text 'LOG: Creating user'
			If (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
			{
				add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
				$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				If ($Licenses2Add -ne $null)
				{
					License-MUCO365User
				}
				Try
				{
					add-logs -text 'LOG: Creating User'
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Adding Licenses'
					$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
					$licenseforuser | ForEach-Object {
						Add-Logs -text "LOG: Adding $_"
						
						Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
					}
					Add-Logs -text 'LOG: Done'
					
				}
				Catch
				{
					add-logs -text "WARN: $_"
					$InfoMessage = $_
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				
				#Find if user should be added to any Security groups
				add-logs -text 'LOG: Getting checked Security groups'
				$groups = $checkedlistboxO365SecurityGroups.CheckedItems
				If ($groups -ne $null)
				{
					add-logs -text 'LOG: Security Groups found'
					$DN = ($User).DisplayName
					foreach ($group in $groups)
					{
						add-logs -text "LOG: Adding $DN to $Group"
						$GroupGuid = ((get-msolgroup -All | where-object { $_.displayname -eq $Group }).ObjectID).GUID
						$UserGUID = (($User).ObjectID).GUID
						add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
						Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
					}
				}
				Else
				{
					add-logs -text 'LOG: No Security Groups checked'
				}
				Add-Logs -text 'LOG: Done with Security Groups'
				
				#Check user licenses, if licensed create and wait for mailbox
				Add-Logs -text 'LOG: Checking if license was applied to the user'
				If ($Licenses2Add -ne $Null)
				{
					Add-Logs -text 'LOG: License is applied to the new user'
					
					$ts = New-TimeSpan -Minutes 8
					
					$TermLoop = ((get-date) + $ts).ToString("HH:mm")
					Do
					{
						$DateNow = (Get-date).ToString("HH:mm")
						Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 20 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 10 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
						Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
					}
					Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
					
					add-logs -text 'LOG: Checking E-Mail address field for entered data'
					If ($textboxO365EmailAddress.Text -like "*@*")
					{
						add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
						If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
						{
							add-logs -text 'LOG: Email is different from UPN, proceeding.'
							
							Try
							{
								$PrimEmail = $textboxO365EmailAddress.Text
								add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
								Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
								add-logs -text "LOG: Done"
							}
							Catch
							{
								add-logs -text "WARN: $_"
								Add-Type -AssemblyName System.Windows.Forms
								[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
							}
						}
						Else
						{
							add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
						}
						
					}
					Else
					{
						add-logs -text "LOG: No E-Mail entered"
					}
					
					#Add any email aliases
					add-logs -text 'LOG: Checking Alias Addresses field for entered data'
					If ($textboxo365proxyaddresses.Text -ne $null)
					{
						add-logs -text 'LOG: Found Alias Addresses to add'
						$Proxys = $textboxo365proxyaddresses.Lines
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						$DN = $Mailbox.DisplayName
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding $Proxy for $DN"
							Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
							add-logs -text 'LOG: Done'
						}
					}
					Else
					{
						add-logs -text 'LOG: No Alias Addresses found'
					}
					add-logs -text 'LOG: Done with Alias Addresses'
					
					#Find if user should be added to any mail groups
					add-logs -text 'LOG: Getting checked mail groups'
					$groups = $checkedlistboxDISTROo365groups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Mail Groups found'
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
							If ((Get-UnifiedGroup).displayName -contains $group)
							{
								Add-Logs -text "LOG: $group is an Office 365 group"
								Add-Logs -text "LOG: Adding $DN to $Group"
								Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
								Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
								Add-Logs -text "LOG: Done"
							}
							Else
							{
								Add-Logs -text "LOG: $group is not an Office 365 group"
								
								add-logs -text "LOG: Adding $DN to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
					}
					Else
					{
						add-logs -text 'LOG: No Mail Groups checked'
					}
					Add-Logs -text 'LOG: Done with Mail Groups'
					
					#Shared Mailboxes
					Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
					$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
					#If there are shared mailboxes to add the user to (full access rights)
					If ($SharedMailboxes -ne $null)
					{
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								$Automap = $comboboxsharedmailboxautomap.Text
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
								If ($Automap -eq "False")
								{
									Add-Logs -text "LOG: AutoMapping set to False"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
								}
								Else
								{
									Add-Logs -text "LOG: AutoMapping set to True"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
						}
						ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
								Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
								Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
								Add-Logs -text "LOG: Done"
							}
							
						}
						Else
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
								Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
								Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
								Add-Logs -text 'LOG: Done'
							}
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No Shared Mailboxes selected'
					}
					Add-Logs -text 'LOG: Done with Shared Mailboxes'
					
					Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
					#Hide from GAL
					If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
					{
						Add-Logs -text 'LOG: Hide from global address list is set to True'
						Add-Logs -text 'LOG: Hiding mailbox from global address list'
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						If ($null -ne $mailbox)
						{
							Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
						}
						Else
						{
							Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
							$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
					}
					Else
					{
						Add-Logs -text 'LOG: Hide from global address list is set to False'
					}
				}
				Else
				{
					Add-Logs -text 'LOG: No license is being added for the new user'
					Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
					Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
					Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
				}
				
				#If MFA is set to TRUE then enable MFA for the user
				Add-Logs -text 'LOG: Checking MFA status for the user'
				If ($comboboxMFA.Selecteditem -eq "True")
				{
					$UserMFA = ($User).UserPrincipalName
					Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
					Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
					$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
					Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
					$Auth.RelyingParty = "*"
					Add-Logs -text 'CMD: $MFA = @($Auth)'
					$MFA = @($Auth)
					Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
					Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
					Add-Logs -text 'LOG: Done'
				}
				Else
				{
					Add-Logs -text 'LOG: MFA is set to False'
				}
				Add-Logs -text 'LOG: Done'
				
				Add-Logs -text 'LOG: Checking OWA'
				If ($comboboxOWA.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: OWA Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
					Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
				}
				Else
				{
					Add-Logs -text 'LOG: OWA Enabled'
					
				}
				
				Add-Logs -text 'LOG: Checking ActiveSync'
				If ($comboboxActiveSync.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: ActiveSync Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false'
					Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false
				}
				Else
				{
					Add-Logs -text 'LOG: ActiveSync Enabled'
					
				}
				
				Add-Logs -text 'LOG: Done'
				
			}
		}
		Else
		{
			#User is going to be enabled upon creation
			add-logs -text 'LOG: User is Enabled'
			add-logs -text 'LOG: Creating user'
			If (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
			{
				add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
				$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				If ($Licenses2Add -ne $null)
				{
					License-MUCO365User
				}
				Try
				{
					add-logs -text 'LOG: Creating User'
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Adding Licenses'
					$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
					$licenseforuser | ForEach-Object {
						Add-Logs -text "LOG: Adding $_"
						
						Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
					}
					Add-Logs -text 'LOG: Done'
				}
				Catch
				{
					add-logs -text "WARN: $_"
					$InfoMessage = $_
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				#Find if user should be added to any Security groups
				add-logs -text 'LOG: Getting checked Security groups'
				$groups = $checkedlistboxO365SecurityGroups.CheckedItems
				If ($groups -ne $null)
				{
					add-logs -text 'LOG: Security Groups found'
					$DN = ($User).DisplayName
					foreach ($group in $groups)
					{
						add-logs -text "LOG: Adding $DN to $Group"
						$GroupGuid = ((get-msolgroup -All | where-object { $_.displayname -eq $Group }).ObjectID).GUID
						$UserGUID = (($User).ObjectID).GUID
						add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
						Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
					}
				}
				Else
				{
					add-logs -text 'LOG: No Security Groups checked'
				}
				Add-Logs -text 'LOG: Done with Security Groups'
				
				#Check user licenses, if licensed create and wait for mailbox
				Add-Logs -text 'LOG: Checking if license was applied to the user'
				If ($Licenses2Add -ne $Null)
				{
					Add-Logs -text 'LOG: License is applied to the new user'
					
					$ts = New-TimeSpan -Minutes 8
					
					$TermLoop = ((get-date) + $ts).ToString("HH:mm")
					Do
					{
						$DateNow = (Get-date).ToString("HH:mm")
						Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 20 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 10 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
						Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
					}
					Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
					
					add-logs -text 'LOG: Checking E-Mail address field for entered data'
					If ($textboxO365EmailAddress.Text -like "*@*")
					{
						add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
						If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
						{
							add-logs -text 'LOG: Email is different from UPN, proceeding.'
							
							Try
							{
								$PrimEmail = $textboxO365EmailAddress.Text
								add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
								Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
								add-logs -text "LOG: Done"
							}
							Catch
							{
								add-logs -text "WARN: $_"
								Add-Type -AssemblyName System.Windows.Forms
								[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
							}
						}
						Else
						{
							add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
						}
						
					}
					Else
					{
						add-logs -text "LOG: No E-Mail entered"
					}
					
					#Add any email aliases
					add-logs -text 'LOG: Checking Alias Addresses field for entered data'
					If ($textboxo365proxyaddresses.Text -ne $null)
					{
						add-logs -text 'LOG: Found Alias Addresses to add'
						$Proxys = $textboxo365proxyaddresses.Lines
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						$DN = $Mailbox.DisplayName
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding $Proxy for $DN"
							Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
							add-logs -text 'LOG: Done'
						}
					}
					Else
					{
						add-logs -text 'LOG: No Alias Addresses found'
					}
					add-logs -text 'LOG: Done with Alias Addresses'
					
					#Find if user should be added to any mail groups
					add-logs -text 'LOG: Getting checked mail groups'
					$groups = $checkedlistboxDISTROo365groups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Mail Groups found'
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
							If ((Get-UnifiedGroup).displayName -contains $group)
							{
								Add-Logs -text "LOG: $group is an Office 365 group"
								Add-Logs -text "LOG: Adding $DN to $Group"
								Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
								Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
								Add-Logs -text "LOG: Done"
							}
							Else
							{
								Add-Logs -text "LOG: $group is not an Office 365 group"
								
								add-logs -text "LOG: Adding $DN to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
					}
					Else
					{
						add-logs -text 'LOG: No Mail Groups checked'
					}
					Add-Logs -text 'LOG: Done with Mail Groups'
					
					#Shared Mailboxes
					Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
					$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
					#If there are shared mailboxes to add the user to (full access rights)
					If ($SharedMailboxes -ne $null)
					{
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								$Automap = $comboboxsharedmailboxautomap.Text
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
								If ($Automap -eq "False")
								{
									Add-Logs -text "LOG: AutoMapping set to False"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
								}
								Else
								{
									Add-Logs -text "LOG: AutoMapping set to True"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
						}
						ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
								Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
								Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
								Add-Logs -text "LOG: Done"
							}
							
						}
						Else
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
								Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
								Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
								Add-Logs -text 'LOG: Done'
							}
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No Shared Mailboxes selected'
					}
					Add-Logs -text 'LOG: Done with Shared Mailboxes'
					
					Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
					#Hide from GAL
					If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
					{
						Add-Logs -text 'LOG: Hide from global address list is set to True'
						Add-Logs -text 'LOG: Hiding mailbox from global address list'
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						If ($null -ne $mailbox)
						{
							Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
						}
						Else
						{
							Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
							$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
					}
					Else
					{
						Add-Logs -text 'LOG: Hide from global address list is set to False'
					}
				}
				Else
				{
					Add-Logs -text 'LOG: No license is being added for the new user'
					Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
					Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
					Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
				}
				
				#If MFA is set to TRUE then enable MFA for the user
				Add-Logs -text 'LOG: Checking MFA status for the user'
				If ($comboboxMFA.Selecteditem -eq "True")
				{
					$UserMFA = ($User).UserPrincipalName
					Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
					Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
					$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
					Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
					$Auth.RelyingParty = "*"
					Add-Logs -text 'CMD: $MFA = @($Auth)'
					$MFA = @($Auth)
					Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
					Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
					Add-Logs -text 'LOG: Done'
				}
				Else
				{
					Add-Logs -text 'LOG: MFA is set to False'
				}
				Add-Logs -text 'LOG: Done'
				
				Add-Logs -text 'LOG: Checking OWA'
				If ($comboboxOWA.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: OWA Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
					Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
				}
				Else
				{
					Add-Logs -text 'LOG: OWA Enabled'
					
				}
				
				Add-Logs -text 'LOG: Checking ActiveSync'
				If ($comboboxActiveSync.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: ActiveSync Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false'
					Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false
				}
				Else
				{
					Add-Logs -text 'LOG: ActiveSync Enabled'
					
				}
				
				Add-Logs -text 'LOG: Done'
			}
		}
	}
}

function Update-O365DisplayNameTextBox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365DisplayName -ErrorAction SilentlyContinue).UserFormatO365DisplayName
		#Create an array that we will use for formatting
		$O365DisplayNameFormatString = @()
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%Firstname% %LastName%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatO365DisplayName -Value "%FirstName% %LastName%" -Force | Out-Null
		}
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$O365DisplayNameFormatString += $textboxO365FirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$O365DisplayNameFormatString += $textboxO365LastName.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$O365DisplayNameFormatString += $space
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$O365DisplayNameFormatString += $textboxUserLogonName.text
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$O365DisplayNameFormatString += $textboxO365EmailAddress.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$O365DisplayNameFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$O365DisplayNameFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "UserPrincipalNameDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			ElseIf ($_ -eq "UPNDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			Else
			{
				$O365DisplayNameFormatString += $_
			}
			$textboxO365DisplayName.Text = [String]::Join('', $O365DisplayNameFormatString)
		}
		
	}
}

function Update-O365EmailTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365Email -ErrorAction SilentlyContinue).UserFormatO365Email
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%FirstLetterFirstName%%LastName%%UserPrincipalNameDomain%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatO365Email -Value $config -Force | Out-Null
		}
		#Create an array that we will use for formatting
		$O365EmailFormatString = @()
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$O365EmailFormatString += $textboxO365FirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$O365EmailFormatString += $textboxO365LastName.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$O365EmailFormatString += $space
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$O365EmailFormatString += $textboxUserLogonName.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$O365EmailFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$O365EmailFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "UserPrincipalNameDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			ElseIf ($_ -eq "UPNDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			Else
			{
				$O365EmailFormatString += $_
			}
			$textboxO365EmailAddress.Text = [String]::Join('', $O365EmailFormatString)
		}
		
	}
}

function Update-O365UserPrincipalNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365UserPrincipalName -ErrorAction SilentlyContinue).UserFormatO365UserPrincipalName
		#Create an array that we will use for formatting
		$O365UserPrincipalNameFormatString = @()
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365FirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365LastName.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$O365UserPrincipalNameFormatString += $space
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$O365UserPrincipalNameFormatString += $textboxO365EmailAddress.text
			}
			Else
			{
				$O365UserPrincipalNameFormatString += $_
			}
			$textboxO365UPN.Text = [String]::Join('', $O365UserPrincipalNameFormatString)
		}
		
	}
}

#endregion

$MainForm_Load = {
	

	
	$MFALogin = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name MFALogin -ErrorAction SilentlyContinue).MFALogin
	If ($MFALogin -eq 1)
	{
		$radiobuttonMFALogin.Checked = $true
	}
	Else
	{
		$radiobuttonNonMFALogin.Checked = $true
	}
	

	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		#Set-LightMode
		
	}
	
	
}

$MainForm_DuringShow = {
	
	Import-Module ActiveDirectory -ErrorAction SilentlyContinue
	Import-Module ADSync -ErrorAction SilentlyContinue
	
	#DEBUG
	#$tabcontrolUserProperties.Enabled = $true
	#$groupboxNoAdSync.Enabled = $true
	
	$copyActiveDirectoryUserToolStripMenuItem.Enabled = $false
	$copyOffice365UserToolStripMenuItem.Enabled = $false
	
	$textboxADSyncServer.Enabled = $false
	
	$datetimepickerDATE.Refresh()
	
	$radiobuttonNever.Checked = $true
	$datetimepickerDATE.Enabled = $false
	$datetimepickerTIME.Enabled = $false
	
	$datetimepickerTIME.Text = "05:00 PM"
	
	$MainForm.MaximizeBox = $false
	
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1
	#DEBUG
	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $false

	#Disable the Office 365 license drop down until we connect to MSOnline
	#$comboboxO365Licenses.Enabled = $False
	$comboboxO365Licenses.Text = "Please connect to Office 365 to assign a license"
	
	#DEBUG
	$tabcontrolUserProperties.Enabled = $false
	
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	
	$comboboxO365HidefromGAL.SelectedItem = "False"
	
	$labelTimeLeft.Text = ""
	
	$global:ExternalLog = "$env:TEMP\MUC.txt"
	$labelLogFile.Text = $global:ExternalLog
	
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items "Domain Users"
	$comboboxPrimaryGroup.SelectedItem = "Domain Users"
	
	$AlwaysADCreate = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysADCreate -ErrorAction SilentlyContinue).AlwaysADCreate
	If ($AlwaysADCreate -eq 1)
	{
		$checkboxCreateAnActiveDirect.Checked = $true
	}
	
	$AlwaysO365Create = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysO365Create -ErrorAction SilentlyContinue).AlwaysO365Create
	If ($AlwaysO365Create -eq 1)
	{
		$checkboxconfigo365user.Checked = $true
	}
	
	$comboboxActiveSync.SelectedItem = "True"
}

$resetFormToolStripMenuItem_Click = {
	Reset-Form
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateAnActiveDirect.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		Try
		{
			New-MUCUser
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		Try
		{
			New-MUCO365User
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
		
		#### ACTIVE DIRECTORY USER CREATION PORTION ####
		
		add-logs -text 'LOG: Only an Active Directory user is being created'
		Try
		{
			New-MUCUser
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
		
		
		#### OFFICE 365 USER CREATION PORTION ####
		
		
		add-logs -text 'LOG: Only an Office 365 User is being created'
		Try
		{
			New-MUCO365User
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
	
	$ResetForm = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ResetForm -ErrorAction SilentlyContinue).ResetForm
	If ($ResetForm -eq 1)
	{
		Reset-Form
	}
}


$textboxDisplayName_TextChanged = {
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'White'
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'Black'
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'Firebrick'
		}
		
	}
	
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxDisplayName_ChangeFocus = {
	$ADDisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDisplayName -ErrorAction SilentlyContinue).ADDisplayName
	If ($ADDisplayName -eq 1)
	{
		$words = $textboxDisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxLastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxLastName_ChangeFocus = {
	$ADLastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADLastName -ErrorAction SilentlyContinue).ADLastName
	If ($ADLastName -eq 1)
	{
		$words = $textboxLastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxLastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxFirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
	
	
		
	
}

$textboxFirstName_ChangeFocus = {
	$ADFirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADFirstName -ErrorAction SilentlyContinue).ADFirstName
	If ($ADFirstName -eq 1)
	{
		$words = $textboxFirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxFirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxInitials_ChangeFocus = {
	$ADInitials = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADInitials -ErrorAction SilentlyContinue).ADInitials
	If ($ADInitials -eq 1)
	{
		$words = $textboxInitials.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxInitials.Text = $TextInfo.ToTitleCase($words)
	}
}


$buttonGeneratePassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword
		$textboxPasswordGen.Text = $Password
		$maskedtextboxpassword.Text = $Password
		$textboxConfirmPassword.text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxpassword.Text = $textboxPasswordGen.Text
		$textboxConfirmPassword.text = $textboxPasswordGen.Text
	}
	
}

$textboxConfirmPassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'White'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Black'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Firebrick'
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}

			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateAnActiveDirect.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = $textboxUserLogonName.text
		$comboboxO365Domains.SelectedItem = $comboboxDomains.SelectedItem
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'White'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Black'
		}
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Firebrick'
		}
		
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonNonMFALogin.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: $((Get-ChildItem -Path $($env:LOCALAPPDATA+"\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse ).FullName|?{$_ -notmatch "_none_"}|select -First 1)'
		$Modules = $((Get-ChildItem -Path $($env:LOCALAPPDATA + "\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse).FullName | Where-Object{ $_ -notmatch "_none_" } | Select-Object -First 1)
		If ($Modules -eq $Null)
		{
			add-logs -text 'WARN: MFA Module was not found'
			$InfoMessage = "Exchange Online MFA Module was not found, please make sure you have downloaded and installed it from your tenant https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/mfa-connect-to-exchange-online-powershell?view=exchange-ps"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		$EXOSession = New-ExoPSSession
		Import-PSSession $EXOSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		$copyOffice365UserToolStripMenuItem.Enabled = $true
		
		add-logs -text 'LOG: Connected to Office 365!'
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'MediumSeaGreen'
		}
		Else
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'Green'
		}
		
		
		$Global:O365_Pre_Req++
		#Create just an AD User
		If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD nad O365 User (w/ ADSync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD And O365 User (no Sync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 User no adsync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 user with ADSync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$buttonConnectToOffice365.ForeColor = 'White'
		}
		Else
		{
			$buttonConnectToOffice365.ForeColor = 'Black'
		}
		
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		#add-logs -text 'LOG: Enabling Licenses combobox'
		#add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		#$comboboxO365Licenses.Enabled = $True
		#add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = ""
		
		#Cache licenses to use in other forms
		$LicenseArray | Out-File "$env:TEMP\MUCLicenses.txt" -Force -ErrorAction SilentlyContinue
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		#add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		#Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = "Click to select an Office 365 license"

		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup -All | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$MailGroups = (Get-MsolGroup -All | Where-Object { ($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataMailGroups = $MailGroups
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $MailGroups
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup -All | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$SecurityGroups = (Get-MsolGroup -All | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataSecurityGroups = $SecurityGroups
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $SecurityGroups
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		$comboboxO365HidefromGAL.SelectedItem = "False"
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword -O365
		$textboxo365passwordgen.Text = $Password
		$maskedtextboxo365password.Text = $Password
		$textboxo365confirmpassword.Text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
		$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
		add-logs -text 'LOG: Done'
	}

	
	
}


$checkboxRunADSync_CheckedChanged = {
	If ($checkboxRunADSync.Checked -eq $True)
	{
		$groupboxNoAdSync.Enabled = $false
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
		
		$textboxADSyncServer.Enabled = $true
		
	}
	elseif ($checkboxRunADSync.Checked -eq $false)
	{
		$groupboxNoAdSync.Enabled = $True
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
		
		$textboxADSyncServer.Enabled = $false
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$buttonExit_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged = {
	If ((($textboxO365LastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	Else
	{
		Update-O365EmailTextbox
		Update-O365DisplayNameTextBox
		Update-O365UserPrincipalNameTextbox
	}
}
$textboxO365LastName_FocusChanged = {
	$O365LastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365LastName -ErrorAction SilentlyContinue).O365LastName
	If ($O365LastName -eq 1)
	{
		$words = $textboxO365LastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365LastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365FirstName_TextChanged = {
	If ((($textboxO365FirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	Else
	{
		Update-O365EmailTextbox
		Update-O365DisplayNameTextBox
		Update-O365UserPrincipalNameTextbox
	}
	
}

$textboxO365FirstName_FocusChanged = {
	$O365FirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365FirstName -ErrorAction SilentlyContinue).O365FirstName
	If ($O365FirstName -eq 1)
	{
		$words = $textboxO365FirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365FirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365Initials_TextChanged = {
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged = {
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
	If ($Global:ExternalLog -ne $null)
	{
		$console.Text | Out-File $Global:ExternalLog
	}
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	if ($checkboxconfigo365user.CheckState -eq 'checked')
	{
		$tabpageOffice365.Enabled = $true
	}
	Else
	{
		$tabpageOffice365.Enabled = $false
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		If ($null -ne (Get-Module -ListAvailable -Name "ADSync"))
		{
			add-logs -text 'LOG: DirSync found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			$groupboxNoAdSync.Enabled = $true
			$comboboxOWA.SelectedItem = "True"
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Enabling ADSync CheckBox'
		$checkboxRunADSync.Enabled = $True
		add-logs -text 'LOG: Enabling No ADSync Groupbox'
		$groupboxNoAdSync.Enabled = $true
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateAnActiveDirect_CheckedChanged = {
	
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateAnActiveDirect.Checked -eq $true))
	{
		If ($Null -ne (Get-Module -ListAvailable -Name "ActiveDirectory"))
		{
			add-logs -text 'LOG: Enabling AD User creation'
			$tabcontrolUserProperties.Enabled = $true
			add-logs -text 'LOG: Done'
			
			Add-Logs -text "Enabling Copy AD User Menu Item"
			$copyActiveDirectoryUserToolStripMenuItem.Enabled = $true
			add-logs -text 'LOG: Done'
			
			
			add-logs -text 'LOG: Loading Organizational Unit Tree'
			add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
			$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName
			If ($null -eq $OUTree)
			{
				$InfoMessage = 'Could not load Organizational Unit structure'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxOUTree.Enabled = $false
			}
			Else
			{
				add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
				Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
				add-logs -text 'LOG: Done'
				$comboboxOUTree.Enabled = $true
			}
			
			add-logs -text 'LOG: Getting Active Directory Groups'
			add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
			$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
			$Global:OriginalData = $Groups
			If ($null -eq $Groups)
			{
				add-logs -text 'WARN: No Active Directory Groups were found'
				$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
				Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting NetBIOS Name'
			add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
			$Netbiosname = (Get-ADDomain).NetBIOSName
			If ($null -eq $Netbiosname)
			{
				add-logs -text 'WARN: No NetBIOS Name was found'
				$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$textboxUPNDomain.Text = "Not Available"
			}
			Else
			{
				$textboxUPNDomain.Text = $Netbiosname + "\"
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting UPN Suffixes'
			add-logs -text 'CMD: $Forest = Get-ADForest'
			$Forest = Get-ADForest
			If ($null -eq $Forest)
			{
				add-logs -text 'WARN: No Active Directory Forest was found'
				$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxDomains.Enabled = $false
			}
			Else
			{
				$comboboxDomains.Enabled = $true
				$UPNs = @()
				add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
				$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
				If ($extraUPNs -ne $Null)
				{
					foreach ($extraUPN in $extraUPNs)
					{
						$UPNs += "@" + $extraUPN
					}
				}
				add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
				$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
				Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
			}
			add-logs -text 'LOG: Done'
			
			$comboboxDomains.SelectedIndex = 0
		}
		Else
		{
			$InfoMessage = "Could not locate the ActiveDirectory module on $env:COMPUTERNAME. This module is required to create an Active Directory user"
			$InfoTitle = "Error"
			Show-MessageBox_psf
			$checkboxCreateAnActiveDirect.CheckState = 'Unchecked'
		}
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	
	Update-SamAccountNameTextbox
	Update-DisplayNameTextbox
	Update-EmailTextbox
	
	$textboxSamAccount.Text = $textboxUserLogonName.Text
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'White'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Black'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Firebrick'
		}
		
	}
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxUserLogonName_FocusChanged = {
	$ADUPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADUPN -ErrorAction SilentlyContinue).ADUPN
	If ($ADUPN -eq 1)
	{
		$words = $textboxUserLogonName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxUserLogonName.Text = $TextInfo.ToTitleCase($words)
	}
}




$maskedtextboxpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'White'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'LightCoral'
			
		}
		
	}
	Else
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'Black'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'Firebrick'
			
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}



$linklabelBradleyWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHub_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'White'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'LightCoral'
		}
	}
	Else
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'Black'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'Firebrick'
		}
	}
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365DisplayName_FocusChanged = {
	$O365DisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365DisplayName -ErrorAction SilentlyContinue).O365DisplayName
	If ($O365DisplayName -eq 1)
	{
		$words = $textboxO365DisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365DisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365UPN_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		Update-O365EmailTextbox
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'White'
		}
		Else
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Black'
		}
		
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Firebrick'
		}
		
		
	}
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_FocusChanged = {
	$O365UPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365UPN -ErrorAction SilentlyContinue).O365UPN
	If ($O365UPN -eq 1)
	{
		$words = $textboxO365UPN.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365UPN.Text = $TextInfo.ToTitleCase($words)
	}
}


$maskedtextboxo365password_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'White'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'lightcoral'
		}
	}
	Else
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'Black'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'Firebrick'
		}
	}
	
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}

$comboboxO365Licnses_Click = {
	Show-O365LicenseSelection_psf
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	Toogle-LicenseStatus
}





$comboboxO365countrycode_SelectedIndexChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
		}
		
	}
	Else
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'White'
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
		
	}
	
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'LightCoral'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'LightCoral'
	}
	Else
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'Firebrick'
	}
	
	
}



$saveLogAsToolStripMenuItem_Click = {
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged = {
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}




$versionToolStripMenuItem_Click = {
	$InfoMessage = "
Version Number: $Version
Build Date: $Builddate
Author: Bradley Wyatt
"
	$InfoTitle = "Build Information"
	Show-MessageBox_psf
	
}


$changelogToolStripMenuItem_Click = {
	Show-ChangeLog_psf
	
}

$labelChangelog_Click = {
	Show-ChangeLog_psf
	
}

$externalLogFileToolStripMenuItem_Click = {
	# Class Details:  https://msdn.microsoft.com/en-us/library/system.windows.forms.savefiledialog(v=vs.110).aspx 
	$SaveFileDialog = New-Object windows.forms.savefiledialog
	$SaveFileDialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$SaveFileDialog.title = "Log File Location"
	#$SaveFileDialog.filter = "All files (*.*)| *.*"   
	#$SaveFileDialog.filter = "PublishSettings Files|*.publishsettings|All Files|*.*" 
	$SaveFileDialog.filter = "Log Text File|*.txt"
	$SaveFileDialog.ShowHelp = $True
	$result = $SaveFileDialog.ShowDialog()
	$result
	$Global:ExternalLog = $SaveFileDialog.filename
	Write-Host $result
	If ($result -eq "Ok")
	{
		
		$labelLogFile.Text = $global:ExternalLog
		
	}
}


$radiobuttonExpireOn_CheckedChanged = {
	#Enable the Date Date / Time picker
	$datetimepickerDATE.Enabled = $true
	#Enable the Time date/time picker
	$datetimepickerTIME.Enabled = $true
	
}

$radiobuttonNever_CheckedChanged = {
	#Disable the Date Date/Time picker
	$datetimepickerDATE.Enabled = $false
	#Disable the Time Date/Time picker
	$datetimepickerTIME.Enabled = $false
	
}

$datetimepickerDATE_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$datetimepickerTIME_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$checkedlistboxGroups_SelectedIndexChanged = {

	If ($click -ne 1)
	{
		$CachedCheckedGroups = Get-Content $CacheGroups -ErrorAction SilentlyContinue
		
		$checkedlistboxGroups.CheckedItems | ForEach-Object{
			#If checked and not in file, add and append
			$CheckItem = Get-Content $CacheGroups | Select-String $_
			If ($null -eq $CheckItem)
			{				
				$_ | Out-File $CacheGroups -Force -Append
			}
		}
		
		$CachedCheckedGroups = Get-Content $CacheGroups -ErrorAction SilentlyContinue
		
		
		#Get all unchecked items
		$UncheckedItems = $checkedlistboxGroups.Items | Where-Object { $checkedlistboxGroups.CheckedItems -notcontains $_ }
		
		#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
		Compare-Object -ReferenceObject $CachedCheckedGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
			# == means that the obj is unchecked but present on the file, we need to remove from file
			If ($_.SideIndicator -eq "==")
			{
				#Remove the item that is present on the list but unchecked from the file
				$Info = $CachedCheckedGroups | select-string -pattern $_.InputObject -notmatch
				$InfoMessage = $Info
				$Info | Out-File $CacheGroups -Force -ErrorAction SilentlyContinue
			}
		}
	}
	
	
	$Items = @()
	$Items += $checkedlistboxGroups.CheckedItems
	$Items += "Domain Users"
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items $Items
	
	
}





$optionsToolStripMenuItem_Click = {
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
}

$textboxDescription_FocusChanged = {
	$ADDescription = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription
	If ($ADDescription -eq 1)
	{
		$words = $textboxDescription.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDescription.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxoffice_FocusChanged = {
	$ADOffice = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADOffice -eq 1)
	{
		$words = $textboxoffice.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxoffice.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxSamAccount_FocusChanged = {
	$ADSamAccountName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADSamAccountName -ErrorAction SilentlyContinue).ADSamAccountName
	If ($ADSamAccountName -eq 1)
	{
		$words = $textboxSamAccount.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxSamAccount.Text = $TextInfo.ToTitleCase($words)
	}
	
}



$textboxStreet_FocusChanged = {
	$ADStreet = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADStreet -ErrorAction SilentlyContinue).ADStreet
	If ($ADStreet -eq 1)
	{
		$words = $textboxstreet.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstreet.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxcity_FocusChanged = {
	$ADCity = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCity -ErrorAction SilentlyContinue).ADCity
	If ($ADCity -eq 1)
	{
		$words = $textboxcity.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxcity.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxstate_FocusChanged = {
	$ADState = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState
	If ($ADState -eq 1)
	{
		$words = $textboxstate.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstate.Text = $TextInfo.ToTitleCase($words)
	}
	
	
}

$textboxjobtitle_FocusChanged = {
	$ADJobTitle = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADJobTitle -ErrorAction SilentlyContinue).ADJobTitle
	If ($ADJobTitle -eq 1)
	{
		$words = $textboxjobtitle.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxjobtitle.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxDepartment_FocusChanged = {
	$ADDepartment = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment
	If ($ADDepartment -eq 1)
	{
		$words = $textboxDepartment.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDepartment.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxCompany_FocusChanged = {
	$ADCompany = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany
	If ($ADCompany -eq 1)
	{
		$words = $textboxCompany.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxCompany.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxSearchGroups_TextChanged = {
	
	$click = 1
	$Filter = $textboxSearchGroups.text
	$Results = $OriginalData | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxGroups -Items $Results
	
	Get-Content $CacheGroups -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxGroups.Items -contains $_)
		{
			$checkedlistboxGroups.SelectedItem = $_
			$index = $checkedlistboxGroups.SelectedIndex
			$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchGroups.Focus()
	
}


$textboxSearchO365SecurityGroups_TextChanged = {
	$click = 1
	
	
	$Filter = $textboxSearchO365SecurityGroups.text
	$Results = $OriginalDataSecurityGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $Results
	
	Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxO365SecurityGroups.Items -contains $_)
		{
			$checkedlistboxO365SecurityGroups.SelectedItem = $_
			$index = $checkedlistboxO365SecurityGroups.SelectedIndex
			$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchO365SecurityGroups.Focus()
	
}

$textboxO365MailGroups_TextChanged={
	
	$click = 1
	$Filter = $textboxO365MailGroups.text
	$Results = $OriginalDataMailGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $Results
	
	Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxDISTROo365groups.Items -contains $_)
		{
			$checkedlistboxDISTROo365groups.SelectedItem = $_
			$index = $checkedlistboxDISTROo365groups.SelectedIndex
			$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxO365MailGroups.Focus()
	
	
	
	
}

$textboxO365street_FocusChanged={
	$O365Street = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365Street -ErrorAction SilentlyContinue).O365Street
	If ($O365Street -eq 1)
	{
		$words = $textboxO365street.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365street.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxo365city_FocusChanged={
	$O365City = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City
	If ($O365City -eq 1)
	{
		$words = $textboxo365city.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365city.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxo365state_FocusChanged={
	$O365State = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State
	If ($O365State -eq 1)
	{
		$words = $textboxo365state.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365state.Text = $TextInfo.ToTitleCase($words)
	}
	
}


$textboxemployeenumber_TextChanged={
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
}

$textboxEmployeeID_TextChanged={
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
}

$textboxEmail_TextChanged={
	
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
}

$copyActiveDirectoryUserToolStripMenuItem_Click={
	
	#Set value to 1 so we dont have string settings get in the way
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 1 -Force | Out-Null
	Show-CopyFromUser_psf
	$CopyUser = $CopyFromUser_comboboxcopyuser
	$Job = $PSJob
	$UserJob = ($Job | Where-Object { $_.Name -like $CopyUser })[0]
	$UserTemplate = Get-ADUser -identity ($UserJob).ObjectGuid -properties *
	Copy-ADUserAttributes
	#Set back to 0
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 0 -Force | Out-Null
	Get-Job | Remove-Job
	
}

$textboxSamAccount_TextChanged={
	Update-EmailTextbox
	Update-DisplayNameTextbox
	Update-UserPrincipalNameTextbox
}
$textboxSamAccount_FocusChanged = {
	#Update-EmailTextbox
	Update-DisplayNameTextbox
	#Update-UserPrincipalNameTextbox
}


$clearFormToolStripMenuItem_Click={
	Reset-Form
	
}


$exitToolStripMenuItem1_Click={
	$MainForm.close()
	
}

$copyToolStripMenuItem_Click={
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
	
}

$checkedlistboxDISTROo365groups_SelectedIndexChanged = {
	$CopyO365User = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyO365User -ErrorAction SilentlyContinue).CopyO365User
	If ($CopyO365User -ne 1)
	{
		If ($click -ne 1)
		{
			$CachedCheckedDistroGroups = Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue
			
			$checkedlistboxDISTROo365groups.CheckedItems | ForEach-Object{
				#If checked and not in file, add and append
				$CheckItem = Get-Content $CacheDistroGroupsFile | Select-String $_
				If ($null -eq $CheckItem)
				{
					$_ | Out-File $CacheDistroGroupsFile -Force -Append
				}
			}
			
			$CachedCheckedDistroGroups = Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue
			
			
			#Get all unchecked items
			$UncheckedItems = $checkedlistboxDISTROo365groups.Items | Where-Object { $checkedlistboxDISTROo365groups.CheckedItems -notcontains $_ }
			
			#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
			Compare-Object -ReferenceObject $CachedCheckedDistroGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
				# == means that the obj is unchecked but present on the file, we need to remove from file
				If ($_.SideIndicator -eq "==")
				{
					#Remove the item that is present on the list but unchecked from the file
					$Info = $CachedCheckedDistroGroups | select-string -pattern $_.InputObject -notmatch
					$InfoMessage = $Info
					$Info | Out-File $CacheDistroGroupsFile -Force -ErrorAction SilentlyContinue
				}
			}
		}
	}
	
}

$checkedlistboxO365SecurityGroups_SelectedIndexChanged = {
	$CopyO365User = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyO365User -ErrorAction SilentlyContinue).CopyO365User
	If ($CopyO365User -ne 1)
	{
		If ($click -ne 1)
		{
			$CachedCheckedSecurityGroups = Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue
			
			$checkedlistboxO365SecurityGroups.CheckedItems | ForEach-Object{
				#If checked and not in file, add and append
				$CheckItem = Get-Content $CacheSecurityGroupsFile | Select-String $_
				If ($null -eq $CheckItem)
				{
					$_ | Out-File $CacheSecurityGroupsFile -Force -Append
				}
			}
			
			$CachedCheckedSecurityGroups = Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue
			
			
			#Get all unchecked items
			$UncheckedItems = $checkedlistboxO365SecurityGroups.Items | Where-Object { $checkedlistboxO365SecurityGroups.CheckedItems -notcontains $_ }
			
			#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
			Compare-Object -ReferenceObject $CachedCheckedSecurityGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
				# == means that the obj is unchecked but present on the file, we need to remove from file
				If ($_.SideIndicator -eq "==")
				{
					#Remove the item that is present on the list but unchecked from the file
					$Info = $CachedCheckedSecurityGroups | select-string -pattern $_.InputObject -notmatch
					$InfoMessage = $Info
					$Info | Out-File $CacheSecurityGroupsFile -Force -ErrorAction SilentlyContinue
				}
			}
		}
	}
	
}

$checkboxUserMustChangePasswo_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
	
}

$checkboxUserCannotChangePass_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both 'User Must Change Password at Next Logon' and User 'Cannot Change Password' for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
		
	}
	
	
}

$checkboxPasswordNeverExpires_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
	
}


$copyOffice365UserToolStripMenuItem_Click={
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force | Out-Null
	Show-CopyFromO365User_psf
	Copy-O365UserAttributes
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force | Out-Null
	
}

$MainForm_Closing=[System.Windows.Forms.FormClosingEventHandler]{
Get-PSSession | Remove-PSSession -ErrorAction SilentlyContinue
	
}



$comboboxO365Domains_SelectedIndexChanged={
	Update-O365EmailTextbox
}


$comboboxDomains_SelectedIndexChanged={
	Update-EmailTextbox
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>