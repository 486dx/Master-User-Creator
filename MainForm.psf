<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
AAghRN1QAFQKBYAQQtQNBUClUAAIIUTdUABUCgWAEELUDQVApVAACCFE3VAAVAoFgBBC1A0FQKVQ
AAghRN1QAFQKBYAQQtQNBUClUAAIIUTdUABUCgWAEELUDQVApVAACCFE3VAAVAoFgBBC1A0FQKVQ
AAghRN1QAFQKBYAQQtQNBUClUAAIIUTdUABUCgWAEELUDQVApVAACCFE3VAAVAoFgBBC1A0FQKVQ
AAghRN1QAFQKBYAQQtQNBUClUAAIIUTdUABUCgWAEELUDQVApVAACCFE3VAAVAoFgBBC1A0FQKVQ
AAghRN1QAFQKBYAQQtQNBUClUAAIIUTdUABUCgWAEELUDQVApVAACCFE3VAAVAoFgBBC1A0FQKVQ
AAghRN1QAFQKBYAQQtQNBUClUAAIIUTdUABUCgWAEELUDQVApVAACCFE3VAAVAoFgBBC1A0FQKVQ
AAghRN1QAFQKBYAQQtQNBUClUAAIIUTdUABUCgWAEELUDQVApVAACCFE3VAAVAoFgBBC1A0FQKVQ
AAghRN1QAFQKBYAQQtQNBUClUAAIIUTdUABUCgWAEELUDQVApVAACCFE3VAAVAoFgBBC1A0FQKVQ
AAghRN1QAFQKBYAQQtQNBUClUAAIIUTdUABUCgWAEELUDQVApVAACCFE3VAAVAoFgBBC1A0FQKVQ
AAghRN1QAFQKBYAQQtQNBUClUAAIIUTdUABUCgWAEELUDQVApVAACCFE3VAAVAoFgBBC1A0FQKVQ
AAghRN1QAFQKBYAQQtQNBUClUAAIIUTdUABUCgWAEELUDQVApVAACCFE3VAAVAoFgBBC1A0FQKVQ
AAghRN1QAFQKBYAQQtQNBUClUAAIIUTdUABUCgWAEELUDQVApVAACCFE3VAAVAoFgBBC1A0FQKVQ
AAghRN1QAFQKBYAQQtQNBUClUAAIIUTdUABUCgWAEELUDQVApVAACCFE3VAAVAoFgBBC1A0FQKVQ
AAghRN1QAFQKBYAQQtQNBUClUAAIIUTdUABUCgWAEELUDQVApVAACCFE3VAAVAoFgBBC1A0FQKVQ
AAghRN1QAFQKBYAQQtQNBUClUAAIIUTdUABUCgWAEELUDQVApVAACCFE3VAAVAoFgBBC1A0FQKVQ
AAghRN1QAFQKBYAQQtQNBUClUAAIIUTdUABUCgWAEELUDQVApVAACCFE3VAAVAoFgBBC1A0FQKVQ
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</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Toogle-LicenseStatus
{
	If ($null -eq $Licenses2Add)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
#If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
#If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($Licenses2Add.Count -ge 1))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($Licenses2Add.Count -ge 1))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Get-DictionaryPassword
{
	param
	(
		
		[switch]$O365
	)
	$Dictionary = @(
		"Honda";
		"Staple";
		"Battery";
		"Civic";
		"Chicago";
		"Winter";
		"Cubs";
		"Bears";
		"Snow";
		"Train";
		"Shoes";
		"Blue";
		"Bike";
		"Ring";
		"Watch";
		"Computer";
		"Neck";
		"Laptop";
		"Monitor";
		"Toilet";
		"Baseball";
		"Football";
		"Soccer";
		"Phone";
		"Carbondale";
		"Saluki";
		"Swim";
		"Lake";
		"Puppy";
		"Watch";
		"Royals";
		"Basketball";
		"Letter";
		"Paper";
		"Sticker";
		"Kitten";
		"Marker";
		"Highway";
		"Wire";
		"Keyboard";
		"Frisbee";
		"Disc";
		"Hawk";
		"West";
		"North";
		"East";
		"South";
		"Water";
		"Ice";
		"Dirt";
		"Taco";
		"Mouse";
		"Deer";
		"Speaker";
		"Hand";
		"Green";
		"Purple";
		"Pink";
		"Boat";
		"Toilet";
		"Sting";
		"Fish";
		"Bee";
		"White";
		"Grey";
		"Shoes";
		"Carpet";
		"Bed";
		"Pillow";
		"Sears";
		"Mustard";
		"Relish";
		"Ketchup";
		"Milk";
		"Apple";
		"Orange";
		"Flower";
		"Lotion";
		"Plane";
		"Desert";
		"Sand";
		"Beach";
		"Clouds";
		"Wagon";
		"Hair";
		"Internet";
		"Track";
		"Golf";
		"Sledding";
		"Market";
		"Window";
		"Door";
		"Deck";
		"Cards";
		"Shelf";
		"Santa";
		"Tack";
		"Building";
		"Tennis";
		"Power";
		"Sox";
		"Wrigley";
		"Tea";
		"Juice";
		"Plant";
		"Geneva";
		"City";
		"Kansas";
		"Missouri";
		"Midwest";
		"Great";
		"Box";
		"Crane";
		"Michigan";
		"Illinois";
		"Garbage";
		"Cougars";
		"Route";
		"Bridge";
		"Mountain";
		"Message";
		"Fire";
		"Taxi";
		"Bus";
		"Color";
		"Sharpie";
		"Ball";
		"Square";
		"River";
		"Navy";
		"Pier";
		"Grant";
		"Park";
		"Lincoln";
		"President";
		"Wrigley";
		"Soldier";
		"Forest";
		"Bulldog";
		"Police";
		"Taco";
		"Deep";
		"Dish";
		"Pizza";
		"Fire";
		"Ice";
		"Lion";
		"World";
		"Shoe";
		"Ant";
		"Bug";
		"Hair";
		"Beard";
		"Light";
		"Wave";
		"Field";
		"Toll";
		"Tax";
		"Money";
		"Bill";
		"Pot";
		"Pan"
	)
	If ($O365 -eq $True)
	{
		$word1 = (Get-Random $Dictionary)
		$Num = Get-random -Maximum 99 -Minimum 0
		$WChar = @(
			"!"
			"@"
			"$"
			"%"
			"&"
			"?"
			"#"
		)
		$Wildchar = Get-random $WChar
		
		$Word1 + "-" + $Num + $WildChar
	}
	Else
	{
		$word1 = (Get-Random $Dictionary)
		
		$word2 = (Get-Random $Dictionary | Where-Object { $_ -ne $word1 })
		
		$Word3 = (Get-Random $Dictionary | Where-Object { ($_ -ne $word1) -and ($_ -ne $word2) })
		
		$Num = Get-random -Maximum 99 -Minimum 0
		
		$Word1 + "-" + $word2 + "-" + $word3 + $Num
	}
	
	
}

function Reset-Form
{
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	$comboboxOUTree.SelectedText = ""
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	$textboxEmployeeID.Text = ""
	$textboxemployeenumber.Text = ""
	$textboxemployeeType.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunADSync.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	$comboboxMFA.SelectedItem = "False"
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""
	$textboxo365city.Text = ""
	$textboxo365state.Text = ""
	$textboxo365zip.Text = ""
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

function Update-DisplayNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatDisplayName -ErrorAction SilentlyContinue).UserFormatDisplayName
		#Create an array that we will use for formatting
		$DisplayNameFormatString = @()
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%Firstname% %LastName%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatDisplayName -Value "%FirstName% %LastName%" -Force | Out-Null
		}
		
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text
			}
			ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
			{
				$DisplayNameFormatString += $textboxInitials.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$DisplayNameFormatString += $space
			}
			ElseIf ($_ -eq "EmployeeID")
			{
				$DisplayNameFormatString += $textboxEmployeeID.text
			}
			ElseIf ($_ -eq "EmployeeNumber")
			{
				$DisplayNameFormatString += $textboxemployeenumber.text
			}
			ELseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.text
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$DisplayNameFormatString += $textboxUserLogonName.text
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$DisplayNameFormatString += $textboxEmail.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.Text
			}
			Else
			{
				$DisplayNameFormatString += $_
			}
			
			$textboxDisplayName.Text = [String]::Join('', $DisplayNameFormatString)
			
		}
		
		
	}
}

function Update-EmailTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatEmail -ErrorAction SilentlyContinue).UserFormatEmail
		#Create an array that we will use for formatting
		$EmailFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$EmailFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$EmailFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$EmailFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$EmailFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$EmailFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$EmailFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$EmailFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$EmailFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$EmailFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$EmailFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$EmailFormatString += $_
				}
				
			}
			$textboxEmail.Text = [String]::Join('', $EmailFormatString)
		}
	}
}

function Update-SamAccountNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatSamAccountName -ErrorAction SilentlyContinue).UserFormatSamAccountName
		#Create an array that we will use for formatting
		$SamAccountNameFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$SamAccountNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$SamAccountNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$SamAccountNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$SamAccountNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$SamAccountNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$SamAccountNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$SamAccountNameFormatString += $_
				}
				
			}
			$textboxSamAccount.Text = [String]::Join('', $SamAccountNameFormatString)
		}
	}
}

function Update-UserPrincipalNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatUserPrincipalName -ErrorAction SilentlyContinue).UserFormatUserPrincipalName
		#Create an array that we will use for formatting
		$UserPrincipalNameFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$UserPrincipalNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$UserPrincipalNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$UserPrincipalNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$UserPrincipalNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$UserPrincipalNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$UserPrincipalNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$UserPrincipalNameFormatString += $_
				}
				
			}
			$textboxUserLogonName.Text = [String]::Join('', $UserPrincipalNameFormatString)
		}
	}
}

function Set-DarkMode
{
	$labelCountryCode.ForeColor = 'White'
	$contextmenustrip1.BackColor = "44,44,44"
	$contextmenustrip1.ForeColor = 'White'
	$MainForm.BackColor = "44,44,44"
	$MainForm.ForeColor = 'White'
	
	$labelLogFile.BackColor = "44,44,44"
	$labelLogFile.ForeColor = 'White'
	
	$labelconnectionstatus.ForeColor = 'LightCoral'
	
	
	$richtextboxregistry.ForeColor = 'White'
	$richtextboxregistry.BackColor = "44,44,44"
	
	$groupboxStatus.ForeColor = 'White'
	
	
	$tabpageSettings.BackColor = "44,44,44"
	$tabpageSettings.ForeColor = 'White'
	$groupboxADGroups.ForeColor = 'White'
	
	$menustrip1.BackColor = "44,44,44"
	$menustrip1.ForeColor = 'White'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "44,44,44"
					$_.ForeColor = 'White'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'White'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "44,44,44"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'White'
	$copyOffice365UserToolStripMenuItem.BackColor = "44,44,44"
	
	
	$groupboxInformation.ForeColor = 'White'
	$linklabelBradWyatt.LinkColor = 'DeepSkyBlue'
	$linklabelGitHub.LinkColor = 'DeepSkyBlue'
	$labelChangelog.ForeColor = 'DeepSkyBlue'
	
	$console.BackColor = "35,35,35"
	$console.ForeColor = 'White'
	
	$buttonExit.ForeColor = "white"
	$buttonExit.BackColor = "35,35,35"
	
	$buttonCreateUser.ForeColor = "white"
	$buttonCreateUser.BackColor = "35,35,35"
	
	$groupboxADUser.ForeColor = 'White'
	$groupboxADUser.BackColor = "44,44,44"
	
	$groupbox2FA.ForeColor = 'White'
	$groupboxOffice365User.ForeColor = 'White'
	
	$tabcontrolUserProperties.ForeColor = 'White'
	$tabcontrolUserProperties.BackColor = "44,44,44"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
		

	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
	}
	
	#GENERAL PAGE
	$panel1.BackColor = "35,35,35"
	$labelDisplayName.ForeColor = 'LightCoral'
	$labelPassword.ForeColor = 'LightCoral'
	$labelConfirmPassword.ForeColor = 'LightCoral'

	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
				$_.BackColor = "35,35,35"
				$_.ForeColor = 'White'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'White'
	$buttonGeneratePassword.BackColor = '44,44,44'
	$buttonClear.ForeColor = 'White'
	$buttonClear.BackColor = '44,44,44'
	
	$textboxPasswordGen.ForeColor = 'White'
	$textboxPasswordGen.BackColor = '35,35,35'
	$maskedtextboxpassword.ForeColor = 'White'
	$maskedtextboxpassword.BackColor = '44,44,44'
	$textboxConfirmPassword.BackColor = '44,44,44'
	$textboxConfirmPassword.ForeColor = 'White'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Flat'
	$comboboxDomains.ForeColor = 'White'
	$comboboxDomains.BackColor = "35,35,35"
	
	$comboboxOUTree.FlatStyle = 'Flat'
	$comboboxOUTree.ForeColor = 'White'
	$comboboxOUTree.BackColor = "35,35,35"
	
	$panel2.ForeColor = 'White'
	$Panel2.BackColor = "35,35,35"
	
	$datetimepickerDATE.ForeColor = 'White'
	$datetimepickerDATE.CalendarMonthBackground = "35,35,35"
	
	$datetimepickerTIME.ForeColor = 'White'
	$datetimepickerTIME.BackColor = "35,35,35"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "44,44,44"
	
	$groupboxaccountexpires.ForeColor = 'White'
	$labelUserLogonNameUPN.ForeColor = 'LightCoral'
	$labelUserLogonNamepreWind.ForeColor = 'White'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'White'
	$checkedlistboxGroups.BackColor = "35,35,35"
	$textboxPOSIX.ForeColor = 'White'
	$textboxPOSIX.BackColor = "44,44,44"
	
	$textboxSearchGroups.ForeColor = 'White'
	$textboxSearchGroups.BackColor = "35,35,35"
	
	$comboboxPrimaryGroup.FlatStyle = 'Flat'
	$comboboxPrimaryGroup.ForeColor = 'White'
	$comboboxPrimaryGroup.BackColor = "35,35,35"
	
	$groupboxPrimaryGroup.ForeColor = 'White'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'White'
	$groupboxHomeFolder.ForeColor = 'White'
	$comboboxDriveLetter.FlatStyle = 'Flat'
	$comboboxDriveLetter.ForeColor = 'White'
	$comboboxDriveLetter.BackColor = "35,35,35"
	$textboxhomedirectory.ForeColor = 'White'
	$textboxhomedirectory.BackColor = "35,35,35"
	$textboxprofilepath.ForeColor = 'White'
	$textboxprofilepath.BackColor = "35,35,35"
	$textboxlogonscript.ForeColor = 'White'
	$textboxlogonscript.BackColor = "35,35,35"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "44,44,44"
	$tabcontrolO365.ForeColor = 'White'
	$textboxADSyncServer.ForeColor = 'White'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365userpassword.ForeColor = 'LightCoral'
	$labelO365userconfirmpassword.ForeColor = 'LightCoral'
	$labelO365DisplayName.ForeColor = 'LightCoral'
	$tabpageO365General.BackColor = "44,44,44"
	$groupboxADSync.ForeColor = 'White'
	$textboxADSyncServer.BackColor = "35,35,35"
	$groupboxNoAdSync.ForeColor = 'White'
	$comboboxO365Licenses.FlatStyle = 'Flat'
	$comboboxO365Licenses.BackColor = "35,35,35"
	$comboboxO365Licenses.ForeColor = 'White'
	$panel3.ForeColor = 'White'
	$panel3.BackColor = "35,35,35"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$textboxo365passwordgen.BackColor = "44,44,44"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Lightcoral'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'White'
	$tabpageO365Account.BackColor = "44,44,44"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'LightCoral'
	$panel4.ForeColor = 'White'
	$panel4.BackColor = "35,35,35"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{

			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.BackColor = "44,44,44"
	$tabpageO365Address.ForeColor = 'White'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'White'
	$tabpageO365Groups.BackColor = "44,44,44"
	$labelO365Groups.ForeColor = 'White'
	$labelO365Groups.BackColor = "44,44,44"
	$checkedlistboxDISTROo365groups.ForeColor = 'White'
	$checkedlistboxDISTROo365groups.BackColor = "35,35,35"
	$labelSearch.ForeColor = 'White'
	$textboxO365MailGroups.ForeColor = 'White'
	$textboxO365MailGroups.BackColor = "35,35,35"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'White'
	$labelSecurityGroups.BackColor = "44,44,44"
	$checkedlistboxO365SecurityGroups.ForeColor = 'White'
	$checkedlistboxO365SecurityGroups.BackColor = "35,35,35"
	$labelSearchGroups2.ForeColor = 'White'
	$labelSearchGroups2.BackColor = "44,44,44"
	$textboxSearchO365SecurityGroups.ForeColor = 'White'
	$textboxSearchO365SecurityGroups.BackColor = "35,35,35"
	$tabpagesecurityGroups.BackColor = "44,44,44"
	$tabpagesecurityGroups.ForeColor = 'White'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'White'
	$labelsharedmailboxes.BackColor = "44,44,44"
	$tabpageo365shared.ForeColor = 'White'
	$tabpageo365shared.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.ForeColor = 'White'
	$groupboxSettingsSharedMailbox.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'White'
	$checkedlistboxsharedmailboxes.BackColor = "35,35,35"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "White"
	$tabpageO365Attributes.BackColor = "44,44,44"
	$comboboxO365HidefromGAL.FlatStyle = 'Flat'
	$comboboxO365HidefromGAL.ForeColor = 'White'
	$comboboxO365HidefromGAL.BackColor = "35,35,35"
	
	
	
}

function Set-LightMode
{
	$labelCountryCode.ForeColor = 'Black'
	$contextmenustrip1.BackColor = "WhiteSmoke"
	$contextmenustrip1.ForeColor = 'Black'
	$MainForm.BackColor = "WhiteSmoke"
	$MainForm.ForeColor = 'Black'
	
	$labelLogFile.BackColor = "White"
	$labelLogFile.ForeColor = 'Black'
	
	$labelconnectionstatus.ForeColor = 'FireBrick'
	
	$richtextboxregistry.ForeColor = 'Black'
	$richtextboxregistry.BackColor = "White"
	
	$groupboxStatus.ForeColor = 'Black'
	
	
	$tabpageSettings.BackColor = "White"
	$tabpageSettings.ForeColor = 'Black'
	$groupboxADGroups.ForeColor = 'Black'
	
	$menustrip1.BackColor = "White"
	$menustrip1.ForeColor = 'Black'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "White"
					$_.ForeColor = 'Black'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'Black'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "White"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'Black'
	$copyOffice365UserToolStripMenuItem.BackColor = "White"
	
	
	$groupboxInformation.ForeColor = 'Black'
	$linklabelBradWyatt.LinkColor = '0, 0, 255'
	$linklabelGitHub.LinkColor = '0, 0, 255'
	$labelChangelog.ForeColor = '0, 0, 255'
	
	$console.BackColor = "White"
	$console.ForeColor = 'Black'
	
	$buttonExit.ForeColor = "Black"
	$buttonExit.BackColor = "White"
	
	$buttonCreateUser.ForeColor = "Black"
	$buttonCreateUser.BackColor = "White"
	
	$groupboxADUser.ForeColor = 'Black'
	$groupboxADUser.BackColor = "White"
	
	$groupbox2FA.ForeColor = 'Black'
	$groupboxOffice365User.ForeColor = 'Black'
	
	$tabcontrolUserProperties.ForeColor = 'Black'
	$tabcontrolUserProperties.BackColor = "White"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
		
		
	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
	}
	
	#GENERAL PAGE
	$panel1.BackColor = "MenuBar"
	$labelDisplayName.ForeColor = 'FireBrick'
	$labelPassword.ForeColor = 'FireBrick'
	$labelConfirmPassword.ForeColor = 'FireBrick'
	
	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'Black'
	$buttonGeneratePassword.BackColor = 'White'
	$buttonClear.ForeColor = 'Black'
	$buttonClear.BackColor = 'White'
	
	$textboxPasswordGen.ForeColor = 'Black'
	$textboxPasswordGen.BackColor = 'White'
	$maskedtextboxpassword.ForeColor = 'Black'
	$maskedtextboxpassword.BackColor = 'White'
	$textboxConfirmPassword.BackColor = 'White'
	$textboxConfirmPassword.ForeColor = 'Black'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Standard'
	$comboboxDomains.ForeColor = 'Black'
	$comboboxDomains.BackColor = "Window"
	
	$comboboxOUTree.FlatStyle = 'Standard'
	$comboboxOUTree.ForeColor = 'Black'
	$comboboxOUTree.BackColor = "Window"
	
	$panel2.ForeColor = 'Black'
	$Panel2.BackColor = "MenuBar"
	
	$datetimepickerDATE.ForeColor = 'Black'
	$datetimepickerDATE.CalendarMonthBackground = "White"
	
	$datetimepickerTIME.ForeColor = 'Black'
	$datetimepickerTIME.BackColor = "White"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "White"
	
	$groupboxaccountexpires.ForeColor = 'Black'
	$labelUserLogonNameUPN.ForeColor = 'FireBrick'
	$labelUserLogonNamepreWind.ForeColor = 'Black'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'Black'
	$checkedlistboxGroups.BackColor = "White"
	$textboxPOSIX.ForeColor = 'Black'
	$textboxPOSIX.BackColor = "White"
	
	$textboxSearchGroups.ForeColor = 'Black'
	$textboxSearchGroups.BackColor = "White"
	
	$comboboxPrimaryGroup.FlatStyle = 'Standard'
	$comboboxPrimaryGroup.ForeColor = 'Black'
	$comboboxPrimaryGroup.BackColor = "Window"
	
	$groupboxPrimaryGroup.ForeColor = 'Black'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'Black'
	$groupboxHomeFolder.ForeColor = 'Black'
	$comboboxDriveLetter.FlatStyle = 'Standard'
	$comboboxDriveLetter.ForeColor = 'Black'
	$comboboxDriveLetter.BackColor = "Window"
	$textboxhomedirectory.ForeColor = 'Black'
	$textboxhomedirectory.BackColor = "White"
	$textboxprofilepath.ForeColor = 'Black'
	$textboxprofilepath.BackColor = "White"
	$textboxlogonscript.ForeColor = 'Black'
	$textboxlogonscript.BackColor = "White"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "White"
	$tabcontrolO365.ForeColor = 'Black'
	$textboxADSyncServer.ForeColor = 'Black'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365userpassword.ForeColor = 'FireBrick'
	$labelO365userconfirmpassword.ForeColor = 'FireBrick'
	$labelO365DisplayName.ForeColor = 'FireBrick'
	$tabpageO365General.BackColor = "White"
	$groupboxADSync.ForeColor = 'Black'
	$textboxADSyncServer.BackColor = "White"
	$groupboxNoAdSync.ForeColor = 'Black'
	$comboboxO365Licenses.FlatStyle = 'Standard'
	$comboboxO365Licenses.BackColor = "Window"
	$comboboxO365Licenses.ForeColor = 'Black'
	$panel3.ForeColor = 'Black'
	$panel3.BackColor = "MenuBar"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$textboxo365passwordgen.BackColor = "White"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'Black'
	$tabpageO365Account.BackColor = "White"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'FireBrick'
	$panel4.ForeColor = 'Black'
	$panel4.BackColor = "MenuBar"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.BackColor = "White"
	$tabpageO365Address.ForeColor = 'Black'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'Black'
	$tabpageO365Groups.BackColor = "White"
	$labelO365Groups.ForeColor = 'Black'
	$labelO365Groups.BackColor = "White"
	$checkedlistboxDISTROo365groups.ForeColor = 'Black'
	$checkedlistboxDISTROo365groups.BackColor = "White"
	$labelSearch.ForeColor = 'Black'
	$textboxO365MailGroups.ForeColor = 'Black'
	$textboxO365MailGroups.BackColor = "White"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'Black'
	$labelSecurityGroups.BackColor = "White"
	$checkedlistboxO365SecurityGroups.ForeColor = 'Black'
	$checkedlistboxO365SecurityGroups.BackColor = "White"
	$labelSearchGroups2.ForeColor = 'Black'
	$labelSearchGroups2.BackColor = "White"
	$textboxSearchO365SecurityGroups.ForeColor = 'Black'
	$textboxSearchO365SecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.ForeColor = 'Black'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'Black'
	$labelsharedmailboxes.BackColor = "White"
	$tabpageo365shared.ForeColor = 'Black'
	$tabpageo365shared.BackColor = "White"
	$groupboxSettingsSharedMailbox.ForeColor = 'Black'
	$groupboxSettingsSharedMailbox.BackColor = "White"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'Black'
	$checkedlistboxsharedmailboxes.BackColor = "White"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "Black"
	$tabpageO365Attributes.BackColor = "White"
	$comboboxO365HidefromGAL.FlatStyle = 'Standard'
	$comboboxO365HidefromGAL.ForeColor = 'Black'
	$comboboxO365HidefromGAL.BackColor = "Window"
	
}

function Copy-ADUserAttributes
{
	
	$textboxDescription.Text = $UserTemplate.Description
	$textboxoffice.Text = $UserTemplate.Office
	$textboxTelephone.Text = $UserTemplate.OfficePhone
	$textboxEmail.Text = $UserTemplate.EmailAddress
	$textboxWebPage.Text = $UserTemplate.HomePage
	
	$comboboxOUTree.SelectedItem = (($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)"))
	
	If ($UserTemplate.PasswordNeverExpires -eq $true)
	{
		$checkboxPasswordNeverExpires.CheckState = 'Checked'
	}
	
	If ($UserTemplate.CannotChangePassword -eq $True)
	{
		$checkboxUserCannotChangePass.CheckState -eq 'Checked'
	}
	
	If ($UserTemplate.PasswordExpired -eq $True)
	{
		$checkboxUserMustChangePasswo.CheckState -eq 'Checked'
	}
	$textboxStreet.Text = $UserTemplate.StreetAddress
	$textboxPOBox.Text = $UserTemplate.POBox
	$textboxcity.Text = $UserTemplate.City
	$textboxstate.Text = $UserTemplate.State
	$textboxzipcode.Text = $UserTemplate.PostalCode
	$checkedlistboxGroups.CheckedItems = $null
	($UserTemplate).MemberOf | ForEach-Object {
		$GName = (Get-ADGroup $_).name
		
		
		$checkedlistboxGroups.SelectedItem = $GName
		$index = $checkedlistboxGroups.SelectedIndex
		$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
	}
	$textboxjobtitle.text = $UserTemplate.Title
	$textboxDepartment.Text = $UserTemplate.Department
	$textboxCompany.Text = $UserTemplate.Company
	$textboxprofilepath.Text = $UserTemplate.ProfilePath
	$textboxlogonscript.Text = $UserTemplate.ScriptPath
	$comboboxDriveLetter.SelectedItem = $UserTemplate.HomeDrive
	$textboxhomedirectory.Text = $UserTemplate.HomeDirectory
	$textboxemployeeType.Text = $UserTemplate.EmployeeType
	
	
}

function Copy-O365UserAttributes
{
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force | Out-Null
	
	$CopyUser = $CopyFromO365User_comboboxcopyuser
	add-logs -text "LOG: Copying attributes from $CopyUser"
	$UserObj = (Get-Msoluser -All | Where-Object { $_.DisplayName -eq $CopyUser }) | Select-Object -First 1
	add-logs -text "LOG: Copying Country Code"
	$comboboxO365countrycode.SelectedText = ($UserObj).CountryCode
	add-logs -text "LOG: Copying City"
	$textboxo365city.Text = ($UserObj).city
	add-logs -text "LOG: Copying State"
	$textboxo365state.Text = ($UserObj).state
	add-logs -text "LOG: Copying Street Address"
	$textboxO365street.Text = ($UserObj).streetaddress
	add-logs -text "LOG: Copying Postal Code"
	$textboxo365zip.Text = ($UserObj).postalcode
	
	If (($UserObj).PasswordNeverExpires -eq $true)
	{
		add-logs -text "LOG: Copying Password Never Expires Flag"
		$checkboxO365PasswordNeverExpires.CheckState = 'Checked'
	}
	
	If (($UserObj).BlockCredential -eq $True)
	{
		add-logs -text "LOG: Copying Disabled Account State"
		$checkboxBlockCred.CheckState = 'Checked'
	}
	
	add-logs -text "LOG: Getting all licenses assinged to $CopyUser"
	$currentlicenses = ($UserObj).Licenses.accountskuid
	foreach ($currentlicense in $currentlicenses)
	{
		$TenantSku = Get-MSOLAccountSku | Where-Object { $_.AccountSkuID -match $currentlicense }
		
		If ($TenantSku.ActiveUnits -ne $TenantSku.ConsumedUnits)
		{
			$lic = $currentlicense -split ":" | Select-Object -Last 1
			#lookup skus in hashtable and convert to friendly name
			$FriendlyName = $Sku.Item("$Lic")
			If ($null -eq $FriendlyName)
			{
				add-logs -text "LOG: Copying The License: $_"
				$obj = [PSCustomObject]@{
					'Name' = $lic
				}
				$Licenses2Add.Add($obj)
			}
			Else
			{
				add-logs -text "LOG: Copying The License: $FriendlyName"
				$obj = [PSCustomObject]@{
					'Name' = $FriendlyName
				}
				
				$Licenses2Add.Add($obj)
				
			}
		}
	}
	
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	Toogle-LicenseStatus
	
	add-logs -text "LOG: Checking Mail Group Membership for $CopyUser"
	Get-MsolGroup -All | Where-Object { ($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") } | ForEach-Object {
		If (Get-MsolGroupMember -GroupObjectId $_.ObjectID | Where-Object { $_.EmailAddress -contains ($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:")})
		{
				If ($checkedlistboxDISTROo365groups.Items -contains $_.DisplayName)
				{
					$_.DisplayName | Out-File $CacheDistroGroupsFile -Append -Force -ErrorAction SilentlyContinue
					add-logs -text "LOG: Adding User to the Distribution Group: $($_.DisplayName)"
					$checkedlistboxDISTROo365groups.SelectedItem = $($_.DisplayName)
					$index = $checkedlistboxDISTROo365groups.SelectedIndex
					$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
				}
			}
			
			
		}
		
	
	add-logs -text "LOG: Done"
	
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force | Out-Null
	
}

function License-MUCO365User
{
	$licenseforuser = @()
	#$Lookup = @()
	Add-Logs -text "LOG: Getting License selected for user"
	$Licenses = $Licenses2Add
	Add-Logs "LOG: We will be adding the licenses, $Licenses2Add"
	Add-Logs -text "LOG: Getting AccountSKU Domain"
	$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
	foreach ($License in $licenses)
	{
		Add-Logs -text "LOG: Looking up SKU for license"
		$Lookup = $Sku.keys | Where-Object { $Sku["$_"] -eq "$license" }
		Add-Logs "LOG: License lookup is $Lookup"
		If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
		{
			Add-Logs -text "LOG: No SKU found during lookup"
			$BackSKU = "$LicenseDomain$License"
			Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
			$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
			If ($CheckSku -ne $Null)
			{
				Add-Logs -text "LOG: Assigning $BackSKU to User"
				$licenseforuser += $CheckSku
			}
			Else
			{
				Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
				$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
				Add-Logs -text "WARN: Assigning $ReLic to user instead"
				$licenseforuser += (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
			}
		}
		
		Else
		{
			Add-Logs -text "LOG: Found the SKU for the license"
			$Lookup | ForEach-Object {
				Add-Logs -text "LOG: Checking License $_"
				$BackSKU = "$LicenseDomain$_"
				Add-Logs -text "LOG: Looking up $BackSKU in tenant"
				Add-Logs -text "LOG: Verifying $BackSKU in tenant"
				$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
				If ($CheckSku -ne $Null)
				{
					Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
					$licenseforuser += $CheckSku
				}
				Else
				{
					Add-Logs -text "WARN: $BackSKU was not found in tenant"
				}
			}
		}
		Add-Logs "LOG: OUTPUTTING $licenseforuser"
		$licenseforuser | Out-File "$env:TEMP\MUClicenseforuser.txt" -Force
		
	}
}

function New-MUCUser
{
		
	add-logs -text 'LOG: Converting password to SecureString'
	add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
	$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
	#Get disable account boolean
	add-logs -text 'LOG: Checking if account is disabled or enabled'
	$disabledaccount = ($checkboxAccountIsDisabled.checked)
	#If account should be disabled
	If ($disabledaccount -eq $true)
	{
		add-logs -text 'LOG: Account is disabled'
		add-logs -text 'LOG: Creating user'
		Try
		{
			New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
		}
		Catch
		{
			add-logs -text "WARN: $_"
			$InfoMessage = $_
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		$User = Get-ADUser -Filter * -Properties * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
		add-logs -text "LOG: User has been created"
		
		#Check if Account is set to expire at a specific time
		Add-Logs -text "LOG: Checking if User account expiration is set"
		If ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text "LOG: User account expiration is set"
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			Add-Logs -text "LOG: Done"
		}
		Else
		{
			Add-Logs -text "LOG: User account expiration not set"
		}
		
		$Proxys = @()
		add-logs -text "LOG: Getting user proxy addresses to set"
		$Proxys += $textboxproxyaddress.Lines
		If ($Proxys -ne $Null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text "LOG: Adding proxy addresses"
				add-logs -text "LOG: Getting user proxy addresses to set"
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
			}
		}
		Else
		{
			add-logs -text "LOG: No proxys were found to add"
		}
		add-logs -text "LOG: Done with Proxys"
		
		
		
		add-logs -text "LOG: Getting user employeeType attribute to set"
		If ($textboxemployeeType.text -ne "")
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
		}
		Else
		{
			add-logs -text "LOG: No employeeType to add"
		}
		add-logs -text "LOG: Done with employeeType"
		
		add-logs -text "LOG: Getting user employeeNumber attribute to set"
		If ($textboxemployeenumber.text -ne "")
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			Set-ADUser $User -EmployeeNumber $textboxemployeenumber.text 
		}
		Else
		{
			add-logs -text "LOG: No employeeNumber to add"
		}
		add-logs -text "LOG: Done with employeeNumber"
		
		add-logs -text "LOG: Getting user employeeID attribute to set"
		If ($textboxEmployeeID.Text -ne "")
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			Set-ADUser $User -EmployeeID $textboxEmployeeID.text
		}
		Else
		{
			add-logs -text "LOG: No employeeID to add"
		}
		add-logs -text "LOG: Done with employeeID"
		
		#Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		$groups = $checkedlistboxGroups.CheckedItems
		If ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $Group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
				Add-ADGroupMember -Identity $Group -Members $User
			}
		}
		Else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text "LOG: Done"
		
		Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
		If ($comboboxPrimaryGroup.Text -eq "Domain Users")
		{
			Add-Logs -text "LOG: Primary Group set to Domain Users"
		}
		Else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
		}
		Add-Logs -text "LOG: Done"
		
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		If ($comboboxOUTree.SelectedItem -ne $null)
		{
			
			add-logs -text 'LOG: Specific OU specified, moving user'
			$CanocicalName = $comboboxOUTree.SelectedItem
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$User | Move-ADObject -TargetPath $OUTOMove
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
	Else
	{
		add-logs -text 'LOG: Account is enabled'
		add-logs -text 'LOG: Creating user'
		Try
		{
			New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
		}
		Catch
		{
			add-logs -text "WARN: $_"
			$InfoMessage = $_
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		$User = Get-ADUser -Filter * -Properties * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
		add-logs -text "LOG: User has been created"
		
		#Check if Account is set to expire at a specific time
		Add-Logs -text "LOG: Checking if User account expiration is set"
		If ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text "LOG: User account expiration is set"
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			Add-Logs -text "LOG: Done"
		}
		Else
		{
			Add-Logs -text "LOG: User account expiration not set"
		}
		
		$Proxys = @()
		add-logs -text "LOG: Getting user proxy addresses to set"
		$Proxys += $textboxproxyaddress.Lines
		If ($Proxys -ne $Null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text "LOG: Adding proxy addresses"
				add-logs -text "LOG: Getting user proxy addresses to set"
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
			}
		}
		Else
		{
			add-logs -text "LOG: No proxys were found to add"
		}
		add-logs -text "LOG: Done with Proxys"
		
		add-logs -text "LOG: Getting user employeeType attribute to set"
		If ($textboxemployeeType.text -ne "")
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
		}
		Else
		{
			add-logs -text "LOG: No employeeType to add"
		}
		add-logs -text "LOG: Done with employeeType"
		
		add-logs -text "LOG: Getting user employeeNumber attribute to set"
		If ($textboxemployeenumber.text -ne "")
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			Set-ADUser $User -EmployeeNumber $textboxemployeenumber.text
		}
		Else
		{
			add-logs -text "LOG: No employeeNumber to add"
		}
		add-logs -text "LOG: Done with employeeNumber"
		
		add-logs -text "LOG: Getting user employeeID attribute to set"
		If ($textboxEmployeeID.Text -ne "")
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			Set-ADUser $User -EmployeeID $textboxEmployeeID.text
		}
		Else
		{
			add-logs -text "LOG: No employeeID to add"
		}
		add-logs -text "LOG: Done with employeeID"
		
		#Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		$groups = $checkedlistboxGroups.CheckedItems
		If ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $Group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
				Add-ADGroupMember -Identity $Group -Members $User
			}
		}
		Else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text "LOG: Done"
		
		Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
		If ($comboboxPrimaryGroup.Text -eq "Domain Users")
		{
			Add-Logs -text "LOG: Primary Group set to Domain Users"
		}
		Else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
		}
		Add-Logs -text "LOG: Done"
		
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		If ($comboboxOUTree.SelectedItem -ne $null)
		{
			
			add-logs -text 'LOG: Specific OU specified, moving user'
			$CanocicalName = $comboboxOUTree.SelectedItem
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$User | Move-ADObject -TargetPath $OUTOMove
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
}

function New-MUCO365User
{
	add-logs -text 'LOG: Checking DirSync option'
	#If DirSync is enabled
	If ($checkboxRunADSync.CheckState -eq 'Checked')
	{
		If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$SyncServer = $textboxADSyncServer.text
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text "LOG: Running DirSync on $SyncServer"
			add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
			Try
			{
				Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text "WARN: ADSync Server text box is empty"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
		}
	}
	#If DirSync is not enabled
	Else
	{
		add-logs -text "LOG: User is not being AD-Synced"
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($Licenses2Add) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			
			#Check to see if the user is being enabled upon creation or disabled
			
			#User is going to be disabled
			add-logs -text 'LOG: Checking enabled status of user'
			If ($checkboxBlockCred.Checked -eq $true)
			{
				#If user is going to be disabled
				add-logs -text 'LOG: User is Disabled'
				add-logs -text 'LOG: Creating user'
				If (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
				{
					add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
					$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				Else
				{
					If ($Licenses2Add -ne $null)
					{
						License-MUCO365User
					}
					Try
					{
						add-logs -text 'LOG: Creating User'
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						add-logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Adding Licenses'
						$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
						$licenseforuser | ForEach-Object {
							Add-Logs -text "LOG: Adding $_"
							
							Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
						}
						Add-Logs -text 'LOG: Done'
						
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					
					#Find if user should be added to any Security groups
					add-logs -text 'LOG: Getting checked Security groups'
					$groups = $checkedlistboxO365SecurityGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Security Groups found'
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $DN to $Group"
							$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
							$UserGUID = (($User).ObjectID).GUID
							add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
							Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
						}
					}
					Else
					{
						add-logs -text 'LOG: No Security Groups checked'
					}
					Add-Logs -text 'LOG: Done with Security Groups'
					
					#Check user licenses, if licensed create and wait for mailbox
					Add-Logs -text 'LOG: Checking if license was applied to the user'
					If ($Licenses2Add -ne $Null)
					{
						Add-Logs -text 'LOG: License is applied to the new user'
						
						$ts = New-TimeSpan -Minutes 8
						
						$TermLoop = ((get-date) + $ts).ToString("HH:mm")
						Do
						{
							$DateNow = (Get-date).ToString("HH:mm")
							Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: 20 seconds remaining'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: 10 seconds remaining'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: Done'
							
							Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
						}
						Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
						
						add-logs -text 'LOG: Checking E-Mail address field for entered data'
						If ($textboxO365EmailAddress.Text -like "*@*")
						{
							add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
							If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
							{
								add-logs -text 'LOG: Email is different from UPN, proceeding.'
								
								Try
								{
									$PrimEmail = $textboxO365EmailAddress.Text
									add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
									$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
									$DN = $Mailbox.DisplayName
									add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
									Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
									add-logs -text "LOG: Done"
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
							Else
							{
								add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
							}
							
						}
						Else
						{
							add-logs -text "LOG: No E-Mail entered"
						}
						
						#Add any email aliases
						add-logs -text 'LOG: Checking Alias Addresses field for entered data'
						If ($textboxo365proxyaddresses.Text -ne $null)
						{
							add-logs -text 'LOG: Found Alias Addresses to add'
							$Proxys = $textboxo365proxyaddresses.Lines
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							$DN = $Mailbox.DisplayName
							foreach ($Proxy in $Proxys)
							{
								add-logs -text "LOG: Adding $Proxy for $DN"
								Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
								add-logs -text 'LOG: Done'
							}
						}
						Else
						{
							add-logs -text 'LOG: No Alias Addresses found'
						}
						add-logs -text 'LOG: Done with Alias Addresses'
						
						#Find if user should be added to any mail groups
						add-logs -text 'LOG: Getting checked mail groups'
						$groups = $checkedlistboxDISTROo365groups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Mail Groups found'
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
								If ((Get-UnifiedGroup).displayName -contains $group)
								{
									Add-Logs -text "LOG: $group is an Office 365 group"
									Add-Logs -text "LOG: Adding $DN to $Group"
									Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
									Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
									Add-Logs -text "LOG: Done"
								}
								Else
								{
									Add-Logs -text "LOG: $group is not an Office 365 group"
									
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
						}
						Else
						{
							add-logs -text 'LOG: No Mail Groups checked'
						}
						Add-Logs -text 'LOG: Done with Mail Groups'
						
						#Shared Mailboxes
						Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
						$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
						#If there are shared mailboxes to add the user to (full access rights)
						If ($SharedMailboxes -ne $null)
						{
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									$Automap = $comboboxsharedmailboxautomap.Text
									Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
									If ($Automap -eq "False")
									{
										Add-Logs -text "LOG: AutoMapping set to False"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
									}
									Else
									{
										Add-Logs -text "LOG: AutoMapping set to True"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
									}
								}
							}
							ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
									Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
									Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
									Add-Logs -text "LOG: Done"
								}
								
							}
							Else
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
									Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
									Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
									Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
									Add-Logs -text 'LOG: Done'
								}
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No Shared Mailboxes selected'
						}
						Add-Logs -text 'LOG: Done with Shared Mailboxes'
						
						Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
						#Hide from GAL
						If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
						{
							Add-Logs -text 'LOG: Hide from global address list is set to True'
							Add-Logs -text 'LOG: Hiding mailbox from global address list'
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							If ($null -ne $mailbox)
							{
								Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
							}
							Else
							{
								Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
								$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
								$InfoTitle = "Warning"
								Show-MessageBox_psf
							}
						}
						Else
						{
							Add-Logs -text 'LOG: Hide from global address list is set to False'
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No license is being added for the new user'
						Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
						Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
						Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
					}
					
					#If MFA is set to TRUE then enable MFA for the user
					Add-Logs -text 'LOG: Checking MFA status for the user'
					If ($comboboxMFA.Selecteditem -eq "True")
					{
						$UserMFA = ($User).UserPrincipalName
						Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
						Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
						$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
						Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
						$Auth.RelyingParty = "*"
						Add-Logs -text 'CMD: $MFA = @($Auth)'
						$MFA = @($Auth)
						Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
						Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
						Add-Logs -text 'LOG: Done'
					}
					Else
					{
						Add-Logs -text 'LOG: MFA is set to False'
					}
					Add-Logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Checking OWA'
					If ($comboboxOWA.SelectedItem -eq 'False')
					{
						Add-Logs -text 'LOG: OWA Disabled'
						Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
						Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
					}
					Else
					{
						Add-Logs -text 'LOG: OWA Enabled'
						
					}
					Add-Logs -text 'LOG: Done'
					
				}
			}
			Else
			{
				#User is going to be enabled upon creation
				add-logs -text 'LOG: User is Enabled'
				add-logs -text 'LOG: Creating user'
				If (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
				{
					add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
					$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				Else
				{
					If ($Licenses2Add -ne $null)
					{
						License-MUCO365User
					}
					Try
					{
						add-logs -text 'LOG: Creating User'
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						add-logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Adding Licenses'
						$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
						$licenseforuser | ForEach-Object {
							Add-Logs -text "LOG: Adding $_"
							
							Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
						}
						Add-Logs -text 'LOG: Done'
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					#Find if user should be added to any Security groups
					add-logs -text 'LOG: Getting checked Security groups'
					$groups = $checkedlistboxO365SecurityGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Security Groups found'
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $DN to $Group"
							$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
							$UserGUID = (($User).ObjectID).GUID
							add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
							Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
						}
					}
					Else
					{
						add-logs -text 'LOG: No Security Groups checked'
					}
					Add-Logs -text 'LOG: Done with Security Groups'
					
					#Check user licenses, if licensed create and wait for mailbox
					Add-Logs -text 'LOG: Checking if license was applied to the user'
					If ($Licenses2Add -ne $Null)
					{
						Add-Logs -text 'LOG: License is applied to the new user'
						
						$ts = New-TimeSpan -Minutes 8
						
						$TermLoop = ((get-date) + $ts).ToString("HH:mm")
						Do
						{
							$DateNow = (Get-date).ToString("HH:mm")
							Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: 20 seconds remaining'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: 10 seconds remaining'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: Done'
							
							Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
						}
						Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
						
						add-logs -text 'LOG: Checking E-Mail address field for entered data'
						If ($textboxO365EmailAddress.Text -like "*@*")
						{
							add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
							If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
							{
								add-logs -text 'LOG: Email is different from UPN, proceeding.'
								
								Try
								{
									$PrimEmail = $textboxO365EmailAddress.Text
									add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
									$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
									$DN = $Mailbox.DisplayName
									add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
									Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
									add-logs -text "LOG: Done"
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
							Else
							{
								add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
							}
							
						}
						Else
						{
							add-logs -text "LOG: No E-Mail entered"
						}
						
						#Add any email aliases
						add-logs -text 'LOG: Checking Alias Addresses field for entered data'
						If ($textboxo365proxyaddresses.Text -ne $null)
						{
							add-logs -text 'LOG: Found Alias Addresses to add'
							$Proxys = $textboxo365proxyaddresses.Lines
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							$DN = $Mailbox.DisplayName
							foreach ($Proxy in $Proxys)
							{
								add-logs -text "LOG: Adding $Proxy for $DN"
								Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
								add-logs -text 'LOG: Done'
							}
						}
						Else
						{
							add-logs -text 'LOG: No Alias Addresses found'
						}
						add-logs -text 'LOG: Done with Alias Addresses'
						
						#Find if user should be added to any mail groups
						add-logs -text 'LOG: Getting checked mail groups'
						$groups = $checkedlistboxDISTROo365groups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Mail Groups found'
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
								If ((Get-UnifiedGroup).displayName -contains $group)
								{
									Add-Logs -text "LOG: $group is an Office 365 group"
									Add-Logs -text "LOG: Adding $DN to $Group"
									Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
									Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
									Add-Logs -text "LOG: Done"
								}
								Else
								{
									Add-Logs -text "LOG: $group is not an Office 365 group"
									
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
						}
						Else
						{
							add-logs -text 'LOG: No Mail Groups checked'
						}
						Add-Logs -text 'LOG: Done with Mail Groups'
						
						#Shared Mailboxes
						Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
						$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
						#If there are shared mailboxes to add the user to (full access rights)
						If ($SharedMailboxes -ne $null)
						{
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									$Automap = $comboboxsharedmailboxautomap.Text
									Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
									If ($Automap -eq "False")
									{
										Add-Logs -text "LOG: AutoMapping set to False"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
									}
									Else
									{
										Add-Logs -text "LOG: AutoMapping set to True"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
									}
								}
							}
							ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
									Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
									Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
									Add-Logs -text "LOG: Done"
								}
								
							}
							Else
							{
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
									Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
									Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
									Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
									Add-Logs -text 'LOG: Done'
								}
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No Shared Mailboxes selected'
						}
						Add-Logs -text 'LOG: Done with Shared Mailboxes'
						
						Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
						#Hide from GAL
						If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
						{
							Add-Logs -text 'LOG: Hide from global address list is set to True'
							Add-Logs -text 'LOG: Hiding mailbox from global address list'
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							If ($null -ne $mailbox)
							{
								Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
							}
							Else
							{
								Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
								$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
								$InfoTitle = "Warning"
								Show-MessageBox_psf
							}
						}
						Else
						{
							Add-Logs -text 'LOG: Hide from global address list is set to False'
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No license is being added for the new user'
						Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
						Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
						Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
					}
					
					#If MFA is set to TRUE then enable MFA for the user
					Add-Logs -text 'LOG: Checking MFA status for the user'
					If ($comboboxMFA.Selecteditem -eq "True")
					{
						$UserMFA = ($User).UserPrincipalName
						Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
						Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
						$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
						Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
						$Auth.RelyingParty = "*"
						Add-Logs -text 'CMD: $MFA = @($Auth)'
						$MFA = @($Auth)
						Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
						Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
						Add-Logs -text 'LOG: Done'
					}
					Else
					{
						Add-Logs -text 'LOG: MFA is set to False'
					}
					Add-Logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Checking OWA'
					If ($comboboxOWA.SelectedItem -eq 'False')
					{
						Add-Logs -text 'LOG: OWA Disabled'
						Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
						Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
					}
					Else
					{
						Add-Logs -text 'LOG: OWA Enabled'
						
					}
					Add-Logs -text 'LOG: Done'
				}
			}
		}
	}
}

#endregion

$MainForm_Load = {
	
	
	
	$MFALogin = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name MFALogin -ErrorAction SilentlyContinue).MFALogin
	If ($MFALogin -eq 1)
	{
		$radiobuttonMFALogin.Checked = $true
	}
	Else
	{
		$radiobuttonNonMFALogin.Checked = $true
	}
	

	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		#Set-LightMode
		
	}
	
	
}

$MainForm_DuringShow = {
	
	Import-Module ActiveDirectory -ErrorAction SilentlyContinue
	Import-Module ADSync -ErrorAction SilentlyContinue
	
	#DEBUG
	#$tabcontrolUserProperties.Enabled = $true
	#$groupboxNoAdSync.Enabled = $true
	
	$copyActiveDirectoryUserToolStripMenuItem.Enabled = $false
	
	$textboxADSyncServer.Enabled = $false
	
	$datetimepickerDATE.Refresh()
	
	$radiobuttonNever.Checked = $true
	$datetimepickerDATE.Enabled = $false
	$datetimepickerTIME.Enabled = $false
	
	$datetimepickerTIME.Text = "05:00 PM"
	
	$MainForm.MaximizeBox = $false
	
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1
	#DEBUG
	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	#$comboboxO365Licenses.Enabled = $False
	$comboboxO365Licenses.Text = "Please connect to Office 365 to assign a license"
	
	#DEBUG
	$tabcontrolUserProperties.Enabled = $false
	
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	
	$comboboxO365HidefromGAL.SelectedItem = "False"
	
	$labelTimeLeft.Text = ""
	
	$global:ExternalLog = "$env:TEMP\MUC.txt"
	$labelLogFile.Text = $global:ExternalLog
	
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items "Domain Users"
	$comboboxPrimaryGroup.SelectedItem = "Domain Users"
	
	$AlwaysADCreate = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysADCreate -ErrorAction SilentlyContinue).AlwaysADCreate
	If ($AlwaysADCreate -eq 1)
	{
		$checkboxCreateAnActiveDirect.Checked = $true
	}
	
	$AlwaysO365Create = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysO365Create -ErrorAction SilentlyContinue).AlwaysO365Create
	If ($AlwaysO365Create -eq 1)
	{
		$checkboxconfigo365user.Checked = $true
	}
}

$resetFormToolStripMenuItem_Click = {
	Reset-Form
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateAnActiveDirect.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		Try
		{
			New-MUCUser
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		Try
		{
			New-MUCO365User
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
		
		#### ACTIVE DIRECTORY USER CREATION PORTION ####
		
		add-logs -text 'LOG: Only an Active Directory user is being created'
		Try
		{
			New-MUCUser
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
		
		
		#### OFFICE 365 USER CREATION PORTION ####
		
		
		add-logs -text 'LOG: Only an Office 365 User is being created'
		Try
		{
			New-MUCO365User
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
	
	$ResetForm = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ResetForm -ErrorAction SilentlyContinue).ResetForm
	If ($ResetForm -eq 1)
	{
		Reset-Form
	}
}


$textboxDisplayName_TextChanged = {
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'White'
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'Black'
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'Firebrick'
		}
		
	}
	
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxDisplayName_ChangeFocus = {
	$ADDisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDisplayName -ErrorAction SilentlyContinue).ADDisplayName
	If ($ADDisplayName -eq 1)
	{
		$words = $textboxDisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxLastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxLastName_ChangeFocus = {
	$ADLastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADLastName -ErrorAction SilentlyContinue).ADLastName
	If ($ADLastName -eq 1)
	{
		$words = $textboxLastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxLastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxFirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
	
	
		
	
}

$textboxFirstName_ChangeFocus = {
	$ADFirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADFirstName -ErrorAction SilentlyContinue).ADFirstName
	If ($ADFirstName -eq 1)
	{
		$words = $textboxFirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxFirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxInitials_ChangeFocus = {
	$ADInitials = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADInitials -ErrorAction SilentlyContinue).ADInitials
	If ($ADInitials -eq 1)
	{
		$words = $textboxInitials.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxInitials.Text = $TextInfo.ToTitleCase($words)
	}
}


$buttonGeneratePassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword
		$textboxPasswordGen.Text = $Password
		$maskedtextboxpassword.Text = $Password
		$textboxConfirmPassword.text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxpassword.Text = $textboxPasswordGen.Text
		$textboxConfirmPassword.text = $textboxPasswordGen.Text
	}
	
}

$textboxConfirmPassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'White'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Black'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Firebrick'
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}

			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateAnActiveDirect.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = $textboxUserLogonName.text
		$comboboxO365Domains.SelectedItem = $comboboxDomains.SelectedItem
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'White'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Black'
		}
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Firebrick'
		}
		
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonNonMFALogin.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: $((Get-ChildItem -Path $($env:LOCALAPPDATA+"\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse ).FullName|?{$_ -notmatch "_none_"}|select -First 1)'
		$Modules = $((Get-ChildItem -Path $($env:LOCALAPPDATA + "\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse).FullName | Where-Object{ $_ -notmatch "_none_" } | Select-Object -First 1)
		If ($Modules -eq $Null)
		{
			add-logs -text 'WARN: MFA Module was not found'
			$InfoMessage = "Exchange Online MFA Module was not found, please make sure you have downloaded and installed it from your tenant https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/mfa-connect-to-exchange-online-powershell?view=exchange-ps"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		$EXOSession = New-ExoPSSession
		Import-PSSession $EXOSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'MediumSeaGreen'
		}
		Else
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'Green'
		}
		
		
		$Global:O365_Pre_Req++
		#Create just an AD User
		If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD nad O365 User (w/ ADSync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD And O365 User (no Sync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 User no adsync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 user with ADSync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$buttonConnectToOffice365.ForeColor = 'White'
		}
		Else
		{
			$buttonConnectToOffice365.ForeColor = 'Black'
		}
		
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		#add-logs -text 'LOG: Enabling Licenses combobox'
		#add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		#$comboboxO365Licenses.Enabled = $True
		#add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = ""
		
		#Cache licenses to use in other forms
		$LicenseArray | Out-File "$env:TEMP\MUCLicenses.txt" -Force -ErrorAction SilentlyContinue
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		#add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		#Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = "Click to select an Office 365 license"

		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$MailGroups = (Get-MsolGroup | Where-Object { ($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataMailGroups = $MailGroups
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $MailGroups
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$SecurityGroups = (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataSecurityGroups = $SecurityGroups
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $SecurityGroups
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		$comboboxO365HidefromGAL.SelectedItem = "False"
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword -O365
		$textboxo365passwordgen.Text = $Password
		$maskedtextboxo365password.Text = $Password
		$textboxo365confirmpassword.Text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
		$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
		add-logs -text 'LOG: Done'
	}

	
	
}


$checkboxRunADSync_CheckedChanged = {
	If ($checkboxRunADSync.Checked -eq $True)
	{
		$groupboxNoAdSync.Enabled = $false
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
		
		$textboxADSyncServer.Enabled = $true
		
	}
	elseif ($checkboxRunADSync.Checked -eq $false)
	{
		$groupboxNoAdSync.Enabled = $True
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
		
		$textboxADSyncServer.Enabled = $false
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$buttonExit_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged = {
	If ((($textboxO365LastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	ElseIf ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}
$textboxO365LastName_FocusChanged = {
	$O365LastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365LastName -ErrorAction SilentlyContinue).O365LastName
	If ($O365LastName -eq 1)
	{
		$words = $textboxO365LastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365LastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365FirstName_TextChanged = {
	If ((($textboxO365FirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	ElseIf ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365FirstName_FocusChanged = {
	$O365FirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365FirstName -ErrorAction SilentlyContinue).O365FirstName
	If ($O365FirstName -eq 1)
	{
		$words = $textboxO365FirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365FirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365Initials_TextChanged = {
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged = {
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
	If ($Global:ExternalLog -ne $null)
	{
		$console.Text | Out-File $Global:ExternalLog
	}
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		If ($null -ne (Get-Module -ListAvailable -Name "ADSync"))
		{
			add-logs -text 'LOG: DirSync found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			$groupboxNoAdSync.Enabled = $true
			$comboboxOWA.SelectedItem = "True"
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Enabling ADSync CheckBox'
		$checkboxRunADSync.Enabled = $True
		add-logs -text 'LOG: Enabling No ADSync Groupbox'
		$groupboxNoAdSync.Enabled = $true
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateAnActiveDirect_CheckedChanged = {
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateAnActiveDirect.Checked -eq $true))
	{
		If ($Null -ne (Get-Module -ListAvailable -Name "ActiveDirectory"))
		{
			add-logs -text 'LOG: Enabling AD User creation'
			$tabcontrolUserProperties.Enabled = $true
			add-logs -text 'LOG: Done'
			
			Add-Logs -text "Enabling Copy AD User Menu Item"
			$copyActiveDirectoryUserToolStripMenuItem.Enabled = $true
			add-logs -text 'LOG: Done'
			
			
			add-logs -text 'LOG: Loading Organizational Unit Tree'
			add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
			$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName
			If ($null -eq $OUTree)
			{
				$InfoMessage = 'Could not load Organizational Unit structure'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxOUTree.Enabled = $false
			}
			Else
			{
				add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
				Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
				add-logs -text 'LOG: Done'
				$comboboxOUTree.Enabled = $true
			}
			
			add-logs -text 'LOG: Getting Active Directory Groups'
			add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
			$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
			$Global:OriginalData = $Groups
			If ($null -eq $Groups)
			{
				add-logs -text 'WARN: No Active Directory Groups were found'
				$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
				Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting NetBIOS Name'
			add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
			$Netbiosname = (Get-ADDomain).NetBIOSName
			If ($null -eq $Netbiosname)
			{
				add-logs -text 'WARN: No NetBIOS Name was found'
				$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$textboxUPNDomain.Text = "Not Available"
			}
			Else
			{
				$textboxUPNDomain.Text = $Netbiosname + "\"
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting UPN Suffixes'
			add-logs -text 'CMD: $Forest = Get-ADForest'
			$Forest = Get-ADForest
			If ($null -eq $Forest)
			{
				add-logs -text 'WARN: No Active Directory Forest was found'
				$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxDomains.Enabled = $false
			}
			Else
			{
				$comboboxDomains.Enabled = $true
				$UPNs = @()
				add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
				$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
				If ($extraUPNs -ne $Null)
				{
					foreach ($extraUPN in $extraUPNs)
					{
						$UPNs += "@" + $extraUPN
					}
				}
				add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
				$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
				Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
			}
			add-logs -text 'LOG: Done'
			
			$comboboxDomains.SelectedIndex = 0
		}
		Else
		{
			$InfoMessage = "Could not locate the ActiveDirectory module on $env:COMPUTERNAME. This module is required to create an Active Directory user"
			$InfoTitle = "Error"
			Show-MessageBox_psf
			$checkboxCreateAnActiveDirect.CheckState = 'Unchecked'
		}
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	
	Update-SamAccountNameTextbox
	Update-DisplayNameTextbox
	Update-EmailTextbox
	
	$textboxSamAccount.Text = $textboxUserLogonName.Text
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'White'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Black'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Firebrick'
		}
		
	}
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxUserLogonName_FocusChanged = {
	$ADUPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADUPN -ErrorAction SilentlyContinue).ADUPN
	If ($ADUPN -eq 1)
	{
		$words = $textboxUserLogonName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxUserLogonName.Text = $TextInfo.ToTitleCase($words)
	}
}




$maskedtextboxpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'White'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'LightCoral'
			
		}
		
	}
	Else
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'Black'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'Firebrick'
			
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}



$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHub_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'White'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'LightCoral'
		}
	}
	Else
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'Black'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'Firebrick'
		}
	}
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365DisplayName_FocusChanged = {
	$O365DisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365DisplayName -ErrorAction SilentlyContinue).O365DisplayName
	If ($O365DisplayName -eq 1)
	{
		$words = $textboxO365DisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365DisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365UPN_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'White'
		}
		Else
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Black'
		}
		
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'LightCoral'}
		Else
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Firebrick'
		}
		
		
	}
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_FocusChanged = {
	$O365UPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365UPN -ErrorAction SilentlyContinue).O365UPN
	If ($O365UPN -eq 1)
	{
		$words = $textboxO365UPN.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365UPN.Text = $TextInfo.ToTitleCase($words)
	}
}


$maskedtextboxo365password_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'White'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'lightcoral'
		}
	}
	Else
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'Black'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'Firebrick'
		}
	}
	
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}

$comboboxO365Licnses_Click = {
	Show-O365LicenseSelection_psf
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	Toogle-LicenseStatus
}





$comboboxO365countrycode_SelectedIndexChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
		}
		
	}
	Else
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'White'
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
		
	}
	
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'LightCoral'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'LightCoral'
	}
	Else
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'Firebrick'
	}
	
	
}



$saveLogAsToolStripMenuItem_Click = {
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged = {
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}




$versionToolStripMenuItem_Click = {
	$InfoMessage = "
Version Number: $Version
Build Date: $Builddate
Author: Brad Wyatt
"
	$InfoTitle = "Build Information"
	Show-MessageBox_psf
	
}


$changelogToolStripMenuItem_Click = {
	Show-ChangeLog_psf
	
}

$labelChangelog_Click = {
	Show-ChangeLog_psf
	
}

$externalLogFileToolStripMenuItem_Click = {
	# Class Details:  https://msdn.microsoft.com/en-us/library/system.windows.forms.savefiledialog(v=vs.110).aspx 
	$SaveFileDialog = New-Object windows.forms.savefiledialog
	$SaveFileDialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$SaveFileDialog.title = "Log File Location"
	#$SaveFileDialog.filter = "All files (*.*)| *.*"   
	#$SaveFileDialog.filter = "PublishSettings Files|*.publishsettings|All Files|*.*" 
	$SaveFileDialog.filter = "Log Text File|*.txt"
	$SaveFileDialog.ShowHelp = $True
	$result = $SaveFileDialog.ShowDialog()
	$result
	$Global:ExternalLog = $SaveFileDialog.filename
	Write-Host $result
	If ($result -eq "Ok")
	{
		
		$labelLogFile.Text = $global:ExternalLog
		
	}
}


$radiobuttonExpireOn_CheckedChanged = {
	#Enable the Date Date / Time picker
	$datetimepickerDATE.Enabled = $true
	#Enable the Time date/time picker
	$datetimepickerTIME.Enabled = $true
	
}

$radiobuttonNever_CheckedChanged = {
	#Disable the Date Date/Time picker
	$datetimepickerDATE.Enabled = $false
	#Disable the Time Date/Time picker
	$datetimepickerTIME.Enabled = $false
	
}

$datetimepickerDATE_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$datetimepickerTIME_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$checkedlistboxGroups_SelectedIndexChanged = {

	If ($click -ne 1)
	{
		$CachedCheckedGroups = Get-Content $CacheGroups -ErrorAction SilentlyContinue
		
		$checkedlistboxGroups.CheckedItems | ForEach-Object{
			#If checked and not in file, add and append
			$CheckItem = Get-Content $CacheGroups | Select-String $_
			If ($null -eq $CheckItem)
			{				
				$_ | Out-File $CacheGroups -Force -Append
			}
		}
		
		$CachedCheckedGroups = Get-Content $CacheGroups -ErrorAction SilentlyContinue
		
		
		#Get all unchecked items
		$UncheckedItems = $checkedlistboxGroups.Items | Where-Object { $checkedlistboxGroups.CheckedItems -notcontains $_ }
		
		#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
		Compare-Object -ReferenceObject $CachedCheckedGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
			# == means that the obj is unchecked but present on the file, we need to remove from file
			If ($_.SideIndicator -eq "==")
			{
				#Remove the item that is present on the list but unchecked from the file
				$Info = $CachedCheckedGroups | select-string -pattern $_.InputObject -notmatch
				$InfoMessage = $Info
				$Info | Out-File $CacheGroups -Force -ErrorAction SilentlyContinue
			}
		}
	}
	
	
	$Items = @()
	$Items += $checkedlistboxGroups.CheckedItems
	$Items += "Domain Users"
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items $Items
	
	
}





$optionsToolStripMenuItem_Click = {
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
}

$textboxDescription_FocusChanged = {
	$ADDescription = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription
	If ($ADDescription -eq 1)
	{
		$words = $textboxDescription.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDescription.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxoffice_FocusChanged = {
	$ADOffice = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADOffice -eq 1)
	{
		$words = $textboxoffice.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxoffice.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxSamAccount_FocusChanged = {
	$ADSamAccountName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADSamAccountName -ErrorAction SilentlyContinue).ADSamAccountName
	If ($ADSamAccountName -eq 1)
	{
		$words = $textboxSamAccount.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxSamAccount.Text = $TextInfo.ToTitleCase($words)
	}
	
}



$textboxStreet_FocusChanged = {
	$ADStreet = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADStreet -ErrorAction SilentlyContinue).ADStreet
	If ($ADStreet -eq 1)
	{
		$words = $textboxstreet.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstreet.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxcity_FocusChanged = {
	$ADCity = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCity -ErrorAction SilentlyContinue).ADCity
	If ($ADCity -eq 1)
	{
		$words = $textboxcity.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxcity.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxstate_FocusChanged = {
	$ADState = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState
	If ($ADState -eq 1)
	{
		$words = $textboxstate.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstate.Text = $TextInfo.ToTitleCase($words)
	}
	
	
}

$textboxjobtitle_FocusChanged = {
	$ADJobTitle = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADJobTitle -ErrorAction SilentlyContinue).ADJobTitle
	If ($ADJobTitle -eq 1)
	{
		$words = $textboxjobtitle.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxjobtitle.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxDepartment_FocusChanged = {
	$ADDepartment = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment
	If ($ADDepartment -eq 1)
	{
		$words = $textboxDepartment.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDepartment.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxCompany_FocusChanged = {
	$ADCompany = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany
	If ($ADCompany -eq 1)
	{
		$words = $textboxCompany.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxCompany.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$debugToolStripMenuItem_Click = {
	#Set value to 1 so we dont have string settings get in the way
	#Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 1 -Force | Out-Null
	
	#$textboxFirstName.Text = "TIM"
	#$textboxLastName.Text = "Loser"
	#$textboxEmail.text= "Tim.loser@loser.com"
	#Set back to 0
	#Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 0 -Force | Out-Null
	Add-Logs $checkedlistboxGroups.CheckedItems
	
	
}

$textboxSearchGroups_TextChanged = {
	
	$click = 1
	$Filter = $textboxSearchGroups.text
	$Results = $OriginalData | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxGroups -Items $Results
	
	Get-Content $CacheGroups -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxGroups.Items -contains $_)
		{
			$checkedlistboxGroups.SelectedItem = $_
			$index = $checkedlistboxGroups.SelectedIndex
			$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchGroups.Focus()
	
}


$textboxSearchO365SecurityGroups_TextChanged = {
	$click = 1
	
	
	$Filter = $textboxSearchO365SecurityGroups.text
	$Results = $OriginalDataSecurityGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $Results
	
	Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxO365SecurityGroups.Items -contains $_)
		{
			$checkedlistboxO365SecurityGroups.SelectedItem = $_
			$index = $checkedlistboxO365SecurityGroups.SelectedIndex
			$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchO365SecurityGroups.Focus()
	
}

$textboxO365MailGroups_TextChanged={
	
	$click = 1
	$Filter = $textboxO365MailGroups.text
	$Results = $OriginalDataMailGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $Results
	
	Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxDISTROo365groups.Items -contains $_)
		{
			$checkedlistboxDISTROo365groups.SelectedItem = $_
			$index = $checkedlistboxDISTROo365groups.SelectedIndex
			$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxO365MailGroups.Focus()
	
	
	
	
}

$textboxO365street_FocusChanged={
	$O365Street = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365Street -ErrorAction SilentlyContinue).O365Street
	If ($O365Street -eq 1)
	{
		$words = $textboxO365street.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365street.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxo365city_FocusChanged={
	$O365City = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City
	If ($O365City -eq 1)
	{
		$words = $textboxo365city.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365city.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxo365state_FocusChanged={
	$O365State = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State
	If ($O365State -eq 1)
	{
		$words = $textboxo365state.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365state.Text = $TextInfo.ToTitleCase($words)
	}
	
}


$textboxemployeenumber_TextChanged={
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
}

$textboxEmployeeID_TextChanged={
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
}

$textboxEmail_TextChanged={
	
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
}

$copyActiveDirectoryUserToolStripMenuItem_Click={
	
	#Set value to 1 so we dont have string settings get in the way
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 1 -Force | Out-Null
	Show-CopyFromUser_psf
	$CopyUser = $CopyFromUser_comboboxcopyuser
	$Job = $PSJob
	$UserJob = ($Job | Where-Object { $_.Name -like $CopyUser })[0]
	$UserTemplate = Get-ADUser -identity ($UserJob).ObjectGuid -properties *
	Copy-ADUserAttributes
	#Set back to 0
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 0 -Force | Out-Null
	Get-Job | Remove-Job
	
}

$textboxSamAccount_TextChanged={
	Update-EmailTextbox
	Update-DisplayNameTextbox
	Update-UserPrincipalNameTextbox
}
$textboxSamAccount_FocusChanged = {
	#Update-EmailTextbox
	Update-DisplayNameTextbox
	#Update-UserPrincipalNameTextbox
}


$clearFormToolStripMenuItem_Click={
	Reset-Form
	
}


$exitToolStripMenuItem1_Click={
	$MainForm.close()
	
}

$copyToolStripMenuItem_Click={
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
	
}

$checkedlistboxDISTROo365groups_SelectedIndexChanged = {
	$CopyO365User = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyO365User -ErrorAction SilentlyContinue).CopyO365User
	If ($CopyO365User -ne 1)
	{
		If ($click -ne 1)
		{
			$CachedCheckedDistroGroups = Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue
			
			$checkedlistboxDISTROo365groups.CheckedItems | ForEach-Object{
				#If checked and not in file, add and append
				$CheckItem = Get-Content $CacheDistroGroupsFile | Select-String $_
				If ($null -eq $CheckItem)
				{
					$_ | Out-File $CacheDistroGroupsFile -Force -Append
				}
			}
			
			$CachedCheckedDistroGroups = Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue
			
			
			#Get all unchecked items
			$UncheckedItems = $checkedlistboxDISTROo365groups.Items | Where-Object { $checkedlistboxDISTROo365groups.CheckedItems -notcontains $_ }
			
			#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
			Compare-Object -ReferenceObject $CachedCheckedDistroGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
				# == means that the obj is unchecked but present on the file, we need to remove from file
				If ($_.SideIndicator -eq "==")
				{
					#Remove the item that is present on the list but unchecked from the file
					$Info = $CachedCheckedDistroGroups | select-string -pattern $_.InputObject -notmatch
					$InfoMessage = $Info
					$Info | Out-File $CacheDistroGroupsFile -Force -ErrorAction SilentlyContinue
				}
			}
		}
	}
	
}

$checkedlistboxO365SecurityGroups_SelectedIndexChanged={
	If ($click -ne 1)
	{
		$CachedCheckedSecurityGroups = Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue
		
		$checkedlistboxO365SecurityGroups.CheckedItems | ForEach-Object{
			#If checked and not in file, add and append
			$CheckItem = Get-Content $CacheSecurityGroupsFile | Select-String $_
			If ($null -eq $CheckItem)
			{
				$_ | Out-File $CacheSecurityGroupsFile -Force -Append
			}
		}
		
		$CachedCheckedSecurityGroups = Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue
		
		
		#Get all unchecked items
		$UncheckedItems = $checkedlistboxO365SecurityGroups.Items | Where-Object { $checkedlistboxO365SecurityGroups.CheckedItems -notcontains $_ }
		
		#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
		Compare-Object -ReferenceObject $CachedCheckedSecurityGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
			# == means that the obj is unchecked but present on the file, we need to remove from file
			If ($_.SideIndicator -eq "==")
			{
				#Remove the item that is present on the list but unchecked from the file
				$Info = $CachedCheckedSecurityGroups | select-string -pattern $_.InputObject -notmatch
				$InfoMessage = $Info
				$Info | Out-File $CacheSecurityGroupsFile -Force -ErrorAction SilentlyContinue
			}
		}
	}
	
	
}

$checkboxUserMustChangePasswo_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
	
}

$checkboxUserCannotChangePass_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both 'User Must Change Password at Next Logon' and User 'Cannot Change Password' for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
		
	}
	
	
}

$checkboxPasswordNeverExpires_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
	
}


$copyOffice365UserToolStripMenuItem_Click={
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force | Out-Null
	Show-CopyFromO365User_psf
	Copy-O365UserAttributes
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force | Out-Null
	
}

$MainForm_Closing=[System.Windows.Forms.FormClosingEventHandler]{
Get-PSSession | Remove-PSSession -ErrorAction SilentlyContinue
	
}


]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>