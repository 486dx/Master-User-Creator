<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
wF8IAHgIAADwFwIAHgIAAPyFAICHAAAAfyEA4CEAAMBfCAB4CAAA8BcCAB4CAAD8hQCAhwAAAH8h
AOAhAADAXwgAeAgAAPAXAgCerg4A94YFAPjxam5uJgDQtQHg3qAaGxu9GxdjjLEf35qamrx9+61z
x98BBIDFujIAAAB2IQAsRgAAAEwIAIsRAAAAEwLAYgQAAMCEALAYAQAAMCEALEYAAABMCACLEQAA
ABMCwGIEAADAhACwGAEAADAhACxGAAAATAgAixEAAAATAsBiBAAAwIQAsBgBAAAwIQAsRgAAAEwI
AIsRAAAAEwLAYgQAAMCEALAYAQAAMCEALEYAAABMCACLEQAAABMCwGIEAADAhACwGAEAADAhACxG
AAAATAgAixEAAAATAsBiBAAAwIQAsBgBAAAwIQAsRgAAAEwIAIsRAAAAEwLAYgQAAMCEALAYAQAA
MCEALEYAAABMCACLEQAAABMCwGIEAADAhACwGAEAADAhACxGAAAATAgAixEAAAATAsBiBAAAwIQA
sBgBAAAwIQAsRgAAAEwIAIsRAAAAEwLAYgQAAMCEALAYAQAAMCEALEYAAABMCACLEQAAABMCwGIE
AADAhACwGAEAADAhACxGAAAATAgAixEAAAATAsBiBAAAwIQAsBgBAAAwIQAsRgAAAEwIAIsRAAAA
EwLAYgQAAMCEALAYAQAAMCEALEYAAABMCACLEQAAABMCwGIEAADAhACwGAEAADAhACxGAAAATAgA
ixEAAAATAsBiBAAAwIQAsBgBAAAwIQAsRgAAAEwIAIsRAAAAEwLAYgQAAMCEALAYAQAAMCEALEYA
AABMCACLEQAAABMCwGIEAADAhACwGAEAADAhACxGAAAATAgAixEAAAATAsBiBAAAwIQAsBgBAAAw
IQAsRgAAAEwIAIsRAAAAEwLAYgQAAMCEALAYAQAAMCEALEYAAABMCACLEQAAABMCwGIEAADAhACw
GAEAADAhACxGAAAATAgAixEAAAATAsBiBAAAwIQAsBgBAAAwIQAsRgAAAEwIAIsRAAAAEwLAYgQA
AMCEALAYAQAAMCEALEYAAABMCACLEQAAABMCwGIEAADAhACwGAEAADAhACxGAAAATAgAixEAAAAT
AsBiBAAAwIQAsBgBAAAwIQAsRgAAAEwIAIsRAAAAEwLAYgQAAMCEALAYAQAAMCEALEYAAABMCACL
EQAAABMCwGIEAADAhACwGAEAADAhACxGAAAATAgAixEAAAATAsBiBAAAwIQAsBgBAAAwIQAsRgAA
AEwIAIsRAAAAEwLAYgQAAMCEALAYAQAAMCEALEYAAABMCACLEQAAABMCwGIEAADAhACwGAEAADAh
ACxGAAAATAgAixEAAAATAsBiBAAAwIQAsBgBAAAwIQAsRgAAAEwIAIsRAAAAEwLAYgQAAMCEALAY
AQAAMCEALEYAAABMCACLEQAAABMCwGIEAADAhACwGAEAADAhACxGAAAATAgAixEAAAATAsBiBAAA
wIQAsBgBAAAwIQAsRgAAAEwIAIsRAAAAEwLAYgQAAMCEALAYAQAAMCEALEYAAABMCACLEQAAABMC
wGIEAADAhACwGAEAADAhACxGAAAATAgAixEAAAATAsBiBAAAwIQAsBgBAAAwIQAsRgAAAEwIAIsR
AAAAEwLAYgQAAMCEALAYAQAAMCEALEYAAABMCACLEQAAABMCwGIEAADAhACwGAEAADAhACxGAAAA
TAgAixEAAAATAsBiBAAAwIQAsBgBAAAwIQAsRgAAAEwIAIsRAAAAEwLAYgQAAMCEALAYAQAAMCEA
LNaZAGhoaLh6kwAA+MHFixcJAFt1NADcVVdXeyHAGGPMH3PP/BIAlupMADQ1NXk3BvdMAGOMMX+s
paWl3WPC9SMAUkxHA8CtPzcAampqVVtbxxhjLEVXV1ev2o7OuXy9EwHtHReuHwGQYjpzBqCgMKBQ
OKpIJMYYYywFF3buwysqQ87CHVqls9NnilRf3/B3jxMEQIrpaAC4p4DKyiuvPi0EAJCqWlqadfZs
S4d24cIFhUIR7+wvAWCZzgRAaVnF1ZsPACAVXb582fu+fmNjY4fmPhGwoiLkfSuAALAMAQAA/kEA
IIkAAAD/IACQRAAAgH+YAqC5udnb9W8nACxGAACAf7QXAO5BvqCgQIFAwHv5+vcRAJYiAADAP64P
APdRf2FhodLT070Fg8HvnQkgACxGAACAf1wbAO6BvqqqShkZGd4/9R6LxZIvt0UAAWAxAgAA/OPa
AHD/dVf3YB+Px737eHduBNTW1nrvIwAsRwAAgH9c/y0A90B/7Sl/9+W2g787AsBiBAAA+Ed7TwL8
WyMALEYAAIB/EABIIgAAwD8IACQRAADgHwQAkggAAPAPAgBJBAAA+AcBgCQCAAD8gwBAEgEAAP5B
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
rkJggg==</Preview>
  <Form>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
AA==</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load = {
	
	$textboxADSyncServer.Enabled = $false
	
	$datetimepickerDATE.Refresh()
	
	$radiobuttonNever.Checked = $true
	$datetimepickerDATE.Enabled = $false
	$datetimepickerTIME.Enabled = $false
	
	$datetimepickerTIME.Text = "05:00 PM"
	
	$MainForm.MaximizeBox = $false
	
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$comboboxO365countrycode.SelectedItem = "US"
	
	$comboboxO365HidefromGAL.SelectedItem = "False"
	
	$labelTimeLeft.Text = ""
	
	$global:ExternalLog = "$env:TEMP\MUC.txt"
	$labelLogFile.Text = $global:ExternalLog
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateAnActiveDirect.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunADSync.CheckState -eq 'Checked')
		{
			If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$SyncServer = $textboxADSyncServer.text
				add-logs -text 'LOG: DirSync Enabled'
				add-logs -text "LOG: Running DirSync on $SyncServer"
				add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
				Try
				{
					Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
				}
				Catch
				{
					add-logs -text "WARN: $_"
					Add-Type -AssemblyName System.Windows.Forms
					[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
				}
				add-logs -text 'LOG: Done'
			}
			Else
			{
				add-logs -text "WARN: ADSync Server text box is empty"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
			}
		}
		#If DirSync is not enabled
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				
				#User is going to be disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop) )
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
		
		#### ACTIVE DIRECTORY USER CREATION PORTION ####
		
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					#Check if Account is set to expire at a specific time
					Add-Logs -text "LOG: Checking if User account expiration is set"
					If ($radiobuttonExpireOn.Checked -eq $true)
					{
						Add-Logs -text "LOG: User account expiration is set"
						$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
						Add-Logs -text "Account will be disabled on $Timespan"
						Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
						Add-Logs -text "LOG: Done"
					}
					Else
					{
						Add-Logs -text "LOG: User account expiration not set"
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text "LOG: Done"
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
		
		
		
		#### OFFICE 365 USER CREATION PORTION ####
		
		
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunADSync.CheckState -eq 'Checked')
		{
			If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$SyncServer = $textboxADSyncServer.text
				add-logs -text 'LOG: DirSync Enabled'
				add-logs -text "LOG: Running DirSync on $SyncServer"
				add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
				Try
				{
					Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
				}
				Catch
				{
					add-logs -text "WARN: $_"
					Add-Type -AssemblyName System.Windows.Forms
					[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
				}
				add-logs -text 'LOG: Done'
			}
			Else
			{
				add-logs -text "WARN: ADSync Server text box is empty"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
			}
		}
		#If DirSync is not enabled
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				
				#User is going to be disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							
							$ts = New-TimeSpan -Minutes 8
							
							$TermLoop = ((get-date) + $ts).ToString("HH:mm")
							Do
							{
								$DateNow = (Get-date).ToString("HH:mm")
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
								Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
							}
							Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}


$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}


$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateAnActiveDirect.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = $textboxUserLogonName.text
		$comboboxO365Domains.SelectedItem = $comboboxDomains.SelectedItem
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		If ($Modules -eq $Null)
		{
			add-logs -text 'WARN: MFA Module was not found'
			$InfoMessage = "Exchange Online MFA Module was not found, please make sure you have downloaded and installed it from your tenant https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/mfa-connect-to-exchange-online-powershell?view=exchange-ps"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		
		$labelconnectionstatus.Text = "Connected"
		$labelconnectionstatus.ForeColor = 'Green'
		
		$Global:O365_Pre_Req++
		#Create just an AD User
		If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD nad O365 User (w/ ADSync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD And O365 User (no Sync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 User no adsync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 user with ADSync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		$comboboxO365HidefromGAL.SelectedItem = "False"
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunADSync_CheckedChanged = {
	If ($checkboxRunADSync.Checked -eq $True)
	{
		$groupboxNoAdSync.Enabled = $false
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
		
		$textboxADSyncServer.Enabled = $true
		
	}
	elseif ($checkboxRunADSync.Checked -eq $false)
	{
		$groupboxNoAdSync.Enabled = $True
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
		
		$textboxADSyncServer.Enabled = $false
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged= {
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
		
	If ($Global:ExternalLog -ne $null)
	{
		$console.Text | Out-File $Global:ExternalLog 
	}
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Enabling ADSync CheckBox'
		$checkboxRunADSync.Enabled = $True
		add-logs -text 'LOG: Enabling No ADSync Groupbox'
		$groupboxNoAdSync.Enabled = $true
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateAnActiveDirect_CheckedChanged = {
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Organizational Unit Tree'
		add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
		$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName
		If ($null -eq $OUTree)
		{
			$InfoMessage = 'Could not load Organizational Unit structure'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$comboboxOUTree.Enabled = $false
		}
		Else
		{
			add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
			Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
			add-logs -text 'LOG: Done'
			$comboboxOUTree.Enabled = $true
		}
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$textboxUPNDomain.Text ="Not Available"
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$comboboxDomains.Enabled = $false
		}
		Else
		{
			$comboboxDomains.Enabled = $true
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {

		$textboxSamAccount.Text = $textboxUserLogonName.Text
	
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
		
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
		
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	$comboboxOUTree.SelectedText = ""
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunADSync.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	$comboboxMFA.SelectedItem = "False"
	$comboboxO365countrycode.SelectedItem = "US"
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""
	$textboxo365city.Text = ""
	$textboxo365state.Text = ""
	$textboxo365zip.Text = ""
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHub_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$Global:O365_Pre_Req--
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	$labelconnectionstatus.Text = "Not Connected"
	$labelconnectionstatus.ForeColor = 'Firebrick'
	
}



$saveLogAsToolStripMenuItem_Click={
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged={
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}




$versionToolStripMenuItem_Click={
	$InfoMessage = "
Version Number: $Version
Build Date: $Builddate
Author: Brad Wyatt
"
	$InfoTitle = "Build Information"
	Show-MessageBox_psf
	
}


$changelogToolStripMenuItem_Click={
	Show-ChangeLog_psf
	
}

$labelChangelog_Click={
	Show-ChangeLog_psf
	
}

$externalLogFileToolStripMenuItem_Click={
	# Class Details:  https://msdn.microsoft.com/en-us/library/system.windows.forms.savefiledialog(v=vs.110).aspx 
	$SaveFileDialog = New-Object windows.forms.savefiledialog
	$SaveFileDialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$SaveFileDialog.title = "Log File Location"
	#$SaveFileDialog.filter = "All files (*.*)| *.*"   
	#$SaveFileDialog.filter = "PublishSettings Files|*.publishsettings|All Files|*.*" 
	$SaveFileDialog.filter = "Log Text File|*.txt"
	$SaveFileDialog.ShowHelp = $True
	$result = $SaveFileDialog.ShowDialog()
	$result
	$Global:ExternalLog = $SaveFileDialog.filename
	Write-Host $result
	If ($result -eq "Ok")
	{
		
		$labelLogFile.Text = $global:ExternalLog
		
	}
}


$radiobuttonExpireOn_CheckedChanged = {
	#Enable the Date Date / Time picker
	$datetimepickerDATE.Enabled = $true
	#Enable the Time date/time picker
	$datetimepickerTIME.Enabled = $true
	
}

$radiobuttonNever_CheckedChanged = {
	#Disable the Date Date/Time picker
	$datetimepickerDATE.Enabled = $false
	#Disable the Time Date/Time picker
	$datetimepickerTIME.Enabled = $false
	
}

$datetimepickerDATE_ValueChanged={	
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$datetimepickerTIME_ValueChanged={
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>